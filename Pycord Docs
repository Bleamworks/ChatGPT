Bots
class discord.Bot(description=None, *args, **options)[source]
Attributes
activity
allowed_mentions
application_flags
application_id
auto_sync_commands
cached_messages
cogs
debug_guilds
description
emojis
extensions
get_command
guilds
intents
latency
owner_id
owner_ids
persistent_views
private_channels
status
stickers
user
users
voice_clients
Methods
add_application_command
add_check
add_cog
add_listener
add_view
after_invoke
application_command
application_info
before_identify_hook
before_invoke
change_presence
check
check_once
clear
close
command
connect
create_dm
create_group
create_guild
delete_invite
event
fetch_application
fetch_channel
fetch_guild
fetch_guilds
fetch_invite
fetch_premium_sticker_packs
fetch_stage_instance
fetch_sticker
fetch_template
fetch_user
fetch_webhook
fetch_widget
get_all_channels
get_all_members
get_application_command
get_application_context
get_autocomplete_context
get_channel
get_cog
get_desynced_commands
get_emoji
get_guild
get_message
get_or_fetch_user
get_partial_messageable
get_stage_instance
get_sticker
get_user
group
invoke_application_command
is_closed
is_owner
is_ready
is_ws_ratelimited
listen
load_extension
load_extensions
login
message_command
on_application_command_error
on_error
process_application_commands
register_command
register_commands
reload_extension
remove_application_command
remove_check
remove_cog
remove_listener
run
slash_command
slash_group
start
sync_commands
unload_extension
user_command
wait_for
wait_until_ready
walk_application_commands
Represents a discord bot.

This class is a subclass of discord.Client and as a result anything that you can do with a discord.Client you can do with this bot.

This class also subclasses ApplicationCommandMixin to provide the functionality to manage commands.

New in version 2.0.

description
The content prefixed into the default help message.

TYPE:
str

owner_id
The user ID that owns the bot. If this is not set and is then queried via is_owner() then it is fetched automatically using application_info().

TYPE:
Optional[int]

owner_ids
The user IDs that owns the bot. This is similar to owner_id. If this is not set and the application is team based, then it is fetched automatically using application_info(). For performance reasons it is recommended to use a set for the collection. You cannot set both owner_id and owner_ids.

New in version 1.3.

TYPE:
Optional[Collection[int]]

debug_guilds
Guild IDs of guilds to use for testing commands. The bot will not create any global commands if debug guild IDs are passed.

New in version 2.0.

TYPE:
Optional[List[int]]

auto_sync_commands
Whether to automatically sync slash commands. This will call sync_commands() in discord.on_connect(), and in process_application_commands if the command is not found. Defaults to True.

New in version 2.0.

TYPE:
bool

@command(**kwargs)
An alias for application_command().

Note

This decorator is overridden by discord.ext.commands.Bot.

New in version 2.0.

RETURNS:
A decorator that converts the provided method into an ApplicationCommand, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, ApplicationCommand]

@event(coro)
A decorator that registers an event to listen to.

You can find more info about the events on the documentation below.

The events must be a coroutine, if not, TypeError is raised.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

EXAMPLE

@client.event
async def on_ready():
    print('Ready!')
PARAMETERS:
coro (TypeVar(Coro, bound= Callable[..., Coroutine[Any, Any, Any]])) –

RETURN TYPE:
TypeVar(Coro, bound= Callable[..., Coroutine[Any, Any, Any]])

@message_command(**kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_application_command(). This shortcut is made specifically for MessageCommand.

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a MessageCommand, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, MessageCommand]

@slash_command(**kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_application_command(). This shortcut is made specifically for SlashCommand.

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a SlashCommand, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, SlashCommand]

@user_command(**kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_application_command(). This shortcut is made specifically for UserCommand.

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a UserCommand, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, UserCommand]

@listen(name=...)
A decorator that registers another function as an external event listener. Basically this allows you to listen to multiple events from different places e.g. such as on_ready()

The functions being listened to must be a coroutine.

RAISES:
TypeError – The function being listened to is not a coroutine.

EXAMPLE

@bot.listen()
async def on_message(message):
    print('one')

# in some other file...

@bot.listen('on_message')
async def my_message(message):
    print('two')
Would print one and two in an unspecified order.

PARAMETERS:
name (str) –

RETURN TYPE:
Callable[[TypeVar(CFT, bound= Callable[..., Coroutine[Any, Any, Any]])], TypeVar(CFT, bound= Callable[..., Coroutine[Any, Any, Any]])]

property activity
The activity being used upon logging in.

RETURN TYPE:
Optional[BaseActivity]

add_application_command(command)
Adds a ApplicationCommand into the internal list of commands.

This is usually not called, instead the command() or other shortcut decorators are used instead.

New in version 2.0.

PARAMETERS:
command (ApplicationCommand) – The command to add.

RETURN TYPE:
None

add_check(func, *, call_once=False)
Adds a global check to the bot. This is the non-decorator interface to check() and check_once().

PARAMETERS:
func – The function that was used as a global check.

call_once (bool) – If the function should only be called once per Bot.invoke() call.

RETURN TYPE:
None

add_cog(cog, *, override=False)
Adds a “cog” to the bot.

A cog is a class that has its own event listeners and commands.

Changed in version 2.0: ClientException is raised when a cog with the same name is already loaded.

PARAMETERS:
cog (Cog) – The cog to register to the bot.

override (bool) –

If a previously loaded cog with the same name should be ejected instead of raising an error.

New in version 2.0.

RAISES:
TypeError – The cog does not inherit from Cog.

ApplicationCommandError – An error happened during loading.

ClientException – A cog with the same name is already loaded.

RETURN TYPE:
None

add_listener(func, name=...)
The non decorator alternative to listen().

PARAMETERS:
func (coroutine) – The function to call.

name (str) – The name of the event to listen for. Defaults to func.__name__.

EXAMPLE

async def on_ready(): pass
async def my_message(message): pass

bot.add_listener(on_ready)
bot.add_listener(my_message, 'on_message')
RETURN TYPE:
None

add_view(view, *, message_id=None)
Registers a View for persistent listening.

This method should be used for when a view is comprised of components that last longer than the lifecycle of the program.

New in version 2.0.

PARAMETERS:
view (discord.ui.View) – The view to register for dispatching.

message_id (Optional[int]) – The message ID that the view is attached to. This is currently used to refresh the view’s state during message update events. If not given then message update events are not propagated for the view.

RAISES:
TypeError – A view was not passed.

ValueError – The view is not persistent. A persistent view has no timeout and all their components have an explicitly provided custom_id.

RETURN TYPE:
None

after_invoke(coro)
A decorator that registers a coroutine as a post-invoke hook. A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required. This post-invoke hook takes a sole parameter, a Context.

Note

Similar to before_invoke(), this is not called unless checks and argument parsing procedures succeed. This hook is, however, always called regardless of the internal command callback raising an error (i.e. CommandInvokeError). This makes it ideal for clean-up scenarios.

PARAMETERS:
coro (coroutine) – The coroutine to register as the post-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

property allowed_mentions
The allowed mention configuration.

New in version 1.4.

RETURN TYPE:
AllowedMentions | None

application_command(**kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_application_command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into an ApplicationCommand, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, ApplicationCommand]

property application_flags
The client’s application flags.

New in version 2.0.

RETURN TYPE:
ApplicationFlags

property application_id
The client’s application ID.

If this is not passed via __init__ then this is retrieved through the gateway when an event contains the data. Usually after on_connect() is called.

New in version 2.0.

RETURN TYPE:
int | None

await application_info()
This function is a coroutine.

Retrieves the bot’s application information.

RETURNS:
The bot’s application information.

RETURN TYPE:
AppInfo

RAISES:
HTTPException – Retrieving the information failed somehow.

await before_identify_hook(shard_id, *, initial=False)
This function is a coroutine.

A hook that is called before IDENTIFYing a session. This is useful if you wish to have more control over the synchronization of multiple IDENTIFYing clients.

The default implementation sleeps for 5 seconds.

New in version 1.4.

PARAMETERS:
shard_id (int) – The shard ID that requested being IDENTIFY’d

initial (bool) – Whether this IDENTIFY is the first initial IDENTIFY.

RETURN TYPE:
None

before_invoke(coro)
A decorator that registers a coroutine as a pre-invoke hook. A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required. This pre-invoke hook takes a sole parameter, a Context.

Note

The before_invoke() and after_invoke() hooks are only called if all checks and argument parsing procedures pass without error. If any check or argument parsing procedures fail then the hooks are not called.

PARAMETERS:
coro (coroutine) – The coroutine to register as the pre-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

property cached_messages
Read-only list of messages the connected client has cached.

New in version 1.1.

RETURN TYPE:
Sequence[Message]

await change_presence(*, activity=None, status=None)
This function is a coroutine.

Changes the client’s presence.

PARAMETERS:
activity (Optional[BaseActivity]) – The activity being done. None if no currently active activity is done.

status (Optional[Status]) – Indicates what status to change to. If None, then Status.online is used.

RAISES:
InvalidArgument – If the activity parameter is not the proper type.

EXAMPLE

game = discord.Game("with the API")
await client.change_presence(status=discord.Status.idle, activity=game)
Changed in version 2.0: Removed the afk keyword-only parameter.

check(func)
A decorator that adds a global check to the bot. A global check is similar to a check() that is applied on a per-command basis except it is run before any command checks have been verified and applies to every command the bot has.

Note

This function can either be a regular function or a coroutine. Similar to a command check(), this takes a single parameter of type Context and can only raise exceptions inherited from ApplicationCommandError.

EXAMPLE

@bot.check
def check_commands(ctx):
    return ctx.command.qualified_name in allowed_commands
check_once(func)
A decorator that adds a “call once” global check to the bot. Unlike regular global checks, this one is called only once per Bot.invoke() call. Regular global checks are called whenever a command is called or Command.can_run() is called. This type of check bypasses that and ensures that it’s called only once, even inside the default help command.

Note

When using this function the Context sent to a group subcommand may only parse the parent command and not the subcommands due to it being invoked once per Bot.invoke() call.

Note

This function can either be a regular function or a coroutine. Similar to a command check(), this takes a single parameter of type Context and can only raise exceptions inherited from ApplicationCommandError.

EXAMPLE

@bot.check_once
def whitelist(ctx):
    return ctx.message.author.id in my_whitelist
clear()
Clears the internal state of the bot.

After this, the bot can be considered “re-opened”, i.e. is_closed() and is_ready() both return False along with the bot’s internal cache cleared.

RETURN TYPE:
None

await close()
This function is a coroutine.

Closes the connection to Discord.

RETURN TYPE:
None

property cogs
A read-only mapping of cog name to cog.

RETURN TYPE:
Mapping[str, Cog]

await connect(*, reconnect=True)
This function is a coroutine.

Creates a WebSocket connection and lets the WebSocket listen to messages from Discord. This is a loop that runs the entire event system and miscellaneous aspects of the library. Control is not resumed until the WebSocket connection is terminated.

PARAMETERS:
reconnect (bool) – If we should attempt reconnecting, either due to internet failure or a specific failure on Discord’s part. Certain disconnects that lead to bad state will not be handled (such as invalid sharding payloads or bad tokens).

RAISES:
GatewayNotFound – The gateway to connect to Discord is not found. Usually if this is thrown then there is a Discord API outage.

ConnectionClosed – The WebSocket connection has been terminated.

RETURN TYPE:
None

await create_dm(user)
This function is a coroutine.

Creates a DMChannel with this user.

This should be rarely called, as this is done transparently for most people.

New in version 2.0.

PARAMETERS:
user (Snowflake) – The user to create a DM with.

RETURNS:
The channel that was created.

RETURN TYPE:
DMChannel

create_group(name, description=None, guild_ids=None, **kwargs)
A shortcut method that creates a slash command group with no subcommands and adds it to the internal command list via add_application_command().

New in version 2.0.

PARAMETERS:
name (str) – The name of the group to create.

description (Optional[str]) – The description of the group to create.

guild_ids (Optional[List[int]]) – A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if None is passed.

kwargs – Any additional keyword arguments to pass to SlashCommandGroup.

RETURNS:
The slash command group that was created.

RETURN TYPE:
SlashCommandGroup

await create_guild(*, name, icon=..., code=...)
This function is a coroutine.

Creates a Guild.

Bot accounts in more than 10 guilds are not allowed to create guilds.

PARAMETERS:
name (str) – The name of the guild.

icon (Optional[bytes]) – The bytes-like object representing the icon. See ClientUser.edit() for more details on what is expected.

code (str) –

The code for a template to create the guild with.

New in version 1.4.

RETURNS:
The guild created. This is not the same guild that is added to cache.

RETURN TYPE:
Guild

RAISES:
HTTPException – Guild creation failed.

InvalidArgument – Invalid icon image format given. Must be PNG or JPG.

await delete_invite(invite)
This function is a coroutine.

Revokes an Invite, URL, or ID to an invite.

You must have the manage_channels permission in the associated guild to do this.

PARAMETERS:
invite (Union[Invite, str]) – The invite to revoke.

RAISES:
Forbidden – You do not have permissions to revoke invites.

NotFound – The invite is invalid or expired.

HTTPException – Revoking the invite failed.

RETURN TYPE:
None

property emojis
The emojis that the connected client has.

property extensions
A read-only mapping of extension name to extension.

RETURN TYPE:
Mapping[str, module]

await fetch_application(application_id, /)
This function is a coroutine. Retrieves a PartialAppInfo from an application ID.

PARAMETERS:
application_id (int) – The application ID to retrieve information from.

RETURNS:
The application information.

RETURN TYPE:
PartialAppInfo

RAISES:
NotFound – An application with this ID does not exist.

HTTPException – Retrieving the application failed.

await fetch_channel(channel_id, /)
This function is a coroutine.

Retrieves a abc.GuildChannel, abc.PrivateChannel, or Thread with the specified ID.

Note

This method is an API call. For general usage, consider get_channel() instead.

New in version 1.2.

RETURNS:
The channel from the ID.

RETURN TYPE:
Union[abc.GuildChannel, abc.PrivateChannel, Thread]

RAISES:
InvalidData – An unknown channel type was received from Discord.

HTTPException – Retrieving the channel failed.

NotFound – Invalid Channel ID.

Forbidden – You do not have permission to fetch this channel.

PARAMETERS:
channel_id (int) –

await fetch_guild(guild_id, /, *, with_counts=True)
This function is a coroutine.

Retrieves a Guild from an ID.

Note

Using this, you will not receive Guild.channels, Guild.members, Member.activity and Member.voice per Member.

Note

This method is an API call. For general usage, consider get_guild() instead.

PARAMETERS:
guild_id (int) – The guild’s ID to fetch from.

with_counts (bool) –

Whether to include count information in the guild. This fills the Guild.approximate_member_count and Guild.approximate_presence_count fields.

New in version 2.0.

RETURNS:
The guild from the ID.

RETURN TYPE:
Guild

RAISES:
Forbidden – You do not have access to the guild.

HTTPException – Getting the guild failed.

fetch_guilds(*, limit=100, before=None, after=None)
Retrieves an AsyncIterator that enables receiving your guilds.

Note

Using this, you will only receive Guild.owner, Guild.icon, Guild.id, and Guild.name per Guild.

Note

This method is an API call. For general usage, consider guilds instead.

PARAMETERS:
limit (Optional[int]) – The number of guilds to retrieve. If None, it retrieves every guild you have access to. Note, however, that this would make it a slow operation. Defaults to 100.

before (Union[abc.Snowflake, datetime.datetime]) – Retrieves guilds before this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Union[abc.Snowflake, datetime.datetime]) – Retrieve guilds after this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

YIELDS:
Guild – The guild with the guild data parsed.

RAISES:
HTTPException – Getting the guilds failed.

EXAMPLES

Usage

async for guild in client.fetch_guilds(limit=150):
    print(guild.name)
Flattening into a list

guilds = await client.fetch_guilds(limit=150).flatten()
# guilds is now a list of Guild...
All parameters are optional.

RETURN TYPE:
GuildIterator

await fetch_invite(url, *, with_counts=True, with_expiration=True, event_id=None)
This function is a coroutine.

Gets an Invite from a discord.gg URL or ID.

Note

If the invite is for a guild you have not joined, the guild and channel attributes of the returned Invite will be PartialInviteGuild and PartialInviteChannel respectively.

PARAMETERS:
url (Union[Invite, str]) – The Discord invite ID or URL (must be a discord.gg URL).

with_counts (bool) – Whether to include count information in the invite. This fills the Invite.approximate_member_count and Invite.approximate_presence_count fields.

with_expiration (bool) –

Whether to include the expiration date of the invite. This fills the Invite.expires_at field.

New in version 2.0.

event_id (Optional[int]) –

The ID of the scheduled event to be associated with the event.

See Invite.set_scheduled_event() for more info on event invite linking.

New in version 2.0.

RETURNS:
The invite from the URL/ID.

RETURN TYPE:
Invite

RAISES:
NotFound – The invite has expired or is invalid.

HTTPException – Getting the invite failed.

await fetch_premium_sticker_packs()
This function is a coroutine.

Retrieves all available premium sticker packs.

New in version 2.0.

RETURNS:
All available premium sticker packs.

RETURN TYPE:
List[StickerPack]

RAISES:
HTTPException – Retrieving the sticker packs failed.

await fetch_stage_instance(channel_id, /)
This function is a coroutine.

Gets a StageInstance for a stage channel id.

New in version 2.0.

PARAMETERS:
channel_id (int) – The stage channel ID.

RETURNS:
The stage instance from the stage channel ID.

RETURN TYPE:
StageInstance

RAISES:
NotFound – The stage instance or channel could not be found.

HTTPException – Getting the stage instance failed.

await fetch_sticker(sticker_id, /)
This function is a coroutine.

Retrieves a Sticker with the specified ID.

New in version 2.0.

RETURNS:
The sticker you requested.

RETURN TYPE:
Union[StandardSticker, GuildSticker]

RAISES:
HTTPException – Retrieving the sticker failed.

NotFound – Invalid sticker ID.

PARAMETERS:
sticker_id (int) –

await fetch_template(code)
This function is a coroutine.

Gets a Template from a discord.new URL or code.

PARAMETERS:
code (Union[Template, str]) – The Discord Template Code or URL (must be a discord.new URL).

RETURNS:
The template from the URL/code.

RETURN TYPE:
Template

RAISES:
NotFound – The template is invalid.

HTTPException – Getting the template failed.

await fetch_user(user_id, /)
This function is a coroutine.

Retrieves a User based on their ID. You do not have to share any guilds with the user to get this information, however many operations do require that you do.

Note

This method is an API call. If you have discord.Intents.members and member cache enabled, consider get_user() instead.

PARAMETERS:
user_id (int) – The user’s ID to fetch from.

RETURNS:
The user you requested.

RETURN TYPE:
User

RAISES:
NotFound – A user with this ID does not exist.

HTTPException – Fetching the user failed.

await fetch_webhook(webhook_id, /)
This function is a coroutine.

Retrieves a Webhook with the specified ID.

RETURNS:
The webhook you requested.

RETURN TYPE:
Webhook

RAISES:
HTTPException – Retrieving the webhook failed.

NotFound – Invalid webhook ID.

Forbidden – You do not have permission to fetch this webhook.

PARAMETERS:
webhook_id (int) –

await fetch_widget(guild_id, /)
This function is a coroutine.

Gets a Widget from a guild ID.

Note

The guild must have the widget enabled to get this information.

PARAMETERS:
guild_id (int) – The ID of the guild.

RETURNS:
The guild’s widget.

RETURN TYPE:
Widget

RAISES:
Forbidden – The widget for this guild is disabled.

HTTPException – Retrieving the widget failed.

for ... in get_all_channels()
A generator that retrieves every abc.GuildChannel the client can ‘access’.

This is equivalent to:

for guild in client.guilds:
    for channel in guild.channels:
        yield channel
Note

Just because you receive a abc.GuildChannel does not mean that you can communicate in said channel. abc.GuildChannel.permissions_for() should be used for that.

YIELDS:
abc.GuildChannel – A channel the client can ‘access’.

RETURN TYPE:
Generator[GuildChannel, None, None]

for ... in get_all_members()
Returns a generator with every Member the client can see.

This is equivalent to:

for guild in client.guilds:
    for member in guild.members:
        yield member
YIELDS:
Member – A member the client can see.

RETURN TYPE:
Generator[Member, None, None]

get_application_command(name, guild_ids=None, type=<class 'discord.commands.core.ApplicationCommand'>)
Get a ApplicationCommand from the internal list of commands.

New in version 2.0.

PARAMETERS:
name (str) – The qualified name of the command to get.

guild_ids (List[int]) – The guild ids associated to the command to get.

type (Type[ApplicationCommand]) – The type of the command to get. Defaults to ApplicationCommand.

RETURNS:
The command that was requested. If not found, returns None.

RETURN TYPE:
Optional[ApplicationCommand]

await get_application_context(interaction, cls=<class 'discord.commands.context.ApplicationContext'>)
This function is a coroutine.

Returns the invocation context from the interaction.

This is a more low-level counter-part for process_application_commands() to allow users more fine-grained control over the processing.

PARAMETERS:
interaction (discord.Interaction) – The interaction to get the invocation context from.

cls (Any) – The factory class that will be used to create the context. By default, this is ApplicationContext. Should a custom class be provided, it must be similar enough to ApplicationContext's interface.

RETURNS:
The invocation context. The type of this can change via the cls parameter.

RETURN TYPE:
ApplicationContext

await get_autocomplete_context(interaction, cls=<class 'discord.commands.context.AutocompleteContext'>)
This function is a coroutine.

Returns the autocomplete context from the interaction.

This is a more low-level counter-part for process_application_commands() to allow users more fine-grained control over the processing.

PARAMETERS:
interaction (discord.Interaction) – The interaction to get the invocation context from.

cls (Any) – The factory class that will be used to create the context. By default, this is AutocompleteContext. Should a custom class be provided, it must be similar enough to AutocompleteContext's interface.

RETURNS:
The autocomplete context. The type of this can change via the cls parameter.

RETURN TYPE:
AutocompleteContext

get_channel(id, /)
Returns a channel or thread with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The returned channel or None if not found.

RETURN TYPE:
Optional[Union[abc.GuildChannel, Thread, abc.PrivateChannel]]

get_cog(name)
Gets the cog instance requested.

If the cog is not found, None is returned instead.

PARAMETERS:
name (str) – The name of the cog you are requesting. This is equivalent to the name passed via keyword argument in class creation or the class name if unspecified.

RETURNS:
The cog that was requested. If not found, returns None.

RETURN TYPE:
Optional[Cog]

property get_command
Shortcut for get_application_command().

Note

Overridden in ext.commands.Bot.

New in version 2.0.

await get_desynced_commands(guild_id=None, prefetched=None)
This function is a coroutine.

Gets the list of commands that are desynced from discord. If guild_id is specified, it will only return guild commands that are desynced from said guild, else it will return global commands.

Note

This function is meant to be used internally, and should only be used if you want to override the default command registration behavior.

New in version 2.0.

PARAMETERS:
guild_id (Optional[int]) – The guild id to get the desynced commands for, else global commands if unspecified.

prefetched (Optional[List[ApplicationCommand]]) – If you already fetched the commands, you can pass them here to be used. Not recommended for typical usage.

RETURNS:
A list of the desynced commands. Each will come with at least the cmd and action keys, which respectively contain the command and the action to perform. Other keys may also be present depending on the action, including id.

RETURN TYPE:
List[Dict[str, Any]]

get_emoji(id, /)
Returns an emoji with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The custom emoji or None if not found.

RETURN TYPE:
Optional[Emoji]

get_guild(id, /)
Returns a guild with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The guild or None if not found.

RETURN TYPE:
Optional[Guild]

get_message(id, /)
Returns a message the given ID.

This is useful if you have a message_id but don’t want to do an API call to access the message.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The returned message or None if not found.

RETURN TYPE:
Optional[Message]

await get_or_fetch_user(id, /)
Looks up a user in the user cache or fetches if not found.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The user or None if not found.

RETURN TYPE:
Optional[User]

get_partial_messageable(id, *, type=None)
Returns a partial messageable with the given channel ID.

This is useful if you have a channel_id but don’t want to do an API call to send messages to it.

New in version 2.0.

PARAMETERS:
id (int) – The channel ID to create a partial messageable for.

type (Optional[ChannelType]) – The underlying channel type for the partial messageable.

RETURNS:
The partial messageable

RETURN TYPE:
PartialMessageable

get_stage_instance(id, /)
Returns a stage instance with the given stage channel ID.

New in version 2.0.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The stage instance or None if not found.

RETURN TYPE:
Optional[StageInstance]

get_sticker(id, /)
Returns a guild sticker with the given ID.

New in version 2.0.

Note

To retrieve standard stickers, use fetch_sticker(). or fetch_premium_sticker_packs().

RETURNS:
The sticker or None if not found.

RETURN TYPE:
Optional[GuildSticker]

PARAMETERS:
id (int) –

get_user(id, /)
Returns a user with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The user or None if not found.

RETURN TYPE:
Optional[User]

group(name=None, description=None, guild_ids=None)
A shortcut decorator that initializes the provided subclass of SlashCommandGroup and adds it to the internal command list via add_application_command().

New in version 2.0.

PARAMETERS:
name (Optional[str]) – The name of the group to create. This will resolve to the name of the decorated class if None is passed.

description (Optional[str]) – The description of the group to create.

guild_ids (Optional[List[int]]) – A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if None is passed.

RETURNS:
The slash command group that was created.

RETURN TYPE:
Callable[[Type[SlashCommandGroup]], SlashCommandGroup]

property guilds
The guilds that the connected client is a member of.

property intents
The intents configured for this connection.

New in version 1.5.

RETURN TYPE:
Intents

await invoke_application_command(ctx)
This function is a coroutine.

Invokes the application command given under the invocation context and handles all the internal event dispatch mechanisms.

PARAMETERS:
ctx (ApplicationCommand) – The invocation context to invoke.

RETURN TYPE:
None

is_closed()
Indicates if the WebSocket connection is closed.

RETURN TYPE:
bool

await is_owner(user)
This function is a coroutine.

Checks if a User or Member is the owner of this bot.

If an owner_id is not set, it is fetched automatically through the use of application_info().

Changed in version 1.3: The function also checks if the application is team-owned if owner_ids is not set.

PARAMETERS:
user (abc.User) – The user to check for.

RETURNS:
Whether the user is the owner.

RETURN TYPE:
bool

is_ready()
Specifies if the client’s internal cache is ready for use.

RETURN TYPE:
bool

is_ws_ratelimited()
Whether the WebSocket is currently rate limited.

This can be useful to know when deciding whether you should query members using HTTP or via the gateway.

New in version 1.6.

RETURN TYPE:
bool

property latency
Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This could be referred to as the Discord WebSocket protocol latency.

RETURN TYPE:
float

load_extension(name, *, package=None, recursive=False, store=False)
Loads an extension.

An extension is a python module that contains commands, cogs, or listeners.

An extension must have a global function, setup defined as the entry point on what to do when the extension is loaded. This entry point must have a single argument, the bot.

The extension passed can either be the direct name of a file within the current working directory or a folder that contains multiple extensions.

PARAMETERS:
name (str) – The extension or folder name to load. It must be dot separated like regular Python imports if accessing a submodule. e.g. foo.test if you want to import foo/test.py.

package (Optional[str]) –

The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g .foo.test. Defaults to None.

New in version 1.7.

recursive (Optional[bool]) –

If subdirectories under the given head directory should be recursively loaded. Defaults to False.

New in version 2.0.

store (Optional[bool]) –

If exceptions should be stored or raised. If set to True, all exceptions encountered will be stored in a returned dictionary as a load status. If set to False, if any exceptions are encountered they will be raised and the bot will be closed. If no exceptions are encountered, a list of loaded extension names will be returned. Defaults to False.

New in version 2.0.

RETURNS:
If the store parameter is set to True, a dictionary will be returned that contains keys to represent the loaded extension names. The values bound to each key can either be an exception that occurred when loading that extension or a True boolean representing a successful load. If the store parameter is set to False, either a list containing a list of loaded extensions or nothing due to an encountered exception.

RETURN TYPE:
Optional[Union[Dict[str, Union[errors.ExtensionError, bool]], List[str]]]

RAISES:
ExtensionNotFound – The extension could not be imported. This is also raised if the name of the extension could not be resolved using the provided package parameter.

ExtensionAlreadyLoaded – The extension is already loaded.

NoEntryPointError – The extension does not have a setup function.

ExtensionFailed – The extension or its setup function had an execution error.

load_extensions(*names, package=None, recursive=False, store=False)
Loads multiple extensions at once.

This method simplifies the process of loading multiple extensions by handling the looping of load_extension.

PARAMETERS:
names (str) – The extension or folder names to load. It must be dot separated like regular Python imports if accessing a submodule. e.g. foo.test if you want to import foo/test.py.

package (Optional[str]) –

The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g .foo.test. Defaults to None.

New in version 1.7.

recursive (Optional[bool]) –

If subdirectories under the given head directory should be recursively loaded. Defaults to False.

New in version 2.0.

store (Optional[bool]) –

If exceptions should be stored or raised. If set to True, all exceptions encountered will be stored in a returned dictionary as a load status. If set to False, if any exceptions are encountered they will be raised and the bot will be closed. If no exceptions are encountered, a list of loaded extension names will be returned. Defaults to False.

New in version 2.0.

RETURNS:
If the store parameter is set to True, a dictionary will be returned that contains keys to represent the loaded extension names. The values bound to each key can either be an exception that occurred when loading that extension or a True boolean representing a successful load. If the store parameter is set to False, either a list containing names of loaded extensions or nothing due to an encountered exception.

RETURN TYPE:
Optional[Union[Dict[str, Union[errors.ExtensionError, bool]], List[str]]]

RAISES:
ExtensionNotFound – A given extension could not be imported. This is also raised if the name of the extension could not be resolved using the provided package parameter.

ExtensionAlreadyLoaded – A given extension is already loaded.

NoEntryPointError – A given extension does not have a setup function.

ExtensionFailed – A given extension or its setup function had an execution error.

await login(token)
This function is a coroutine.

Logs in the client with the specified credentials.

PARAMETERS:
token (str) – The authentication token. Do not prefix this token with anything as the library will do it for you.

RAISES:
TypeError – The token was in invalid type.

LoginFailure – The wrong credentials are passed.

HTTPException – An unknown HTTP related error occurred, usually when it isn’t 200 or the known incorrect credentials passing status code.

RETURN TYPE:
None

await on_application_command_error(context, exception)
This function is a coroutine.

The default command error handler provided by the bot.

By default, this prints to sys.stderr however it could be overridden to have a different implementation.

This only fires if you do not specify any listeners for command error.

PARAMETERS:
context (ApplicationContext) –

exception (DiscordException) –

RETURN TYPE:
None

await on_error(event_method, *args, **kwargs)
This function is a coroutine.

The default error handler provided by the client.

By default, this prints to sys.stderr however it could be overridden to have a different implementation. Check on_error() for more details.

PARAMETERS:
event_method (str) –

args (Any) –

kwargs (Any) –

RETURN TYPE:
None

property persistent_views
A sequence of persistent views added to the client.

New in version 2.0.

RETURN TYPE:
Sequence[View]

property private_channels
The private channels that the connected client is participating on.

Note

This returns only up to 128 most recent private channels due to an internal working on how Discord deals with private channels.

await process_application_commands(interaction, auto_sync=None)
This function is a coroutine.

This function processes the commands that have been registered to the bot and other groups. Without this coroutine, none of the commands will be triggered.

By default, this coroutine is called inside the on_interaction() event. If you choose to override the on_interaction() event, then you should invoke this coroutine as well.

This function finds a registered command matching the interaction id from application commands and invokes it. If no matching command was found, it replies to the interaction with a default message.

New in version 2.0.

PARAMETERS:
interaction (discord.Interaction) – The interaction to process

auto_sync (Optional[bool]) – Whether to automatically sync and unregister the command if it is not found in the internal cache. This will invoke the sync_commands() method on the context of the command, either globally or per-guild, based on the type of the command, respectively. Defaults to Bot.auto_sync_commands.

RETURN TYPE:
None

await register_command(command, force=True, guild_ids=None)
This function is a coroutine.

Registers a command. If the command has guild_ids set, or if the guild_ids parameter is passed, the command will be registered as a guild command for those guilds.

PARAMETERS:
command (ApplicationCommand) – The command to register.

force (bool) – Whether to force the command to be registered. If this is set to False, the command will only be registered if it seems to already be registered and up to date with our internal cache. Defaults to True.

guild_ids (list) – A list of guild ids to register the command for. If this is not set, the command’s ApplicationCommand.guild_ids attribute will be used.

RETURNS:
The command that was registered

RETURN TYPE:
ApplicationCommand

await register_commands(commands=None, guild_id=None, method='bulk', force=False, delete_existing=True)
This function is a coroutine.

Register a list of commands.

New in version 2.0.

PARAMETERS:
commands (Optional[List[ApplicationCommand]]) – A list of commands to register. If this is not set (None), then all commands will be registered.

guild_id (Optional[int]) – If this is set, the commands will be registered as a guild command for the respective guild. If it is not set, the commands will be registered according to their ApplicationCommand.guild_ids attribute.

method (Literal['individual', 'bulk', 'auto']) – The method to use when registering the commands. If this is set to “individual”, then each command will be registered individually. If this is set to “bulk”, then all commands will be registered in bulk. If this is set to “auto”, then the method will be determined automatically. Defaults to “bulk”.

force (bool) – Registers the commands regardless of the state of the command on Discord. This uses one less API call, but can result in hitting rate limits more often. Defaults to False.

delete_existing (bool) – Whether to delete existing commands that are not in the list of commands to register. Defaults to True.

reload_extension(name, *, package=None)
Atomically reloads an extension.

This replaces the extension with the same extension, only refreshed. This is equivalent to a unload_extension() followed by a load_extension() except done in an atomic way. That is, if an operation fails mid-reload then the bot will roll back to the prior working state.

PARAMETERS:
name (str) – The extension name to reload. It must be dot separated like regular Python imports if accessing a submodule. e.g. foo.test if you want to import foo/test.py.

package (Optional[str]) –

The package name to resolve relative imports with. This is required when reloading an extension using a relative path, e.g .foo.test. Defaults to None.

New in version 1.7.

RAISES:
ExtensionNotLoaded – The extension was not loaded.

ExtensionNotFound – The extension could not be imported. This is also raised if the name of the extension could not be resolved using the provided package parameter.

NoEntryPointError – The extension does not have a setup function.

ExtensionFailed – The extension setup function had an execution error.

RETURN TYPE:
None

remove_application_command(command)
Remove a ApplicationCommand from the internal list of commands.

New in version 2.0.

PARAMETERS:
command (ApplicationCommand) – The command to remove.

RETURNS:
The command that was removed. If the name is not valid then None is returned instead.

RETURN TYPE:
Optional[ApplicationCommand]

remove_check(func, *, call_once=False)
Removes a global check from the bot. This function is idempotent and will not raise an exception if the function is not in the global checks.

PARAMETERS:
func – The function to remove from the global checks.

call_once (bool) – If the function was added with call_once=True in the Bot.add_check() call or using check_once().

RETURN TYPE:
None

remove_cog(name)
Removes a cog from the bot and returns it.

All registered commands and event listeners that the cog has registered will be removed as well.

If no cog is found then this method has no effect.

PARAMETERS:
name (str) – The name of the cog to remove.

RETURNS:
The cog that was removed. None if not found.

RETURN TYPE:
Optional[Cog]

remove_listener(func, name=...)
Removes a listener from the pool of listeners.

PARAMETERS:
func (Callable[..., Coroutine[Any, Any, Any]]) – The function that was used as a listener to remove.

name (str) – The name of the event we want to remove. Defaults to func.__name__.

RETURN TYPE:
None

run(*args, **kwargs)
A blocking call that abstracts away the event loop initialisation from you.

If you want more control over the event loop then this function should not be used. Use start() coroutine or connect() + login().

Roughly Equivalent to:

try:
    loop.run_until_complete(start(*args, **kwargs))
except KeyboardInterrupt:
    loop.run_until_complete(close())
    # cancel all tasks lingering
finally:
    loop.close()
Warning

This function must be the last function to call due to the fact that it is blocking. That means that registration of events or anything being called after this function call will not execute until it returns.

PARAMETERS:
args (Any) –

kwargs (Any) –

RETURN TYPE:
None

slash_group(name=None, description=None, guild_ids=None)
A shortcut decorator that initializes the provided subclass of SlashCommandGroup and adds it to the internal command list via add_application_command().

New in version 2.0.

PARAMETERS:
name (Optional[str]) – The name of the group to create. This will resolve to the name of the decorated class if None is passed.

description (Optional[str]) – The description of the group to create.

guild_ids (Optional[List[int]]) – A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if None is passed.

RETURNS:
The slash command group that was created.

RETURN TYPE:
Callable[[Type[SlashCommandGroup]], SlashCommandGroup]

await start(token, *, reconnect=True)
This function is a coroutine.

A shorthand coroutine for login() + connect().

RAISES:
TypeError – An unexpected keyword argument was received.

PARAMETERS:
token (str) –

reconnect (bool) –

RETURN TYPE:
None

property status
The status being used upon logging on to Discord.

RETURN TYPE:
Status

property stickers
The stickers that the connected client has.

New in version 2.0.

await sync_commands(commands=None, method='bulk', force=False, guild_ids=None, register_guild_commands=True, check_guilds=[], delete_existing=True)
This function is a coroutine.

Registers all commands that have been added through add_application_command(). This method cleans up all commands over the API and should sync them with the internal cache of commands. It attempts to register the commands in the most efficient way possible, unless force is set to True, in which case it will always register all commands.

By default, this coroutine is called inside the on_connect() event. If you choose to override the on_connect() event, then you should invoke this coroutine as well such as the follwing:

@bot.event
async def on_connect():
    if bot.auto_sync_commands:
        await bot.sync_commands()
    print(f"{bot.user.name} connected.")
Note

If you remove all guild commands from a particular guild, the library may not be able to detect and update the commands accordingly, as it would have to individually check for each guild. To force the library to unregister a guild’s commands, call this function with commands=[] and guild_ids=[guild_id].

New in version 2.0.

PARAMETERS:
commands (Optional[List[ApplicationCommand]]) – A list of commands to register. If this is not set (None), then all commands will be registered.

method (Literal['individual', 'bulk', 'auto']) – The method to use when registering the commands. If this is set to “individual”, then each command will be registered individually. If this is set to “bulk”, then all commands will be registered in bulk. If this is set to “auto”, then the method will be determined automatically. Defaults to “bulk”.

force (bool) – Registers the commands regardless of the state of the command on Discord. This uses one less API call, but can result in hitting rate limits more often. Defaults to False.

guild_ids (Optional[List[int]]) – A list of guild ids to register the commands for. If this is not set, the commands’ guild_ids attribute will be used.

register_guild_commands (bool) – Whether to register guild commands. Defaults to True.

check_guilds (Optional[List[int]]) – A list of guilds ids to check for commands to unregister, since the bot would otherwise have to check all guilds. Unlike guild_ids, this does not alter the commands’ guild_ids attribute, instead it adds the guild ids to a list of guilds to sync commands for. If register_guild_commands is set to False, then this parameter is ignored.

delete_existing (bool) – Whether to delete existing commands that are not in the list of commands to register. Defaults to True.

unload_extension(name, *, package=None)
Unloads an extension.

When the extension is unloaded, all commands, listeners, and cogs are removed from the bot and the module is un-imported.

The extension can provide an optional global function, teardown, to do miscellaneous clean-up if necessary. This function takes a single parameter, the bot, similar to setup from load_extension().

PARAMETERS:
name (str) – The extension name to unload. It must be dot separated like regular Python imports if accessing a submodule. e.g. foo.test if you want to import foo/test.py.

package (Optional[str]) –

The package name to resolve relative imports with. This is required when unloading an extension using a relative path, e.g .foo.test. Defaults to None.

New in version 1.7.

RAISES:
ExtensionNotFound – The name of the extension could not be resolved using the provided package parameter.

ExtensionNotLoaded – The extension was not loaded.

RETURN TYPE:
None

property user
Represents the connected client. None if not logged in.

RETURN TYPE:
ClientUser | None

property users
Returns a list of all the users the bot can see.

property voice_clients
Represents a list of voice connections.

These are usually VoiceClient instances.

wait_for(event, *, check=None, timeout=None)
This function is a coroutine.

Waits for a WebSocket event to be dispatched.

This could be used to wait for a user to reply to a message, or to react to a message, or to edit a message in a self-contained way.

The timeout parameter is passed onto asyncio.wait_for(). By default, it does not timeout. Note that this does propagate the asyncio.TimeoutError for you in case of timeout and is provided for ease of use.

In case the event returns multiple arguments, a tuple containing those arguments is returned instead. Please check the documentation for a list of events and their parameters.

This function returns the first event that meets the requirements.

PARAMETERS:
event (str) – The event name, similar to the event reference, but without the on_ prefix, to wait for.

check (Optional[Callable[…, bool]]) – A predicate to check what to wait for. The arguments must meet the parameters of the event being waited for.

timeout (Optional[float]) – The number of seconds to wait before timing out and raising asyncio.TimeoutError.

RETURNS:
Returns no arguments, a single argument, or a tuple of multiple arguments that mirrors the parameters passed in the event reference.

RETURN TYPE:
Any

RAISES:
asyncio.TimeoutError – Raised if a timeout is provided and reached.

EXAMPLES

Waiting for a user reply:

@client.event
async def on_message(message):
    if message.content.startswith('$greet'):
        channel = message.channel
        await channel.send('Say hello!')

        def check(m):
            return m.content == 'hello' and m.channel == channel

        msg = await client.wait_for('message', check=check)
        await channel.send(f'Hello {msg.author}!')
Waiting for a thumbs up reaction from the message author:

@client.event
async def on_message(message):
    if message.content.startswith('$thumb'):
        channel = message.channel
        await channel.send('Send me that 👍 reaction, mate')

        def check(reaction, user):
            return user == message.author and str(reaction.emoji) == '👍'

        try:
            reaction, user = await client.wait_for('reaction_add', timeout=60.0, check=check)
        except asyncio.TimeoutError:
            await channel.send('👎')
        else:
            await channel.send('👍')
await wait_until_ready()
This function is a coroutine.

Waits until the client’s internal cache is all ready.

RETURN TYPE:
None

for ... in walk_application_commands()
An iterator that recursively walks through all application commands and subcommands.

YIELDS:
ApplicationCommand – An application command from the internal list of application commands.

RETURN TYPE:
Generator[ApplicationCommand, None, None]

class discord.AutoShardedBot(description=None, *args, **options)[source]
This is similar to Bot except that it is inherited from discord.AutoShardedClient instead.

New in version 2.0.

Clients
class discord.Client(*, loop=None, **options)[source]
Attributes
activity
allowed_mentions
application_flags
application_id
cached_messages
emojis
guilds
intents
latency
loop
persistent_views
private_channels
status
stickers
user
users
voice_clients
ws
Methods
add_view
application_info
before_identify_hook
change_presence
clear
close
connect
create_dm
create_guild
delete_invite
event
fetch_application
fetch_channel
fetch_guild
fetch_guilds
fetch_invite
fetch_premium_sticker_packs
fetch_stage_instance
fetch_sticker
fetch_template
fetch_user
fetch_webhook
fetch_widget
get_all_channels
get_all_members
get_channel
get_emoji
get_guild
get_message
get_or_fetch_user
get_partial_messageable
get_stage_instance
get_sticker
get_user
is_closed
is_ready
is_ws_ratelimited
login
on_error
run
start
wait_for
wait_until_ready
Represents a client connection that connects to Discord. This class is used to interact with the Discord WebSocket and API.

A number of options can be passed to the Client.

PARAMETERS:
max_messages (Optional[int]) –

The maximum number of messages to store in the internal message cache. This defaults to 1000. Passing in None disables the message cache.

Changed in version 1.3: Allow disabling the message cache and change the default size to 1000.

loop (Optional[asyncio.AbstractEventLoop]) – The asyncio.AbstractEventLoop to use for asynchronous operations. Defaults to None, in which case the default event loop is used via asyncio.get_event_loop().

connector (Optional[aiohttp.BaseConnector]) – The connector to use for connection pooling.

proxy (Optional[str]) – Proxy URL.

proxy_auth (Optional[aiohttp.BasicAuth]) – An object that represents proxy HTTP Basic Authorization.

shard_id (Optional[int]) – Integer starting at 0 and less than shard_count.

shard_count (Optional[int]) – The total number of shards.

application_id (int) – The client’s application ID.

intents (Intents) –

The intents that you want to enable for the session. This is a way of disabling and enabling certain gateway events from triggering and being sent. If not given, defaults to a regularly constructed Intents class.

New in version 1.5.

member_cache_flags (MemberCacheFlags) –

Allows for finer control over how the library caches members. If not given, defaults to cache as much as possible with the currently selected intents.

New in version 1.5.

chunk_guilds_at_startup (bool) –

Indicates if on_ready() should be delayed to chunk all guilds at start-up if necessary. This operation is incredibly slow for large amounts of guilds. The default is True if Intents.members is True.

New in version 1.5.

status (Optional[Status]) – A status to start your presence with upon logging on to Discord.

activity (Optional[BaseActivity]) – An activity to start your presence with upon logging on to Discord.

allowed_mentions (Optional[AllowedMentions]) –

Control how the client handles mentions by default on every message sent.

New in version 1.4.

heartbeat_timeout (float) – The maximum numbers of seconds before timing out and restarting the WebSocket in the case of not receiving a HEARTBEAT_ACK. Useful if processing the initial packets take too long to the point of disconnecting you. The default timeout is 60 seconds.

guild_ready_timeout (float) –

The maximum number of seconds to wait for the GUILD_CREATE stream to end before preparing the member cache and firing READY. The default timeout is 2 seconds.

New in version 1.4.

assume_unsync_clock (bool) –

Whether to assume the system clock is unsynced. This applies to the ratelimit handling code. If this is set to True, the default, then the library uses the time to reset a rate limit bucket given by Discord. If this is False then your system clock is used to calculate how long to sleep for. If this is set to False it is recommended to sync your system clock to Google’s NTP server.

New in version 1.3.

enable_debug_events (bool) –

Whether to enable events that are useful only for debugging gateway related information.

Right now this involves on_socket_raw_receive() and on_socket_raw_send(). If this is False then those events will not be dispatched (due to performance considerations). To enable these events, this must be set to True. Defaults to False.

New in version 2.0.

ws
The WebSocket gateway the client is currently connected to. Could be None.

loop
The event loop that the client uses for asynchronous operations.

TYPE:
asyncio.AbstractEventLoop

PARAMETERS:
options (Any) –

@event(coro)[source]
A decorator that registers an event to listen to.

You can find more info about the events on the documentation below.

The events must be a coroutine, if not, TypeError is raised.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

EXAMPLE

@client.event
async def on_ready():
    print('Ready!')
PARAMETERS:
coro (TypeVar(Coro, bound= Callable[..., Coroutine[Any, Any, Any]])) –

RETURN TYPE:
TypeVar(Coro, bound= Callable[..., Coroutine[Any, Any, Any]])

async for ... in fetch_guilds(*, limit=100, before=None, after=None)[source]
Retrieves an AsyncIterator that enables receiving your guilds.

Note

Using this, you will only receive Guild.owner, Guild.icon, Guild.id, and Guild.name per Guild.

Note

This method is an API call. For general usage, consider guilds instead.

PARAMETERS:
limit (Optional[int]) – The number of guilds to retrieve. If None, it retrieves every guild you have access to. Note, however, that this would make it a slow operation. Defaults to 100.

before (Union[abc.Snowflake, datetime.datetime]) – Retrieves guilds before this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Union[abc.Snowflake, datetime.datetime]) – Retrieve guilds after this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

YIELDS:
Guild – The guild with the guild data parsed.

RAISES:
HTTPException – Getting the guilds failed.

EXAMPLES

Usage

async for guild in client.fetch_guilds(limit=150):
    print(guild.name)
Flattening into a list

guilds = await client.fetch_guilds(limit=150).flatten()
# guilds is now a list of Guild...
All parameters are optional.

RETURN TYPE:
GuildIterator

property latency
Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This could be referred to as the Discord WebSocket protocol latency.

RETURN TYPE:
float

is_ws_ratelimited()[source]
Whether the WebSocket is currently rate limited.

This can be useful to know when deciding whether you should query members using HTTP or via the gateway.

New in version 1.6.

RETURN TYPE:
bool

property user
Represents the connected client. None if not logged in.

RETURN TYPE:
ClientUser | None

property guilds
The guilds that the connected client is a member of.

property emojis
The emojis that the connected client has.

property stickers
The stickers that the connected client has.

New in version 2.0.

property cached_messages
Read-only list of messages the connected client has cached.

New in version 1.1.

RETURN TYPE:
Sequence[Message]

property private_channels
The private channels that the connected client is participating on.

Note

This returns only up to 128 most recent private channels due to an internal working on how Discord deals with private channels.

property voice_clients
Represents a list of voice connections.

These are usually VoiceClient instances.

property application_id
The client’s application ID.

If this is not passed via __init__ then this is retrieved through the gateway when an event contains the data. Usually after on_connect() is called.

New in version 2.0.

RETURN TYPE:
int | None

property application_flags
The client’s application flags.

New in version 2.0.

RETURN TYPE:
ApplicationFlags

is_ready()[source]
Specifies if the client’s internal cache is ready for use.

RETURN TYPE:
bool

await on_error(event_method, *args, **kwargs)[source]
This function is a coroutine.

The default error handler provided by the client.

By default, this prints to sys.stderr however it could be overridden to have a different implementation. Check on_error() for more details.

PARAMETERS:
event_method (str) –

args (Any) –

kwargs (Any) –

RETURN TYPE:
None

await before_identify_hook(shard_id, *, initial=False)[source]
This function is a coroutine.

A hook that is called before IDENTIFYing a session. This is useful if you wish to have more control over the synchronization of multiple IDENTIFYing clients.

The default implementation sleeps for 5 seconds.

New in version 1.4.

PARAMETERS:
shard_id (int) – The shard ID that requested being IDENTIFY’d

initial (bool) – Whether this IDENTIFY is the first initial IDENTIFY.

RETURN TYPE:
None

await login(token)[source]
This function is a coroutine.

Logs in the client with the specified credentials.

PARAMETERS:
token (str) – The authentication token. Do not prefix this token with anything as the library will do it for you.

RAISES:
TypeError – The token was in invalid type.

LoginFailure – The wrong credentials are passed.

HTTPException – An unknown HTTP related error occurred, usually when it isn’t 200 or the known incorrect credentials passing status code.

RETURN TYPE:
None

await connect(*, reconnect=True)[source]
This function is a coroutine.

Creates a WebSocket connection and lets the WebSocket listen to messages from Discord. This is a loop that runs the entire event system and miscellaneous aspects of the library. Control is not resumed until the WebSocket connection is terminated.

PARAMETERS:
reconnect (bool) – If we should attempt reconnecting, either due to internet failure or a specific failure on Discord’s part. Certain disconnects that lead to bad state will not be handled (such as invalid sharding payloads or bad tokens).

RAISES:
GatewayNotFound – The gateway to connect to Discord is not found. Usually if this is thrown then there is a Discord API outage.

ConnectionClosed – The WebSocket connection has been terminated.

RETURN TYPE:
None

await close()[source]
This function is a coroutine.

Closes the connection to Discord.

RETURN TYPE:
None

clear()[source]
Clears the internal state of the bot.

After this, the bot can be considered “re-opened”, i.e. is_closed() and is_ready() both return False along with the bot’s internal cache cleared.

RETURN TYPE:
None

await start(token, *, reconnect=True)[source]
This function is a coroutine.

A shorthand coroutine for login() + connect().

RAISES:
TypeError – An unexpected keyword argument was received.

PARAMETERS:
token (str) –

reconnect (bool) –

RETURN TYPE:
None

run(*args, **kwargs)[source]
A blocking call that abstracts away the event loop initialisation from you.

If you want more control over the event loop then this function should not be used. Use start() coroutine or connect() + login().

Roughly Equivalent to:

try:
    loop.run_until_complete(start(*args, **kwargs))
except KeyboardInterrupt:
    loop.run_until_complete(close())
    # cancel all tasks lingering
finally:
    loop.close()
Warning

This function must be the last function to call due to the fact that it is blocking. That means that registration of events or anything being called after this function call will not execute until it returns.

PARAMETERS:
args (Any) –

kwargs (Any) –

RETURN TYPE:
None

is_closed()[source]
Indicates if the WebSocket connection is closed.

RETURN TYPE:
bool

property activity
The activity being used upon logging in.

RETURN TYPE:
Optional[BaseActivity]

property status
The status being used upon logging on to Discord.

RETURN TYPE:
Status

property allowed_mentions
The allowed mention configuration.

New in version 1.4.

RETURN TYPE:
AllowedMentions | None

property intents
The intents configured for this connection.

New in version 1.5.

RETURN TYPE:
Intents

property users
Returns a list of all the users the bot can see.

await fetch_application(application_id, /)[source]
This function is a coroutine. Retrieves a PartialAppInfo from an application ID.

PARAMETERS:
application_id (int) – The application ID to retrieve information from.

RETURNS:
The application information.

RETURN TYPE:
PartialAppInfo

RAISES:
NotFound – An application with this ID does not exist.

HTTPException – Retrieving the application failed.

get_channel(id, /)[source]
Returns a channel or thread with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The returned channel or None if not found.

RETURN TYPE:
Optional[Union[abc.GuildChannel, Thread, abc.PrivateChannel]]

get_message(id, /)[source]
Returns a message the given ID.

This is useful if you have a message_id but don’t want to do an API call to access the message.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The returned message or None if not found.

RETURN TYPE:
Optional[Message]

get_partial_messageable(id, *, type=None)[source]
Returns a partial messageable with the given channel ID.

This is useful if you have a channel_id but don’t want to do an API call to send messages to it.

New in version 2.0.

PARAMETERS:
id (int) – The channel ID to create a partial messageable for.

type (Optional[ChannelType]) – The underlying channel type for the partial messageable.

RETURNS:
The partial messageable

RETURN TYPE:
PartialMessageable

get_stage_instance(id, /)[source]
Returns a stage instance with the given stage channel ID.

New in version 2.0.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The stage instance or None if not found.

RETURN TYPE:
Optional[StageInstance]

get_guild(id, /)[source]
Returns a guild with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The guild or None if not found.

RETURN TYPE:
Optional[Guild]

get_user(id, /)[source]
Returns a user with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The user or None if not found.

RETURN TYPE:
Optional[User]

get_emoji(id, /)[source]
Returns an emoji with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The custom emoji or None if not found.

RETURN TYPE:
Optional[Emoji]

get_sticker(id, /)[source]
Returns a guild sticker with the given ID.

New in version 2.0.

Note

To retrieve standard stickers, use fetch_sticker(). or fetch_premium_sticker_packs().

RETURNS:
The sticker or None if not found.

RETURN TYPE:
Optional[GuildSticker]

PARAMETERS:
id (int) –

for ... in get_all_channels()[source]
A generator that retrieves every abc.GuildChannel the client can ‘access’.

This is equivalent to:

for guild in client.guilds:
    for channel in guild.channels:
        yield channel
Note

Just because you receive a abc.GuildChannel does not mean that you can communicate in said channel. abc.GuildChannel.permissions_for() should be used for that.

YIELDS:
abc.GuildChannel – A channel the client can ‘access’.

RETURN TYPE:
Generator[GuildChannel, None, None]

for ... in get_all_members()[source]
Returns a generator with every Member the client can see.

This is equivalent to:

for guild in client.guilds:
    for member in guild.members:
        yield member
YIELDS:
Member – A member the client can see.

RETURN TYPE:
Generator[Member, None, None]

await get_or_fetch_user(id, /)[source]
Looks up a user in the user cache or fetches if not found.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The user or None if not found.

RETURN TYPE:
Optional[User]

await wait_until_ready()[source]
This function is a coroutine.

Waits until the client’s internal cache is all ready.

RETURN TYPE:
None

wait_for(event, *, check=None, timeout=None)[source]
This function is a coroutine.

Waits for a WebSocket event to be dispatched.

This could be used to wait for a user to reply to a message, or to react to a message, or to edit a message in a self-contained way.

The timeout parameter is passed onto asyncio.wait_for(). By default, it does not timeout. Note that this does propagate the asyncio.TimeoutError for you in case of timeout and is provided for ease of use.

In case the event returns multiple arguments, a tuple containing those arguments is returned instead. Please check the documentation for a list of events and their parameters.

This function returns the first event that meets the requirements.

PARAMETERS:
event (str) – The event name, similar to the event reference, but without the on_ prefix, to wait for.

check (Optional[Callable[…, bool]]) – A predicate to check what to wait for. The arguments must meet the parameters of the event being waited for.

timeout (Optional[float]) – The number of seconds to wait before timing out and raising asyncio.TimeoutError.

RETURNS:
Returns no arguments, a single argument, or a tuple of multiple arguments that mirrors the parameters passed in the event reference.

RETURN TYPE:
Any

RAISES:
asyncio.TimeoutError – Raised if a timeout is provided and reached.

EXAMPLES

Waiting for a user reply:

@client.event
async def on_message(message):
    if message.content.startswith('$greet'):
        channel = message.channel
        await channel.send('Say hello!')

        def check(m):
            return m.content == 'hello' and m.channel == channel

        msg = await client.wait_for('message', check=check)
        await channel.send(f'Hello {msg.author}!')
Waiting for a thumbs up reaction from the message author:

@client.event
async def on_message(message):
    if message.content.startswith('$thumb'):
        channel = message.channel
        await channel.send('Send me that 👍 reaction, mate')

        def check(reaction, user):
            return user == message.author and str(reaction.emoji) == '👍'

        try:
            reaction, user = await client.wait_for('reaction_add', timeout=60.0, check=check)
        except asyncio.TimeoutError:
            await channel.send('👎')
        else:
            await channel.send('👍')
await change_presence(*, activity=None, status=None)[source]
This function is a coroutine.

Changes the client’s presence.

PARAMETERS:
activity (Optional[BaseActivity]) – The activity being done. None if no currently active activity is done.

status (Optional[Status]) – Indicates what status to change to. If None, then Status.online is used.

RAISES:
InvalidArgument – If the activity parameter is not the proper type.

EXAMPLE

game = discord.Game("with the API")
await client.change_presence(status=discord.Status.idle, activity=game)
Changed in version 2.0: Removed the afk keyword-only parameter.

await fetch_template(code)[source]
This function is a coroutine.

Gets a Template from a discord.new URL or code.

PARAMETERS:
code (Union[Template, str]) – The Discord Template Code or URL (must be a discord.new URL).

RETURNS:
The template from the URL/code.

RETURN TYPE:
Template

RAISES:
NotFound – The template is invalid.

HTTPException – Getting the template failed.

await fetch_guild(guild_id, /, *, with_counts=True)[source]
This function is a coroutine.

Retrieves a Guild from an ID.

Note

Using this, you will not receive Guild.channels, Guild.members, Member.activity and Member.voice per Member.

Note

This method is an API call. For general usage, consider get_guild() instead.

PARAMETERS:
guild_id (int) – The guild’s ID to fetch from.

with_counts (bool) –

Whether to include count information in the guild. This fills the Guild.approximate_member_count and Guild.approximate_presence_count fields.

New in version 2.0.

RETURNS:
The guild from the ID.

RETURN TYPE:
Guild

RAISES:
Forbidden – You do not have access to the guild.

HTTPException – Getting the guild failed.

await create_guild(*, name, icon=..., code=...)[source]
This function is a coroutine.

Creates a Guild.

Bot accounts in more than 10 guilds are not allowed to create guilds.

PARAMETERS:
name (str) – The name of the guild.

icon (Optional[bytes]) – The bytes-like object representing the icon. See ClientUser.edit() for more details on what is expected.

code (str) –

The code for a template to create the guild with.

New in version 1.4.

RETURNS:
The guild created. This is not the same guild that is added to cache.

RETURN TYPE:
Guild

RAISES:
HTTPException – Guild creation failed.

InvalidArgument – Invalid icon image format given. Must be PNG or JPG.

await fetch_stage_instance(channel_id, /)[source]
This function is a coroutine.

Gets a StageInstance for a stage channel id.

New in version 2.0.

PARAMETERS:
channel_id (int) – The stage channel ID.

RETURNS:
The stage instance from the stage channel ID.

RETURN TYPE:
StageInstance

RAISES:
NotFound – The stage instance or channel could not be found.

HTTPException – Getting the stage instance failed.

await fetch_invite(url, *, with_counts=True, with_expiration=True, event_id=None)[source]
This function is a coroutine.

Gets an Invite from a discord.gg URL or ID.

Note

If the invite is for a guild you have not joined, the guild and channel attributes of the returned Invite will be PartialInviteGuild and PartialInviteChannel respectively.

PARAMETERS:
url (Union[Invite, str]) – The Discord invite ID or URL (must be a discord.gg URL).

with_counts (bool) – Whether to include count information in the invite. This fills the Invite.approximate_member_count and Invite.approximate_presence_count fields.

with_expiration (bool) –

Whether to include the expiration date of the invite. This fills the Invite.expires_at field.

New in version 2.0.

event_id (Optional[int]) –

The ID of the scheduled event to be associated with the event.

See Invite.set_scheduled_event() for more info on event invite linking.

New in version 2.0.

RETURNS:
The invite from the URL/ID.

RETURN TYPE:
Invite

RAISES:
NotFound – The invite has expired or is invalid.

HTTPException – Getting the invite failed.

await delete_invite(invite)[source]
This function is a coroutine.

Revokes an Invite, URL, or ID to an invite.

You must have the manage_channels permission in the associated guild to do this.

PARAMETERS:
invite (Union[Invite, str]) – The invite to revoke.

RAISES:
Forbidden – You do not have permissions to revoke invites.

NotFound – The invite is invalid or expired.

HTTPException – Revoking the invite failed.

RETURN TYPE:
None

await fetch_widget(guild_id, /)[source]
This function is a coroutine.

Gets a Widget from a guild ID.

Note

The guild must have the widget enabled to get this information.

PARAMETERS:
guild_id (int) – The ID of the guild.

RETURNS:
The guild’s widget.

RETURN TYPE:
Widget

RAISES:
Forbidden – The widget for this guild is disabled.

HTTPException – Retrieving the widget failed.

await application_info()[source]
This function is a coroutine.

Retrieves the bot’s application information.

RETURNS:
The bot’s application information.

RETURN TYPE:
AppInfo

RAISES:
HTTPException – Retrieving the information failed somehow.

await fetch_user(user_id, /)[source]
This function is a coroutine.

Retrieves a User based on their ID. You do not have to share any guilds with the user to get this information, however many operations do require that you do.

Note

This method is an API call. If you have discord.Intents.members and member cache enabled, consider get_user() instead.

PARAMETERS:
user_id (int) – The user’s ID to fetch from.

RETURNS:
The user you requested.

RETURN TYPE:
User

RAISES:
NotFound – A user with this ID does not exist.

HTTPException – Fetching the user failed.

await fetch_channel(channel_id, /)[source]
This function is a coroutine.

Retrieves a abc.GuildChannel, abc.PrivateChannel, or Thread with the specified ID.

Note

This method is an API call. For general usage, consider get_channel() instead.

New in version 1.2.

RETURNS:
The channel from the ID.

RETURN TYPE:
Union[abc.GuildChannel, abc.PrivateChannel, Thread]

RAISES:
InvalidData – An unknown channel type was received from Discord.

HTTPException – Retrieving the channel failed.

NotFound – Invalid Channel ID.

Forbidden – You do not have permission to fetch this channel.

PARAMETERS:
channel_id (int) –

await fetch_webhook(webhook_id, /)[source]
This function is a coroutine.

Retrieves a Webhook with the specified ID.

RETURNS:
The webhook you requested.

RETURN TYPE:
Webhook

RAISES:
HTTPException – Retrieving the webhook failed.

NotFound – Invalid webhook ID.

Forbidden – You do not have permission to fetch this webhook.

PARAMETERS:
webhook_id (int) –

await fetch_sticker(sticker_id, /)[source]
This function is a coroutine.

Retrieves a Sticker with the specified ID.

New in version 2.0.

RETURNS:
The sticker you requested.

RETURN TYPE:
Union[StandardSticker, GuildSticker]

RAISES:
HTTPException – Retrieving the sticker failed.

NotFound – Invalid sticker ID.

PARAMETERS:
sticker_id (int) –

await fetch_premium_sticker_packs()[source]
This function is a coroutine.

Retrieves all available premium sticker packs.

New in version 2.0.

RETURNS:
All available premium sticker packs.

RETURN TYPE:
List[StickerPack]

RAISES:
HTTPException – Retrieving the sticker packs failed.

await create_dm(user)[source]
This function is a coroutine.

Creates a DMChannel with this user.

This should be rarely called, as this is done transparently for most people.

New in version 2.0.

PARAMETERS:
user (Snowflake) – The user to create a DM with.

RETURNS:
The channel that was created.

RETURN TYPE:
DMChannel

add_view(view, *, message_id=None)[source]
Registers a View for persistent listening.

This method should be used for when a view is comprised of components that last longer than the lifecycle of the program.

New in version 2.0.

PARAMETERS:
view (discord.ui.View) – The view to register for dispatching.

message_id (Optional[int]) – The message ID that the view is attached to. This is currently used to refresh the view’s state during message update events. If not given then message update events are not propagated for the view.

RAISES:
TypeError – A view was not passed.

ValueError – The view is not persistent. A persistent view has no timeout and all their components have an explicitly provided custom_id.

RETURN TYPE:
None

property persistent_views
A sequence of persistent views added to the client.

New in version 2.0.

RETURN TYPE:
Sequence[View]

class discord.AutoShardedClient(*args, loop=None, **kwargs)[source]
Attributes
latencies
latency
shard_ids
shards
Methods
change_presence
close
connect
get_shard
is_ws_ratelimited
A client similar to Client except it handles the complications of sharding for the user into a more manageable and transparent single process bot.

When using this client, you will be able to use it as-if it was a regular Client with a single shard when implementation wise internally it is split up into multiple shards. This allows you to not have to deal with IPC or other complicated infrastructure.

It is recommended to use this client only if you have surpassed at least 1000 guilds.

If no shard_count is provided, then the library will use the Bot Gateway endpoint call to figure out how many shards to use.

If a shard_ids parameter is given, then those shard IDs will be used to launch the internal shards. Note that shard_count must be provided if this is used. By default, when omitted, the client will launch shards from 0 to shard_count - 1.

shard_ids
An optional list of shard_ids to launch the shards with.

TYPE:
Optional[List[int]]

PARAMETERS:
args (Any) –

loop (asyncio.AbstractEventLoop | None) –

kwargs (Any) –

property latency
Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This operates similarly to Client.latency() except it uses the average latency of every shard’s latency. To get a list of shard latency, check the latencies property. Returns nan if there are no shards ready.

RETURN TYPE:
float

property latencies
A list of latencies between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This returns a list of tuples with elements (shard_id, latency).

get_shard(shard_id)[source]
Gets the shard information at a given shard ID or None if not found.

PARAMETERS:
shard_id (int) –

RETURN TYPE:
ShardInfo | None

property shards
Returns a mapping of shard IDs to their respective info object.

await connect(*, reconnect=True)[source]
This function is a coroutine.

Creates a WebSocket connection and lets the WebSocket listen to messages from Discord. This is a loop that runs the entire event system and miscellaneous aspects of the library. Control is not resumed until the WebSocket connection is terminated.

PARAMETERS:
reconnect (bool) – If we should attempt reconnecting, either due to internet failure or a specific failure on Discord’s part. Certain disconnects that lead to bad state will not be handled (such as invalid sharding payloads or bad tokens).

RAISES:
GatewayNotFound – The gateway to connect to Discord is not found. Usually if this is thrown then there is a Discord API outage.

ConnectionClosed – The WebSocket connection has been terminated.

RETURN TYPE:
None

await close()[source]
This function is a coroutine.

Closes the connection to Discord.

RETURN TYPE:
None

await change_presence(*, activity=None, status=None, shard_id=None)[source]
This function is a coroutine.

Changes the client’s presence.

Example:

game = discord.Game("with the API")
await client.change_presence(status=discord.Status.idle, activity=game)
Changed in version 2.0: Removed the afk keyword-only parameter.

PARAMETERS:
activity (Optional[BaseActivity]) – The activity being done. None if no currently active activity is done.

status (Optional[Status]) – Indicates what status to change to. If None, then Status.online is used.

shard_id (Optional[int]) – The shard_id to change the presence to. If not specified or None, then it will change the presence of every shard the bot can see.

RAISES:
InvalidArgument – If the activity parameter is not of proper type.

RETURN TYPE:
None

is_ws_ratelimited()[source]
Whether the websocket is currently rate limited.

This can be useful to know when deciding whether you should query members using HTTP or via the gateway.

This implementation checks if any of the shards are rate limited. For more granular control, consider ShardInfo.is_ws_ratelimited().

New in version 1.6.

RETURN TYPE:
bool


Application Commands
Command Permission Decorators
@discord.commands.default_permissions(**perms)[source]
A decorator that limits the usage of a slash command to members with certain permissions.

The permissions passed in must be exactly like the properties shown under discord.Permissions.

Note

These permissions can be updated by server administrators per-guild. As such, these are only “defaults”, as the name suggests. If you want to make sure that a user always has the specified permissions regardless, you should use an internal check such as has_permissions().

PARAMETERS:
**perms (Dict[str, bool]) – An argument list of permissions to check for.

EXAMPLE

from discord import default_permissions

@bot.slash_command()
@default_permissions(manage_messages=True)
async def test(ctx):
    await ctx.respond('You can manage messages.')
RETURN TYPE:
Callable

@discord.commands.guild_only[source]
A decorator that limits the usage of a slash command to guild contexts. The command won’t be able to be used in private message channels.

EXAMPLE

from discord import guild_only

@bot.slash_command()
@guild_only()
async def test(ctx):
    await ctx.respond("You're in a guild.")
RETURN TYPE:
Callable

@discord.commands.is_nsfw[source]
A decorator that limits the usage of a slash command to 18+ channels and users. In guilds, the command will only be able to be used in channels marked as NSFW. In DMs, users must have opted into age-restricted commands via privacy settings.

Note that apps intending to be listed in the App Directory cannot have NSFW commands.

EXAMPLE

from discord import is_nsfw

@bot.slash_command()
@is_nsfw()
async def test(ctx):
    await ctx.respond("This command is age restricted.")
RETURN TYPE:
Callable

Commands
Shortcut Decorators
@discord.commands.application_command(cls=<class 'discord.commands.core.SlashCommand'>, **attrs)[source]
A decorator that transforms a function into an ApplicationCommand. More specifically, usually one of SlashCommand, UserCommand, or MessageCommand. The exact class depends on the cls parameter. By default, the description attribute is received automatically from the docstring of the function and is cleaned up with the use of inspect.cleandoc. If the docstring is bytes, then it is decoded into str using utf-8 encoding. The name attribute also defaults to the function name unchanged.

New in version 2.0.

PARAMETERS:
cls (ApplicationCommand) – The class to construct with. By default, this is SlashCommand. You usually do not change this.

attrs – Keyword arguments to pass into the construction of the class denoted by cls.

RETURNS:
A decorator that converts the provided method into an ApplicationCommand, or subclass of it.

RETURN TYPE:
Callable[…, ApplicationCommand]

RAISES:
TypeError – If the function is not a coroutine or is already a command.

@discord.commands.command(**kwargs)[source]
An alias for application_command().

Note

This decorator is overridden by ext.commands.command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into an ApplicationCommand.

RETURN TYPE:
Callable[…, ApplicationCommand]

@discord.commands.slash_command(**kwargs)[source]
Decorator for slash commands that invokes application_command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a SlashCommand.

RETURN TYPE:
Callable[…, SlashCommand]

@discord.commands.user_command(**kwargs)[source]
Decorator for user commands that invokes application_command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a UserCommand.

RETURN TYPE:
Callable[…, UserCommand]

@discord.commands.message_command(**kwargs)[source]
Decorator for message commands that invokes application_command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a MessageCommand.

RETURN TYPE:
Callable[…, MessageCommand]

Objects
class discord.ApplicationCommand(func, **kwargs)[source]
Attributes
full_parent_name
qualified_id
qualified_name
Methods
after_invoke
before_invoke
error
get_cooldown_retry_after
has_error_handler
is_on_cooldown
reset_cooldown
PARAMETERS:
func (Callable) –

is_on_cooldown(ctx)[source]
Checks whether the command is currently on cooldown.

Note

This uses the current time instead of the interaction time.

PARAMETERS:
ctx (ApplicationContext) – The invocation context to use when checking the command’s cooldown status.

RETURNS:
A boolean indicating if the command is on cooldown.

RETURN TYPE:
bool

reset_cooldown(ctx)[source]
Resets the cooldown on this command.

PARAMETERS:
ctx (ApplicationContext) – The invocation context to reset the cooldown under.

RETURN TYPE:
None

get_cooldown_retry_after(ctx)[source]
Retrieves the amount of seconds before this command can be tried again.

Note

This uses the current time instead of the interaction time.

PARAMETERS:
ctx (ApplicationContext) – The invocation context to retrieve the cooldown from.

RETURNS:
The amount of time left on this command’s cooldown in seconds. If this is 0.0 then the command isn’t on cooldown.

RETURN TYPE:
float

error(coro)[source]
A decorator that registers a coroutine as a local error handler.

A local error handler is an on_command_error() event limited to a single command. However, the on_command_error() is still invoked afterwards as the catch-all.

PARAMETERS:
coro (coroutine) – The coroutine to register as the local error handler.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

has_error_handler()[source]
Checks whether the command has an error handler registered.

RETURN TYPE:
bool

before_invoke(coro)[source]
A decorator that registers a coroutine as a pre-invoke hook. A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required.

This pre-invoke hook takes a sole parameter, a ApplicationContext. See Bot.before_invoke() for more info.

PARAMETERS:
coro (coroutine) – The coroutine to register as the pre-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

after_invoke(coro)[source]
A decorator that registers a coroutine as a post-invoke hook. A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required.

This post-invoke hook takes a sole parameter, a ApplicationContext. See Bot.after_invoke() for more info.

PARAMETERS:
coro (coroutine) – The coroutine to register as the post-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

property full_parent_name
Retrieves the fully qualified parent command name.

This the base command name required to execute it. For example, in /one two three the parent name would be one two.

RETURN TYPE:
str

property qualified_name
Retrieves the fully qualified command name.

This is the full parent name with the command name as well. For example, in /one two three the qualified name would be one two three.

RETURN TYPE:
str

property qualified_id
Retrieves the fully qualified command ID.

This is the root parent ID. For example, in /one two three the qualified ID would return one.id.

RETURN TYPE:
int

class discord.SlashCommand(func, *args, **kwargs)[source]
Attributes
callback
checks
cog
cooldown
default_member_permissions
description
description_localizations
guild_ids
guild_only
mention
name
name_localizations
nsfw
options
parent
Methods
copy
A class that implements the protocol for a slash command.

These are not created manually, instead they are created via the decorator or functional interface.

New in version 2.0.

name
The name of the command.

TYPE:
str

callback
The coroutine that is executed when the command is called.

TYPE:
coroutine

description
The description for the command.

TYPE:
Optional[str]

guild_ids
The ids of the guilds where this command will be registered.

TYPE:
Optional[List[int]]

options
The parameters for this command.

TYPE:
List[Option]

parent
The parent group that this command belongs to. None if there isn’t one.

TYPE:
Optional[SlashCommandGroup]

mention
Returns a string that allows you to mention the slash command.

TYPE:
str

guild_only
Whether the command should only be usable inside a guild.

TYPE:
bool

nsfw
Whether the command should be restricted to 18+ channels and users. Apps intending to be listed in the App Directory cannot have NSFW commands.

TYPE:
bool

default_member_permissions
The default permissions a member needs to be able to run the command.

TYPE:
Permissions

cog
The cog that this command belongs to. None if there isn’t one.

TYPE:
Optional[Cog]

checks
A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

TYPE:
List[Callable[[ApplicationContext], bool]]

cooldown
The cooldown applied when the command is invoked. None if the command doesn’t have a cooldown.

TYPE:
Optional[Cooldown]

name_localizations
The name localizations for this command. The values of this should be "locale": "name". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

description_localizations
The description localizations for this command. The values of this should be "locale": "description". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

PARAMETERS:
func (Callable) –

copy()[source]
Creates a copy of this command.

RETURNS:
A new instance of this command.

RETURN TYPE:
SlashCommand

class discord.SlashCommandGroup(name, description=None, guild_ids=None, parent=None, **kwargs)[source]
Attributes
checks
default_member_permissions
description
description_localizations
guild_ids
guild_only
name
name_localizations
nsfw
parent
Methods
copy
create_subgroup
subgroup
walk_commands
A class that implements the protocol for a slash command group.

These can be created manually, but they should be created via the decorator or functional interface.

name
The name of the command.

TYPE:
str

description
The description for the command.

TYPE:
Optional[str]

guild_ids
The ids of the guilds where this command will be registered.

TYPE:
Optional[List[int]]

parent
The parent group that this group belongs to. None if there isn’t one.

TYPE:
Optional[SlashCommandGroup]

guild_only
Whether the command should only be usable inside a guild.

TYPE:
bool

nsfw
Whether the command should be restricted to 18+ channels and users. Apps intending to be listed in the App Directory cannot have NSFW commands.

TYPE:
bool

default_member_permissions
The default permissions a member needs to be able to run the command.

TYPE:
Permissions

checks
A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

TYPE:
List[Callable[[ApplicationContext], bool]]

name_localizations
The name localizations for this command. The values of this should be "locale": "name". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

description_localizations
The description localizations for this command. The values of this should be "locale": "description". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

PARAMETERS:
name (str) –

description (str | None) –

guild_ids (list[int] | None) –

parent (SlashCommandGroup | None) –

create_subgroup(name, description=None, guild_ids=None, **kwargs)[source]
Creates a new subgroup for this SlashCommandGroup.

PARAMETERS:
name (str) – The name of the group to create.

description (Optional[str]) – The description of the group to create.

guild_ids (Optional[List[int]]) – A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if None is passed.

guild_only (bool) – Whether the command should only be usable inside a guild.

nsfw (bool) – Whether the command should be restricted to 18+ channels and users. Apps intending to be listed in the App Directory cannot have NSFW commands.

default_member_permissions (Permissions) – The default permissions a member needs to be able to run the command.

checks (List[Callable[[ApplicationContext], bool]]) – A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

name_localizations (Optional[Dict[str, str]]) –

The name localizations for this command. The values of this should be "locale": "name". See here for a list of valid locales.

description_localizations (Optional[Dict[str, str]]) –

The description localizations for this command. The values of this should be "locale": "description". See here for a list of valid locales.

RETURNS:
The slash command group that was created.

RETURN TYPE:
SlashCommandGroup

subgroup(name=None, description=None, guild_ids=None)[source]
A shortcut decorator that initializes the provided subclass of SlashCommandGroup as a subgroup.

New in version 2.0.

PARAMETERS:
name (Optional[str]) – The name of the group to create. This will resolve to the name of the decorated class if None is passed.

description (Optional[str]) – The description of the group to create.

guild_ids (Optional[List[int]]) – A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if None is passed.

RETURNS:
The slash command group that was created.

RETURN TYPE:
Callable[[Type[SlashCommandGroup]], SlashCommandGroup]

for ... in walk_commands()[source]
An iterator that recursively walks through all slash commands in this group.

YIELDS:
SlashCommand – A slash command from the group.

RETURN TYPE:
Generator[SlashCommand, None, None]

copy()[source]
Creates a copy of this command group.

RETURNS:
A new instance of this command group.

RETURN TYPE:
SlashCommandGroup

class discord.UserCommand(func, *args, **kwargs)[source]
Attributes
callback
checks
cog
guild_ids
name
Methods
copy
A class that implements the protocol for user context menu commands.

These are not created manually, instead they are created via the decorator or functional interface.

name
The name of the command.

TYPE:
str

callback
The coroutine that is executed when the command is called.

TYPE:
coroutine

guild_ids
The ids of the guilds where this command will be registered.

TYPE:
Optional[List[int]]

cog
The cog that this command belongs to. None if there isn’t one.

TYPE:
Optional[Cog]

checks
A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

TYPE:
List[Callable[[ApplicationContext], bool]]

PARAMETERS:
func (Callable) –

copy()[source]
Creates a copy of this command.

RETURNS:
A new instance of this command.

RETURN TYPE:
UserCommand

class discord.MessageCommand(func, *args, **kwargs)[source]
Attributes
callback
checks
cog
guild_ids
name
Methods
copy
A class that implements the protocol for message context menu commands.

These are not created manually, instead they are created via the decorator or functional interface.

name
The name of the command.

TYPE:
str

callback
The coroutine that is executed when the command is called.

TYPE:
coroutine

guild_ids
The ids of the guilds where this command will be registered.

TYPE:
Optional[List[int]]

cog
The cog that this command belongs to. None if there isn’t one.

TYPE:
Optional[Cog]

checks
A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

TYPE:
List[Callable[[ApplicationContext], bool]]

PARAMETERS:
func (Callable) –

copy()[source]
Creates a copy of this command.

RETURNS:
A new instance of this command.

RETURN TYPE:
MessageCommand

Options
Shortcut Decorators
@discord.commands.option(name, type=None, **kwargs)[source]
A decorator that can be used instead of typehinting Option.

New in version 2.0.

Objects
class discord.Option(input_type=<class 'str'>, /, description=None, **kwargs)[source]
Attributes
autocomplete
choices
default
description
description_localizations
input_type
max_length
max_value
min_length
min_value
name
name_localizations
required
Represents a selectable option for a slash command.

input_type
The type of input that is expected for this option. This can be a SlashCommandOptionType, an associated class, a channel type, a Converter, a converter class or an enum.Enum.

TYPE:
Union[Type[str], Type[bool], Type[int], Type[float], Type[abc.GuildChannel], Type[Thread], Type[Member], Type[User], Type[Attachment], Type[Role], Type[abc.Mentionable], SlashCommandOptionType, Type[ext.commands.Converter], Type[enums.Enum], Type[Enum]]

name
The name of this option visible in the UI. Inherits from the variable name if not provided as a parameter.

TYPE:
str

description
The description of this option. Must be 100 characters or fewer.

TYPE:
Optional[str]

choices
The list of available choices for this option. Can be a list of values or OptionChoice objects (which represent a name:value pair). If provided, the input from the user must match one of the choices in the list.

TYPE:
Optional[List[Union[Any, OptionChoice]]]

required
Whether this option is required.

TYPE:
Optional[bool]

default
The default value for this option. If provided, required will be considered False.

TYPE:
Optional[Any]

min_value
The minimum value that can be entered. Only applies to Options with an input_type of int or float.

TYPE:
Optional[int]

max_value
The maximum value that can be entered. Only applies to Options with an input_type of int or float.

TYPE:
Optional[int]

min_length
The minimum length of the string that can be entered. Must be between 0 and 6000 (inclusive). Only applies to Options with an input_type of str.

TYPE:
Optional[int]

max_length
The maximum length of the string that can be entered. Must be between 1 and 6000 (inclusive). Only applies to Options with an input_type of str.

TYPE:
Optional[int]

autocomplete
The autocomplete handler for the option. Accepts an iterable of str, a callable (sync or async) that takes a single argument of AutocompleteContext, or a coroutine. Must resolve to an iterable of str.

Note

Does not validate the input value against the autocomplete results.

TYPE:
Optional[Any]

name_localizations
The name localizations for this option. The values of this should be "locale": "name". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

description_localizations
The description localizations for this option. The values of this should be "locale": "description". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

EXAMPLES

Basic usage:

@bot.slash_command(guild_ids=[...])
async def hello(
    ctx: discord.ApplicationContext,
    name: Option(str, "Enter your name"),
    age: Option(int, "Enter your age", min_value=1, max_value=99, default=18)
    # passing the default value makes an argument optional
    # you also can create optional argument using:
    # age: Option(int, "Enter your age") = 18
):
    await ctx.respond(f"Hello! Your name is {name} and you are {age} years old.")
New in version 2.0.

PARAMETERS:
description (str | None) –

input_type (InputType) –

class discord.ThreadOption(thread_type)[source]
Represents a class that can be passed as the input_type for an Option class.

New in version 2.0.

PARAMETERS:
thread_type (Literal["public", "private", "news"]) – The thread type to expect for this options input.

class discord.OptionChoice(name, value=None, name_localizations=None)[source]
Attributes
name
name_localizations
value
Represents a name:value pairing for a selected Option.

New in version 2.0.

name
The name of the choice. Shown in the UI when selecting an option.

TYPE:
str

value
The value of the choice. If not provided, will use the value of name.

TYPE:
Optional[Union[str, int, float]]

name_localizations
The name localizations for this choice. The values of this should be "locale": "name". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

PARAMETERS:
name (str) –

value (str | int | float | None) –

name_localizations (dict[str, str] | None) –

Context Objects
class discord.ApplicationContext(bot, interaction)[source]
Attributes
author
bot
channel
channel_id
cog
command
followup
guild
guild_id
guild_locale
interaction
locale
me
message
response
selected_options
unselected_options
user
voice_client
Methods
defer
delete
edit
invoke
respond
send_followup
send_modal
send_response
Represents a Discord application command interaction context.

This class is not created manually and is instead passed to application commands as the first parameter.

New in version 2.0.

bot
The bot that the command belongs to.

TYPE:
Bot

interaction
The interaction object that invoked the command.

TYPE:
Interaction

command
The command that this context belongs to.

TYPE:
ApplicationCommand

PARAMETERS:
bot (Bot) –

interaction (Interaction) –

await invoke(command, /, *args, **kwargs)[source]
This function is a coroutine.

Calls a command with the arguments given. This is useful if you want to just call the callback that a ApplicationCommand holds internally.

Note

This does not handle converters, checks, cooldowns, pre-invoke, or after-invoke hooks in any matter. It calls the internal callback directly as-if it was a regular function. You must take care in passing the proper arguments when using this function.

PARAMETERS:
command (ApplicationCommand) – The command that is going to be called.

*args – The arguments to use.

**kwargs – The keyword arguments to use.

RAISES:
TypeError – The command argument to invoke is missing.

channel
Union[abc.GuildChannel, PartialMessageable, Thread]: Returns the channel associated with this context’s command. Shorthand for Interaction.channel.

channel_id
Returns the ID of the channel associated with this context’s command. Shorthand for Interaction.channel_id.

guild
Returns the guild associated with this context’s command. Shorthand for Interaction.guild.

guild_id
Returns the ID of the guild associated with this context’s command. Shorthand for Interaction.guild_id.

locale
Returns the locale of the guild associated with this context’s command. Shorthand for Interaction.locale.

guild_locale
Returns the locale of the guild associated with this context’s command. Shorthand for Interaction.guild_locale.

me
Union[Member, ClientUser]: Similar to Guild.me except it may return the ClientUser in private message message contexts, or when Intents.guilds() is absent.

message
Returns the message sent with this context’s command. Shorthand for Interaction.message, if applicable.

user
Returns the user that sent this context’s command. Shorthand for Interaction.user.

author
Returns the user that sent this context’s command. Shorthand for Interaction.user.

property voice_client
Returns the voice client associated with this context’s command. Shorthand for Interaction.guild.voice_client, if applicable.

RETURN TYPE:
VoiceProtocol | None

response
Returns the response object associated with this context’s command. Shorthand for Interaction.response.

property selected_options
The options and values that were selected by the user when sending the command.

RETURNS:
A dictionary containing the options and values that were selected by the user when the command was processed, if applicable. Returns None if the command has not yet been invoked, or if there are no options defined for that command.

RETURN TYPE:
Optional[List[Dict[str, Any]]]

property unselected_options
The options that were not provided by the user when sending the command.

RETURNS:
A list of Option objects (if any) that were not selected by the user when the command was processed. Returns None if there are no options defined for that command.

RETURN TYPE:
Optional[List[Option]]

property send_modal
This function is a coroutine. Responds to this interaction by sending a modal dialog. This cannot be used to respond to another modal dialog submission.

PARAMETERS:
modal (discord.ui.Modal) – The modal dialog to display to the user.

RAISES:
HTTPException – Sending the modal failed.

InteractionResponded – This interaction has already been responded to before.

RETURN TYPE:
Callable[…, Awaitable[Interaction]]

await respond(*args, **kwargs)[source]
This function is a coroutine.

Sends either a response or a message using the followup webhook determined by whether the interaction has been responded to or not.

RETURNS:
The response, its type depending on whether it’s an interaction response or a followup.

RETURN TYPE:
Union[discord.Interaction, discord.WebhookMessage]

property send_response
This function is a coroutine.

Responds to this interaction by sending a message.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

embeds (List[Embed]) – A list of embeds to send with the content. Maximum of 10. This cannot be mixed with the embed parameter.

embed (Embed) – The rich embed for the content to send. This cannot be mixed with embeds parameter.

tts (bool) – Indicates if the message should be sent using text-to-speech.

view (discord.ui.View) – The view to send with the message.

ephemeral (bool) – Indicates if the message should only be visible to the user who started the interaction. If a view is sent with an ephemeral message, and it has no timeout set then the timeout is set to 15 minutes.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

RETURNS:
The interaction object associated with the sent message.

RETURN TYPE:
Interaction

RAISES:
HTTPException – Sending the message failed.

TypeError – You specified both embed and embeds.

ValueError – The length of embeds was invalid.

InteractionResponded – This interaction has already been responded to before.

property send_followup
This function is a coroutine.

Sends a message using the webhook.

The content must be a type that can convert to a string through str(content).

To upload a single file, the file parameter should be used with a single File object.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type. You cannot mix the embed parameter with the embeds parameter, which must be a list of Embed objects to send.

PARAMETERS:
content (str) – The content of the message to send.

wait (bool) – Whether the server should wait before sending a response. This essentially means that the return type of this function changes from None to a WebhookMessage if set to True. If the type of webhook is WebhookType.application then this is always set to True.

username (str) – The username to send with this message. If no username is provided then the default username for the webhook is used.

avatar_url (str) – The avatar URL to send with this message. If no avatar URL is provided then the default avatar for the webhook is used. If this is not a string then it is explicitly cast using str.

tts (bool) – Indicates if the message should be sent using text-to-speech.

ephemeral (bool) –

Indicates if the message should only be visible to the user. This is only available to WebhookType.application webhooks. If a view is sent with an ephemeral message, and it has no timeout set then the timeout is set to 15 minutes.

New in version 2.0.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

embed (Embed) – The rich embed for the content to send. This cannot be mixed with embeds parameter.

embeds (List[Embed]) – A list of embeds to send with the content. Maximum of 10. This cannot be mixed with the embed parameter.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message.

New in version 1.4.

view (discord.ui.View) –

The view to send with the message. You can only send a view if this webhook is not partial and has state attached. A webhook has state attached if the webhook is managed by the library.

New in version 2.0.

thread (Snowflake) –

The thread to send this webhook to.

New in version 2.0.

thread_name (str) –

The name of the thread to create. Only works for forum channels.

New in version 2.0.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent.

RETURNS:
If wait is True then the message that was sent, otherwise None.

RETURN TYPE:
Optional[WebhookMessage]

RAISES:
HTTPException – Sending the message failed.

NotFound – This webhook was not found.

Forbidden – The authorization token for the webhook is incorrect.

TypeError – You specified both embed and embeds or file and files.

ValueError – The length of embeds was invalid.

InvalidArgument – Either there was no token associated with this webhook, ephemeral was passed with the improper webhook type, there was no state attached with this webhook when giving it a view, or you specified both thread_name and thread.

property defer
This function is a coroutine.

Defers the interaction response.

This is typically used when the interaction is acknowledged and a secondary action will be done later.

This can only be used with the following interaction types:

InteractionType.application_command

InteractionType.component

InteractionType.modal_submit

PARAMETERS:
ephemeral (bool) – Indicates whether the deferred message will eventually be ephemeral. This only applies to InteractionType.application_command interactions, or if invisible is False.

invisible (bool) – Indicates whether the deferred type should be ‘invisible’ (InteractionResponseType.deferred_message_update) instead of ‘thinking’ (InteractionResponseType.deferred_channel_message). In the Discord UI, this is represented as the bot thinking of a response. You must eventually send a followup message via Interaction.followup to make this thinking state go away. This parameter does not apply to interactions of type InteractionType.application_command.

RAISES:
HTTPException – Deferring the interaction failed.

InteractionResponded – This interaction has already been responded to before.

RETURN TYPE:
Callable[…, Awaitable[None]]

property followup
Returns the followup webhook for followup interactions.

RETURN TYPE:
Webhook

await delete(*, delay=None)[source]
This function is a coroutine.

Deletes the original interaction response message.

This is a higher level interface to Interaction.delete_original_response().

PARAMETERS:
delay (Optional[float]) – If provided, the number of seconds to wait before deleting the message.

RAISES:
HTTPException – Deleting the message failed.

Forbidden – You do not have proper permissions to delete the message.

RETURN TYPE:
None

property edit
This function is a coroutine.

Edits the original interaction response message.

This is a lower level interface to InteractionMessage.edit() in case you do not want to fetch the message and save an HTTP request.

This method is also the only way to edit the original message if the message sent was ephemeral.

PARAMETERS:
content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

attachments (List[Attachment]) – A list of attachments to keep in the message. If [] is passed then all attachments are removed.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

view (Optional[View]) – The updated view to update this message with. If None is passed then the view is removed.

delete_after (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message we just edited. If the deletion fails, then it is silently ignored.

RETURNS:
The newly edited message.

RETURN TYPE:
InteractionMessage

RAISES:
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid.

property cog
Returns the cog associated with this context’s command. None if it does not exist.

RETURN TYPE:
Cog | None

class discord.AutocompleteContext(bot, interaction)[source]
Attributes
bot
cog
command
focused
interaction
options
value
Represents context for a slash command’s option autocomplete.

This class is not created manually and is instead passed to an Option’s autocomplete callback.

New in version 2.0.

bot
The bot that the command belongs to.

TYPE:
Bot

interaction
The interaction object that invoked the autocomplete.

TYPE:
Interaction

command
The command that this context belongs to.

TYPE:
ApplicationCommand

focused
The option the user is currently typing.

TYPE:
Option

value
The content of the focused option.

TYPE:
str

options
A name to value mapping of the options that the user has selected before this option.

TYPE:
Dict[str, Any]

PARAMETERS:
bot (Bot) –

interaction (Interaction) –

property cog
Returns the cog associated with this context’s command. None if it does not exist.

RETURN TYPE:
Cog | None


Application Commands
Command Permission Decorators
@discord.commands.default_permissions(**perms)[source]
A decorator that limits the usage of a slash command to members with certain permissions.

The permissions passed in must be exactly like the properties shown under discord.Permissions.

Note

These permissions can be updated by server administrators per-guild. As such, these are only “defaults”, as the name suggests. If you want to make sure that a user always has the specified permissions regardless, you should use an internal check such as has_permissions().

PARAMETERS:
**perms (Dict[str, bool]) – An argument list of permissions to check for.

EXAMPLE

from discord import default_permissions

@bot.slash_command()
@default_permissions(manage_messages=True)
async def test(ctx):
    await ctx.respond('You can manage messages.')
RETURN TYPE:
Callable

@discord.commands.guild_only[source]
A decorator that limits the usage of a slash command to guild contexts. The command won’t be able to be used in private message channels.

EXAMPLE

from discord import guild_only

@bot.slash_command()
@guild_only()
async def test(ctx):
    await ctx.respond("You're in a guild.")
RETURN TYPE:
Callable

@discord.commands.is_nsfw[source]
A decorator that limits the usage of a slash command to 18+ channels and users. In guilds, the command will only be able to be used in channels marked as NSFW. In DMs, users must have opted into age-restricted commands via privacy settings.

Note that apps intending to be listed in the App Directory cannot have NSFW commands.

EXAMPLE

from discord import is_nsfw

@bot.slash_command()
@is_nsfw()
async def test(ctx):
    await ctx.respond("This command is age restricted.")
RETURN TYPE:
Callable

Commands
Shortcut Decorators
@discord.commands.application_command(cls=<class 'discord.commands.core.SlashCommand'>, **attrs)[source]
A decorator that transforms a function into an ApplicationCommand. More specifically, usually one of SlashCommand, UserCommand, or MessageCommand. The exact class depends on the cls parameter. By default, the description attribute is received automatically from the docstring of the function and is cleaned up with the use of inspect.cleandoc. If the docstring is bytes, then it is decoded into str using utf-8 encoding. The name attribute also defaults to the function name unchanged.

New in version 2.0.

PARAMETERS:
cls (ApplicationCommand) – The class to construct with. By default, this is SlashCommand. You usually do not change this.

attrs – Keyword arguments to pass into the construction of the class denoted by cls.

RETURNS:
A decorator that converts the provided method into an ApplicationCommand, or subclass of it.

RETURN TYPE:
Callable[…, ApplicationCommand]

RAISES:
TypeError – If the function is not a coroutine or is already a command.

@discord.commands.command(**kwargs)[source]
An alias for application_command().

Note

This decorator is overridden by ext.commands.command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into an ApplicationCommand.

RETURN TYPE:
Callable[…, ApplicationCommand]

@discord.commands.slash_command(**kwargs)[source]
Decorator for slash commands that invokes application_command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a SlashCommand.

RETURN TYPE:
Callable[…, SlashCommand]

@discord.commands.user_command(**kwargs)[source]
Decorator for user commands that invokes application_command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a UserCommand.

RETURN TYPE:
Callable[…, UserCommand]

@discord.commands.message_command(**kwargs)[source]
Decorator for message commands that invokes application_command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a MessageCommand.

RETURN TYPE:
Callable[…, MessageCommand]

Objects
class discord.ApplicationCommand(func, **kwargs)[source]
Attributes
full_parent_name
qualified_id
qualified_name
Methods
after_invoke
before_invoke
error
get_cooldown_retry_after
has_error_handler
is_on_cooldown
reset_cooldown
PARAMETERS:
func (Callable) –

is_on_cooldown(ctx)[source]
Checks whether the command is currently on cooldown.

Note

This uses the current time instead of the interaction time.

PARAMETERS:
ctx (ApplicationContext) – The invocation context to use when checking the command’s cooldown status.

RETURNS:
A boolean indicating if the command is on cooldown.

RETURN TYPE:
bool

reset_cooldown(ctx)[source]
Resets the cooldown on this command.

PARAMETERS:
ctx (ApplicationContext) – The invocation context to reset the cooldown under.

RETURN TYPE:
None

get_cooldown_retry_after(ctx)[source]
Retrieves the amount of seconds before this command can be tried again.

Note

This uses the current time instead of the interaction time.

PARAMETERS:
ctx (ApplicationContext) – The invocation context to retrieve the cooldown from.

RETURNS:
The amount of time left on this command’s cooldown in seconds. If this is 0.0 then the command isn’t on cooldown.

RETURN TYPE:
float

error(coro)[source]
A decorator that registers a coroutine as a local error handler.

A local error handler is an on_command_error() event limited to a single command. However, the on_command_error() is still invoked afterwards as the catch-all.

PARAMETERS:
coro (coroutine) – The coroutine to register as the local error handler.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

has_error_handler()[source]
Checks whether the command has an error handler registered.

RETURN TYPE:
bool

before_invoke(coro)[source]
A decorator that registers a coroutine as a pre-invoke hook. A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required.

This pre-invoke hook takes a sole parameter, a ApplicationContext. See Bot.before_invoke() for more info.

PARAMETERS:
coro (coroutine) – The coroutine to register as the pre-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

after_invoke(coro)[source]
A decorator that registers a coroutine as a post-invoke hook. A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required.

This post-invoke hook takes a sole parameter, a ApplicationContext. See Bot.after_invoke() for more info.

PARAMETERS:
coro (coroutine) – The coroutine to register as the post-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

property full_parent_name
Retrieves the fully qualified parent command name.

This the base command name required to execute it. For example, in /one two three the parent name would be one two.

RETURN TYPE:
str

property qualified_name
Retrieves the fully qualified command name.

This is the full parent name with the command name as well. For example, in /one two three the qualified name would be one two three.

RETURN TYPE:
str

property qualified_id
Retrieves the fully qualified command ID.

This is the root parent ID. For example, in /one two three the qualified ID would return one.id.

RETURN TYPE:
int

class discord.SlashCommand(func, *args, **kwargs)[source]
Attributes
callback
checks
cog
cooldown
default_member_permissions
description
description_localizations
guild_ids
guild_only
mention
name
name_localizations
nsfw
options
parent
Methods
copy
A class that implements the protocol for a slash command.

These are not created manually, instead they are created via the decorator or functional interface.

New in version 2.0.

name
The name of the command.

TYPE:
str

callback
The coroutine that is executed when the command is called.

TYPE:
coroutine

description
The description for the command.

TYPE:
Optional[str]

guild_ids
The ids of the guilds where this command will be registered.

TYPE:
Optional[List[int]]

options
The parameters for this command.

TYPE:
List[Option]

parent
The parent group that this command belongs to. None if there isn’t one.

TYPE:
Optional[SlashCommandGroup]

mention
Returns a string that allows you to mention the slash command.

TYPE:
str

guild_only
Whether the command should only be usable inside a guild.

TYPE:
bool

nsfw
Whether the command should be restricted to 18+ channels and users. Apps intending to be listed in the App Directory cannot have NSFW commands.

TYPE:
bool

default_member_permissions
The default permissions a member needs to be able to run the command.

TYPE:
Permissions

cog
The cog that this command belongs to. None if there isn’t one.

TYPE:
Optional[Cog]

checks
A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

TYPE:
List[Callable[[ApplicationContext], bool]]

cooldown
The cooldown applied when the command is invoked. None if the command doesn’t have a cooldown.

TYPE:
Optional[Cooldown]

name_localizations
The name localizations for this command. The values of this should be "locale": "name". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

description_localizations
The description localizations for this command. The values of this should be "locale": "description". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

PARAMETERS:
func (Callable) –

copy()[source]
Creates a copy of this command.

RETURNS:
A new instance of this command.

RETURN TYPE:
SlashCommand

class discord.SlashCommandGroup(name, description=None, guild_ids=None, parent=None, **kwargs)[source]
Attributes
checks
default_member_permissions
description
description_localizations
guild_ids
guild_only
name
name_localizations
nsfw
parent
Methods
copy
create_subgroup
subgroup
walk_commands
A class that implements the protocol for a slash command group.

These can be created manually, but they should be created via the decorator or functional interface.

name
The name of the command.

TYPE:
str

description
The description for the command.

TYPE:
Optional[str]

guild_ids
The ids of the guilds where this command will be registered.

TYPE:
Optional[List[int]]

parent
The parent group that this group belongs to. None if there isn’t one.

TYPE:
Optional[SlashCommandGroup]

guild_only
Whether the command should only be usable inside a guild.

TYPE:
bool

nsfw
Whether the command should be restricted to 18+ channels and users. Apps intending to be listed in the App Directory cannot have NSFW commands.

TYPE:
bool

default_member_permissions
The default permissions a member needs to be able to run the command.

TYPE:
Permissions

checks
A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

TYPE:
List[Callable[[ApplicationContext], bool]]

name_localizations
The name localizations for this command. The values of this should be "locale": "name". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

description_localizations
The description localizations for this command. The values of this should be "locale": "description". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

PARAMETERS:
name (str) –

description (str | None) –

guild_ids (list[int] | None) –

parent (SlashCommandGroup | None) –

create_subgroup(name, description=None, guild_ids=None, **kwargs)[source]
Creates a new subgroup for this SlashCommandGroup.

PARAMETERS:
name (str) – The name of the group to create.

description (Optional[str]) – The description of the group to create.

guild_ids (Optional[List[int]]) – A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if None is passed.

guild_only (bool) – Whether the command should only be usable inside a guild.

nsfw (bool) – Whether the command should be restricted to 18+ channels and users. Apps intending to be listed in the App Directory cannot have NSFW commands.

default_member_permissions (Permissions) – The default permissions a member needs to be able to run the command.

checks (List[Callable[[ApplicationContext], bool]]) – A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

name_localizations (Optional[Dict[str, str]]) –

The name localizations for this command. The values of this should be "locale": "name". See here for a list of valid locales.

description_localizations (Optional[Dict[str, str]]) –

The description localizations for this command. The values of this should be "locale": "description". See here for a list of valid locales.

RETURNS:
The slash command group that was created.

RETURN TYPE:
SlashCommandGroup

subgroup(name=None, description=None, guild_ids=None)[source]
A shortcut decorator that initializes the provided subclass of SlashCommandGroup as a subgroup.

New in version 2.0.

PARAMETERS:
name (Optional[str]) – The name of the group to create. This will resolve to the name of the decorated class if None is passed.

description (Optional[str]) – The description of the group to create.

guild_ids (Optional[List[int]]) – A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if None is passed.

RETURNS:
The slash command group that was created.

RETURN TYPE:
Callable[[Type[SlashCommandGroup]], SlashCommandGroup]

for ... in walk_commands()[source]
An iterator that recursively walks through all slash commands in this group.

YIELDS:
SlashCommand – A slash command from the group.

RETURN TYPE:
Generator[SlashCommand, None, None]

copy()[source]
Creates a copy of this command group.

RETURNS:
A new instance of this command group.

RETURN TYPE:
SlashCommandGroup

class discord.UserCommand(func, *args, **kwargs)[source]
Attributes
callback
checks
cog
guild_ids
name
Methods
copy
A class that implements the protocol for user context menu commands.

These are not created manually, instead they are created via the decorator or functional interface.

name
The name of the command.

TYPE:
str

callback
The coroutine that is executed when the command is called.

TYPE:
coroutine

guild_ids
The ids of the guilds where this command will be registered.

TYPE:
Optional[List[int]]

cog
The cog that this command belongs to. None if there isn’t one.

TYPE:
Optional[Cog]

checks
A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

TYPE:
List[Callable[[ApplicationContext], bool]]

PARAMETERS:
func (Callable) –

copy()[source]
Creates a copy of this command.

RETURNS:
A new instance of this command.

RETURN TYPE:
UserCommand

class discord.MessageCommand(func, *args, **kwargs)[source]
Attributes
callback
checks
cog
guild_ids
name
Methods
copy
A class that implements the protocol for message context menu commands.

These are not created manually, instead they are created via the decorator or functional interface.

name
The name of the command.

TYPE:
str

callback
The coroutine that is executed when the command is called.

TYPE:
coroutine

guild_ids
The ids of the guilds where this command will be registered.

TYPE:
Optional[List[int]]

cog
The cog that this command belongs to. None if there isn’t one.

TYPE:
Optional[Cog]

checks
A list of predicates that verifies if the command could be executed with the given ApplicationContext as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from ApplicationCommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_application_command_error() event.

TYPE:
List[Callable[[ApplicationContext], bool]]

PARAMETERS:
func (Callable) –

copy()[source]
Creates a copy of this command.

RETURNS:
A new instance of this command.

RETURN TYPE:
MessageCommand

Options
Shortcut Decorators
@discord.commands.option(name, type=None, **kwargs)[source]
A decorator that can be used instead of typehinting Option.

New in version 2.0.

Objects
class discord.Option(input_type=<class 'str'>, /, description=None, **kwargs)[source]
Attributes
autocomplete
choices
default
description
description_localizations
input_type
max_length
max_value
min_length
min_value
name
name_localizations
required
Represents a selectable option for a slash command.

input_type
The type of input that is expected for this option. This can be a SlashCommandOptionType, an associated class, a channel type, a Converter, a converter class or an enum.Enum.

TYPE:
Union[Type[str], Type[bool], Type[int], Type[float], Type[abc.GuildChannel], Type[Thread], Type[Member], Type[User], Type[Attachment], Type[Role], Type[abc.Mentionable], SlashCommandOptionType, Type[ext.commands.Converter], Type[enums.Enum], Type[Enum]]

name
The name of this option visible in the UI. Inherits from the variable name if not provided as a parameter.

TYPE:
str

description
The description of this option. Must be 100 characters or fewer.

TYPE:
Optional[str]

choices
The list of available choices for this option. Can be a list of values or OptionChoice objects (which represent a name:value pair). If provided, the input from the user must match one of the choices in the list.

TYPE:
Optional[List[Union[Any, OptionChoice]]]

required
Whether this option is required.

TYPE:
Optional[bool]

default
The default value for this option. If provided, required will be considered False.

TYPE:
Optional[Any]

min_value
The minimum value that can be entered. Only applies to Options with an input_type of int or float.

TYPE:
Optional[int]

max_value
The maximum value that can be entered. Only applies to Options with an input_type of int or float.

TYPE:
Optional[int]

min_length
The minimum length of the string that can be entered. Must be between 0 and 6000 (inclusive). Only applies to Options with an input_type of str.

TYPE:
Optional[int]

max_length
The maximum length of the string that can be entered. Must be between 1 and 6000 (inclusive). Only applies to Options with an input_type of str.

TYPE:
Optional[int]

autocomplete
The autocomplete handler for the option. Accepts an iterable of str, a callable (sync or async) that takes a single argument of AutocompleteContext, or a coroutine. Must resolve to an iterable of str.

Note

Does not validate the input value against the autocomplete results.

TYPE:
Optional[Any]

name_localizations
The name localizations for this option. The values of this should be "locale": "name". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

description_localizations
The description localizations for this option. The values of this should be "locale": "description". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

EXAMPLES

Basic usage:

@bot.slash_command(guild_ids=[...])
async def hello(
    ctx: discord.ApplicationContext,
    name: Option(str, "Enter your name"),
    age: Option(int, "Enter your age", min_value=1, max_value=99, default=18)
    # passing the default value makes an argument optional
    # you also can create optional argument using:
    # age: Option(int, "Enter your age") = 18
):
    await ctx.respond(f"Hello! Your name is {name} and you are {age} years old.")
New in version 2.0.

PARAMETERS:
description (str | None) –

input_type (InputType) –

class discord.ThreadOption(thread_type)[source]
Represents a class that can be passed as the input_type for an Option class.

New in version 2.0.

PARAMETERS:
thread_type (Literal["public", "private", "news"]) – The thread type to expect for this options input.

class discord.OptionChoice(name, value=None, name_localizations=None)[source]
Attributes
name
name_localizations
value
Represents a name:value pairing for a selected Option.

New in version 2.0.

name
The name of the choice. Shown in the UI when selecting an option.

TYPE:
str

value
The value of the choice. If not provided, will use the value of name.

TYPE:
Optional[Union[str, int, float]]

name_localizations
The name localizations for this choice. The values of this should be "locale": "name". See here for a list of valid locales.

TYPE:
Optional[Dict[str, str]]

PARAMETERS:
name (str) –

value (str | int | float | None) –

name_localizations (dict[str, str] | None) –

Context Objects
class discord.ApplicationContext(bot, interaction)[source]
Attributes
author
bot
channel
channel_id
cog
command
followup
guild
guild_id
guild_locale
interaction
locale
me
message
response
selected_options
unselected_options
user
voice_client
Methods
defer
delete
edit
invoke
respond
send_followup
send_modal
send_response
Represents a Discord application command interaction context.

This class is not created manually and is instead passed to application commands as the first parameter.

New in version 2.0.

bot
The bot that the command belongs to.

TYPE:
Bot

interaction
The interaction object that invoked the command.

TYPE:
Interaction

command
The command that this context belongs to.

TYPE:
ApplicationCommand

PARAMETERS:
bot (Bot) –

interaction (Interaction) –

await invoke(command, /, *args, **kwargs)[source]
This function is a coroutine.

Calls a command with the arguments given. This is useful if you want to just call the callback that a ApplicationCommand holds internally.

Note

This does not handle converters, checks, cooldowns, pre-invoke, or after-invoke hooks in any matter. It calls the internal callback directly as-if it was a regular function. You must take care in passing the proper arguments when using this function.

PARAMETERS:
command (ApplicationCommand) – The command that is going to be called.

*args – The arguments to use.

**kwargs – The keyword arguments to use.

RAISES:
TypeError – The command argument to invoke is missing.

channel
Union[abc.GuildChannel, PartialMessageable, Thread]: Returns the channel associated with this context’s command. Shorthand for Interaction.channel.

channel_id
Returns the ID of the channel associated with this context’s command. Shorthand for Interaction.channel_id.

guild
Returns the guild associated with this context’s command. Shorthand for Interaction.guild.

guild_id
Returns the ID of the guild associated with this context’s command. Shorthand for Interaction.guild_id.

locale
Returns the locale of the guild associated with this context’s command. Shorthand for Interaction.locale.

guild_locale
Returns the locale of the guild associated with this context’s command. Shorthand for Interaction.guild_locale.

me
Union[Member, ClientUser]: Similar to Guild.me except it may return the ClientUser in private message message contexts, or when Intents.guilds() is absent.

message
Returns the message sent with this context’s command. Shorthand for Interaction.message, if applicable.

user
Returns the user that sent this context’s command. Shorthand for Interaction.user.

author
Returns the user that sent this context’s command. Shorthand for Interaction.user.

property voice_client
Returns the voice client associated with this context’s command. Shorthand for Interaction.guild.voice_client, if applicable.

RETURN TYPE:
VoiceProtocol | None

response
Returns the response object associated with this context’s command. Shorthand for Interaction.response.

property selected_options
The options and values that were selected by the user when sending the command.

RETURNS:
A dictionary containing the options and values that were selected by the user when the command was processed, if applicable. Returns None if the command has not yet been invoked, or if there are no options defined for that command.

RETURN TYPE:
Optional[List[Dict[str, Any]]]

property unselected_options
The options that were not provided by the user when sending the command.

RETURNS:
A list of Option objects (if any) that were not selected by the user when the command was processed. Returns None if there are no options defined for that command.

RETURN TYPE:
Optional[List[Option]]

property send_modal
This function is a coroutine. Responds to this interaction by sending a modal dialog. This cannot be used to respond to another modal dialog submission.

PARAMETERS:
modal (discord.ui.Modal) – The modal dialog to display to the user.

RAISES:
HTTPException – Sending the modal failed.

InteractionResponded – This interaction has already been responded to before.

RETURN TYPE:
Callable[…, Awaitable[Interaction]]

await respond(*args, **kwargs)[source]
This function is a coroutine.

Sends either a response or a message using the followup webhook determined by whether the interaction has been responded to or not.

RETURNS:
The response, its type depending on whether it’s an interaction response or a followup.

RETURN TYPE:
Union[discord.Interaction, discord.WebhookMessage]

property send_response
This function is a coroutine.

Responds to this interaction by sending a message.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

embeds (List[Embed]) – A list of embeds to send with the content. Maximum of 10. This cannot be mixed with the embed parameter.

embed (Embed) – The rich embed for the content to send. This cannot be mixed with embeds parameter.

tts (bool) – Indicates if the message should be sent using text-to-speech.

view (discord.ui.View) – The view to send with the message.

ephemeral (bool) – Indicates if the message should only be visible to the user who started the interaction. If a view is sent with an ephemeral message, and it has no timeout set then the timeout is set to 15 minutes.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

RETURNS:
The interaction object associated with the sent message.

RETURN TYPE:
Interaction

RAISES:
HTTPException – Sending the message failed.

TypeError – You specified both embed and embeds.

ValueError – The length of embeds was invalid.

InteractionResponded – This interaction has already been responded to before.

property send_followup
This function is a coroutine.

Sends a message using the webhook.

The content must be a type that can convert to a string through str(content).

To upload a single file, the file parameter should be used with a single File object.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type. You cannot mix the embed parameter with the embeds parameter, which must be a list of Embed objects to send.

PARAMETERS:
content (str) – The content of the message to send.

wait (bool) – Whether the server should wait before sending a response. This essentially means that the return type of this function changes from None to a WebhookMessage if set to True. If the type of webhook is WebhookType.application then this is always set to True.

username (str) – The username to send with this message. If no username is provided then the default username for the webhook is used.

avatar_url (str) – The avatar URL to send with this message. If no avatar URL is provided then the default avatar for the webhook is used. If this is not a string then it is explicitly cast using str.

tts (bool) – Indicates if the message should be sent using text-to-speech.

ephemeral (bool) –

Indicates if the message should only be visible to the user. This is only available to WebhookType.application webhooks. If a view is sent with an ephemeral message, and it has no timeout set then the timeout is set to 15 minutes.

New in version 2.0.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

embed (Embed) – The rich embed for the content to send. This cannot be mixed with embeds parameter.

embeds (List[Embed]) – A list of embeds to send with the content. Maximum of 10. This cannot be mixed with the embed parameter.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message.

New in version 1.4.

view (discord.ui.View) –

The view to send with the message. You can only send a view if this webhook is not partial and has state attached. A webhook has state attached if the webhook is managed by the library.

New in version 2.0.

thread (Snowflake) –

The thread to send this webhook to.

New in version 2.0.

thread_name (str) –

The name of the thread to create. Only works for forum channels.

New in version 2.0.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent.

RETURNS:
If wait is True then the message that was sent, otherwise None.

RETURN TYPE:
Optional[WebhookMessage]

RAISES:
HTTPException – Sending the message failed.

NotFound – This webhook was not found.

Forbidden – The authorization token for the webhook is incorrect.

TypeError – You specified both embed and embeds or file and files.

ValueError – The length of embeds was invalid.

InvalidArgument – Either there was no token associated with this webhook, ephemeral was passed with the improper webhook type, there was no state attached with this webhook when giving it a view, or you specified both thread_name and thread.

property defer
This function is a coroutine.

Defers the interaction response.

This is typically used when the interaction is acknowledged and a secondary action will be done later.

This can only be used with the following interaction types:

InteractionType.application_command

InteractionType.component

InteractionType.modal_submit

PARAMETERS:
ephemeral (bool) – Indicates whether the deferred message will eventually be ephemeral. This only applies to InteractionType.application_command interactions, or if invisible is False.

invisible (bool) – Indicates whether the deferred type should be ‘invisible’ (InteractionResponseType.deferred_message_update) instead of ‘thinking’ (InteractionResponseType.deferred_channel_message). In the Discord UI, this is represented as the bot thinking of a response. You must eventually send a followup message via Interaction.followup to make this thinking state go away. This parameter does not apply to interactions of type InteractionType.application_command.

RAISES:
HTTPException – Deferring the interaction failed.

InteractionResponded – This interaction has already been responded to before.

RETURN TYPE:
Callable[…, Awaitable[None]]

property followup
Returns the followup webhook for followup interactions.

RETURN TYPE:
Webhook

await delete(*, delay=None)[source]
This function is a coroutine.

Deletes the original interaction response message.

This is a higher level interface to Interaction.delete_original_response().

PARAMETERS:
delay (Optional[float]) – If provided, the number of seconds to wait before deleting the message.

RAISES:
HTTPException – Deleting the message failed.

Forbidden – You do not have proper permissions to delete the message.

RETURN TYPE:
None

property edit
This function is a coroutine.

Edits the original interaction response message.

This is a lower level interface to InteractionMessage.edit() in case you do not want to fetch the message and save an HTTP request.

This method is also the only way to edit the original message if the message sent was ephemeral.

PARAMETERS:
content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

attachments (List[Attachment]) – A list of attachments to keep in the message. If [] is passed then all attachments are removed.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

view (Optional[View]) – The updated view to update this message with. If None is passed then the view is removed.

delete_after (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message we just edited. If the deletion fails, then it is silently ignored.

RETURNS:
The newly edited message.

RETURN TYPE:
InteractionMessage

RAISES:
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid.

property cog
Returns the cog associated with this context’s command. None if it does not exist.

RETURN TYPE:
Cog | None

class discord.AutocompleteContext(bot, interaction)[source]
Attributes
bot
cog
command
focused
interaction
options
value
Represents context for a slash command’s option autocomplete.

This class is not created manually and is instead passed to an Option’s autocomplete callback.

New in version 2.0.

bot
The bot that the command belongs to.

TYPE:
Bot

interaction
The interaction object that invoked the autocomplete.

TYPE:
Interaction

command
The command that this context belongs to.

TYPE:
ApplicationCommand

focused
The option the user is currently typing.

TYPE:
Option

value
The content of the focused option.

TYPE:
str

options
A name to value mapping of the options that the user has selected before this option.

TYPE:
Dict[str, Any]

PARAMETERS:
bot (Bot) –

interaction (Interaction) –

property cog
Returns the cog associated with this context’s command. None if it does not exist.

RETURN TYPE:
Cog | None


Voice Related
Objects
class discord.VoiceClient(client, channel)[source]
Attributes
average_latency
channel
endpoint
guild
latency
loop
session_id
source
token
user
Methods
disconnect
is_connected
is_paused
is_playing
move_to
pause
play
resume
send_audio_packet
start_recording
stop
stop_recording
toggle_pause
unpack_audio
Represents a Discord voice connection.

You do not create these, you typically get them from e.g. VoiceChannel.connect().

session_id
The voice connection session ID.

TYPE:
str

token
The voice connection token.

TYPE:
str

endpoint
The endpoint we are connecting to.

TYPE:
str

channel
The voice channel connected to.

TYPE:
abc.Connectable

loop
The event loop that the voice client is running on.

TYPE:
asyncio.AbstractEventLoop

Warning

In order to use PCM based AudioSources, you must have the opus library installed on your system and loaded through opus.load_opus(). Otherwise, your AudioSources must be opus encoded (e.g. using FFmpegOpusAudio) or the library will not be able to transmit audio.

PARAMETERS:
client (Client) –

channel (Connectable) –

property guild
The guild we’re connected to, if applicable.

RETURN TYPE:
Guild | None

property user
The user connected to voice (i.e. ourselves).

RETURN TYPE:
ClientUser

property latency
Latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This could be referred to as the Discord Voice WebSocket latency and is an analogue of user’s voice latencies as seen in the Discord client.

New in version 1.4.

RETURN TYPE:
float

property average_latency
Average of most recent 20 HEARTBEAT latencies in seconds.

New in version 1.4.

RETURN TYPE:
float

await disconnect(*, force=False)[source]
This function is a coroutine.

Disconnects this voice client from voice.

PARAMETERS:
force (bool) –

RETURN TYPE:
None

await move_to(channel)[source]
This function is a coroutine.

Moves you to a different voice channel.

PARAMETERS:
channel (abc.Snowflake) – The channel to move to. Must be a voice channel.

RETURN TYPE:
None

is_connected()[source]
Indicates if the voice client is connected to voice.

RETURN TYPE:
bool

play(source, *, after=None)[source]
Plays an AudioSource.

The finalizer, after is called after the source has been exhausted or an error occurred.

If an error happens while the audio player is running, the exception is caught and the audio player is then stopped. If no after callback is passed, any caught exception will be displayed as if it were raised.

PARAMETERS:
source (AudioSource) – The audio source we’re reading from.

after (Callable[[Optional[Exception]], Any]) – The finalizer that is called after the stream is exhausted. This function must have a single parameter, error, that denotes an optional exception that was raised during playing.

RAISES:
ClientException – Already playing audio or not connected.

TypeError – Source is not a AudioSource or after is not a callable.

OpusNotLoaded – Source is not opus encoded and opus is not loaded.

RETURN TYPE:
None

unpack_audio(data)[source]
Takes an audio packet received from Discord and decodes it into pcm audio data. If there are no users talking in the channel, None will be returned.

You must be connected to receive audio.

New in version 2.0.

PARAMETERS:
data (bytes) – Bytes received by Discord via the UDP connection used for sending and receiving voice data.

start_recording(sink, callback, *args)[source]
The bot will begin recording audio from the current voice channel it is in. This function uses a thread so the current code line will not be stopped. Must be in a voice channel to use. Must not be already recording.

New in version 2.0.

PARAMETERS:
sink (Sink) – A Sink which will “store” all the audio data.

callback (coroutine) – A function which is called after the bot has stopped recording.

*args – Args which will be passed to the callback function.

RAISES:
RecordingException – Not connected to a voice channel.

RecordingException – Already recording.

RecordingException – Must provide a Sink object.

stop_recording()[source]
Stops the recording. Must be already recording.

New in version 2.0.

RAISES:
RecordingException – Not currently recording.

toggle_pause()[source]
Pauses or unpauses the recording. Must be already recording.

New in version 2.0.

RAISES:
RecordingException – Not currently recording.

is_playing()[source]
Indicates if we’re currently playing audio.

RETURN TYPE:
bool

is_paused()[source]
Indicates if we’re playing audio, but if we’re paused.

RETURN TYPE:
bool

stop()[source]
Stops playing audio.

RETURN TYPE:
None

pause()[source]
Pauses the audio playing.

RETURN TYPE:
None

resume()[source]
Resumes the audio playing.

RETURN TYPE:
None

property source
The audio source being played, if playing.

This property can also be used to change the audio source currently being played.

RETURN TYPE:
AudioSource | None

send_audio_packet(data, *, encode=True)[source]
Sends an audio packet composed of the data.

You must be connected to play audio.

PARAMETERS:
data (bytes) – The bytes-like object denoting PCM or Opus voice data.

encode (bool) – Indicates if data should be encoded into Opus.

RAISES:
ClientException – You are not connected.

opus.OpusError – Encoding the data failed.

RETURN TYPE:
None

class discord.VoiceProtocol(client, channel)[source]
Methods
cleanup
connect
disconnect
on_voice_server_update
on_voice_state_update
A class that represents the Discord voice protocol.

This is an abstract class. The library provides a concrete implementation under VoiceClient.

This class allows you to implement a protocol to allow for an external method of sending voice, such as Lavalink or a native library implementation.

These classes are passed to abc.Connectable.connect.

PARAMETERS:
client (Client) – The client (or its subclasses) that started the connection request.

channel (abc.Connectable) – The voice channel that is being connected to.

await on_voice_state_update(data)[source]
This function is a coroutine.

An abstract method that is called when the client’s voice state has changed. This corresponds to VOICE_STATE_UPDATE.

PARAMETERS:
data (dict) –

The raw voice state payload.

RETURN TYPE:
None

await on_voice_server_update(data)[source]
This function is a coroutine.

An abstract method that is called when initially connecting to voice. This corresponds to VOICE_SERVER_UPDATE.

PARAMETERS:
data (dict) –

The raw voice server update payload.

RETURN TYPE:
None

await connect(*, timeout, reconnect)[source]
This function is a coroutine.

An abstract method called when the client initiates the connection request.

When a connection is requested initially, the library calls the constructor under __init__ and then calls connect(). If connect() fails at some point then disconnect() is called.

Within this method, to start the voice connection flow it is recommended to use Guild.change_voice_state() to start the flow. After which, on_voice_server_update() and on_voice_state_update() will be called. The order that these two are called is unspecified.

PARAMETERS:
timeout (float) – The timeout for the connection.

reconnect (bool) – Whether reconnection is expected.

RETURN TYPE:
None

await disconnect(*, force)[source]
This function is a coroutine.

An abstract method called when the client terminates the connection.

See cleanup().

PARAMETERS:
force (bool) – Whether the disconnection was forced.

RETURN TYPE:
None

cleanup()[source]
This method must be called to ensure proper clean-up during a disconnect.

It is advisable to call this from within disconnect() when you are completely done with the voice protocol instance.

This method removes it from the internal state cache that keeps track of currently alive voice clients. Failure to clean-up will cause subsequent connections to report that it’s still connected.

RETURN TYPE:
None

class discord.AudioSource[source]
Methods
cleanup
is_opus
read
Represents an audio stream.

The audio stream can be Opus encoded or not, however if the audio stream is not Opus encoded then the audio format must be 16-bit 48KHz stereo PCM.

Warning

The audio source reads are done in a separate thread.

read()[source]
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

RETURNS:
A bytes like object that represents the PCM or Opus data.

RETURN TYPE:
bytes

is_opus()[source]
Checks if the audio source is already encoded in Opus.

RETURN TYPE:
bool

cleanup()[source]
Called when clean-up is needed to be done.

Useful for clearing buffer data or processes after it is done playing audio.

RETURN TYPE:
None

class discord.PCMAudio(stream)[source]
Attributes
stream
Methods
read
Represents raw 16-bit 48KHz stereo PCM audio source.

stream
A file-like object that reads byte data representing raw PCM.

TYPE:
file object

PARAMETERS:
stream (BufferedIOBase) –

read()[source]
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

RETURNS:
A bytes like object that represents the PCM or Opus data.

RETURN TYPE:
bytes

class discord.FFmpegAudio(source, *, executable='ffmpeg', args, **subprocess_kwargs)[source]
Methods
cleanup
Represents an FFmpeg (or AVConv) based AudioSource.

User created AudioSources using FFmpeg differently from how FFmpegPCMAudio and FFmpegOpusAudio work should subclass this.

New in version 1.3.

PARAMETERS:
source (str | io.BufferedIOBase) –

executable (str) –

args (Any) –

subprocess_kwargs (Any) –

cleanup()[source]
Called when clean-up is needed to be done.

Useful for clearing buffer data or processes after it is done playing audio.

RETURN TYPE:
None

class discord.FFmpegPCMAudio(source, *, executable='ffmpeg', pipe=False, stderr=None, before_options=None, options=None)[source]
Methods
is_opus
read
An audio source from FFmpeg (or AVConv).

This launches a sub-process to a specific input file given.

Warning

You must have the ffmpeg or avconv executable in your path environment variable in order for this to work.

PARAMETERS:
source (Union[str, io.BufferedIOBase]) – The input that ffmpeg will take and convert to PCM bytes. If pipe is True then this is a file-like object that is passed to the stdin of ffmpeg.

executable (str) – The executable name (and path) to use. Defaults to ffmpeg.

pipe (bool) – If True, denotes that source parameter will be passed to the stdin of ffmpeg. Defaults to False.

stderr (Optional[file object]) – A file-like object to pass to the Popen constructor. Could also be an instance of subprocess.PIPE.

before_options (Optional[str]) – Extra command line arguments to pass to ffmpeg before the -i flag.

options (Optional[str]) – Extra command line arguments to pass to ffmpeg after the -i flag.

RAISES:
ClientException – The subprocess failed to be created.

read()[source]
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

RETURNS:
A bytes like object that represents the PCM or Opus data.

RETURN TYPE:
bytes

is_opus()[source]
Checks if the audio source is already encoded in Opus.

RETURN TYPE:
bool

class discord.FFmpegOpusAudio(source, *, bitrate=128, codec=None, executable='ffmpeg', pipe=False, stderr=None, before_options=None, options=None)[source]
Methods
FFmpegOpusAudio.from_probe
FFmpegOpusAudio.probe
is_opus
read
An audio source from FFmpeg (or AVConv).

This launches a sub-process to a specific input file given. However, rather than producing PCM packets like FFmpegPCMAudio does that need to be encoded to Opus, this class produces Opus packets, skipping the encoding step done by the library.

Alternatively, instead of instantiating this class directly, you can use FFmpegOpusAudio.from_probe() to probe for bitrate and codec information. This can be used to opportunistically skip pointless re-encoding of existing Opus audio data for a boost in performance at the cost of a short initial delay to gather the information. The same can be achieved by passing copy to the codec parameter, but only if you know that the input source is Opus encoded beforehand.

New in version 1.3.

Warning

You must have the ffmpeg or avconv executable in your path environment variable in order for this to work.

PARAMETERS:
source (Union[str, io.BufferedIOBase]) – The input that ffmpeg will take and convert to Opus bytes. If pipe is True then this is a file-like object that is passed to the stdin of ffmpeg.

bitrate (int) – The bitrate in kbps to encode the output to. Defaults to 128.

codec (Optional[str]) –

The codec to use to encode the audio data. Normally this would be just libopus, but is used by FFmpegOpusAudio.from_probe() to opportunistically skip pointlessly re-encoding Opus audio data by passing copy as the codec value. Any values other than copy, opus, or libopus will be considered libopus. Defaults to libopus.

Warning

Do not provide this parameter unless you are certain that the audio input is already Opus encoded. For typical use FFmpegOpusAudio.from_probe() should be used to determine the proper value for this parameter.

executable (str) – The executable name (and path) to use. Defaults to ffmpeg.

pipe (bool) – If True, denotes that source parameter will be passed to the stdin of ffmpeg. Defaults to False.

stderr (Optional[file object]) – A file-like object to pass to the Popen constructor. Could also be an instance of subprocess.PIPE.

before_options (Optional[str]) – Extra command line arguments to pass to ffmpeg before the -i flag.

options (Optional[str]) – Extra command line arguments to pass to ffmpeg after the -i flag.

RAISES:
ClientException – The subprocess failed to be created.

classmethod await from_probe(source, *, method=None, **kwargs)[source]
This function is a coroutine.

A factory method that creates a FFmpegOpusAudio after probing the input source for audio codec and bitrate information.

PARAMETERS:
source – Identical to the source parameter for the constructor.

method (Optional[Union[str, Callable[str, str]]]) – The probing method used to determine bitrate and codec information. As a string, valid values are native to use ffprobe (or avprobe) and fallback to use ffmpeg (or avconv). As a callable, it must take two string arguments, source and executable. Both parameters are the same values passed to this factory function. executable will default to ffmpeg if not provided as a keyword argument.

kwargs – The remaining parameters to be passed to the FFmpegOpusAudio constructor, excluding bitrate and codec.

RETURNS:
An instance of this class.

RETURN TYPE:
FFmpegOpusAudio

RAISES:
AttributeError – Invalid probe method, must be 'native' or 'fallback'.

TypeError – Invalid value for probe parameter, must be str or a callable.

EXAMPLES

Use this function to create an FFmpegOpusAudio instance instead of the constructor:

source = await discord.FFmpegOpusAudio.from_probe("song.webm")
voice_client.play(source)
If you are on Windows and don’t have ffprobe installed, use the fallback method to probe using ffmpeg instead:

source = await discord.FFmpegOpusAudio.from_probe("song.webm", method='fallback')
voice_client.play(source)
Using a custom method of determining codec and bitrate:

def custom_probe(source, executable):
    # some analysis code here
    return codec, bitrate

source = await discord.FFmpegOpusAudio.from_probe("song.webm", method=custom_probe)
voice_client.play(source)
classmethod await probe(source, *, method=None, executable=None)[source]
This function is a coroutine.

Probes the input source for bitrate and codec information.

PARAMETERS:
source (str) – Identical to the source parameter for FFmpegOpusAudio.

method (str | Callable[[str, str], tuple[str | None, int | None]] | None) – Identical to the method parameter for FFmpegOpusAudio.from_probe().

executable (str) – Identical to the executable parameter for FFmpegOpusAudio.

RETURNS:
A 2-tuple with the codec and bitrate of the input source.

RETURN TYPE:
Optional[Tuple[Optional[str], Optional[int]]]

RAISES:
AttributeError – Invalid probe method, must be 'native' or 'fallback'.

TypeError – Invalid value for probe parameter, must be str or a callable.

read()[source]
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

RETURNS:
A bytes like object that represents the PCM or Opus data.

RETURN TYPE:
bytes

is_opus()[source]
Checks if the audio source is already encoded in Opus.

RETURN TYPE:
bool

class discord.PCMVolumeTransformer(original, volume=1.0)[source]
Attributes
volume
Methods
cleanup
read
Transforms a previous AudioSource to have volume controls.

This does not work on audio sources that have AudioSource.is_opus() set to True.

PARAMETERS:
original (AudioSource) – The original AudioSource to transform.

volume (float) – The initial volume to set it to. See volume for more info.

RAISES:
TypeError – Not an audio source.

ClientException – The audio source is opus encoded.

property volume
Retrieves or sets the volume as a floating point percentage (e.g. 1.0 for 100%).

RETURN TYPE:
float

cleanup()[source]
Called when clean-up is needed to be done.

Useful for clearing buffer data or processes after it is done playing audio.

RETURN TYPE:
None

read()[source]
Reads 20ms worth of audio.

Subclasses must implement this.

If the audio is complete, then returning an empty bytes-like object to signal this is the way to do so.

If is_opus() method returns True, then it must return 20ms worth of Opus encoded audio. Otherwise, it must be 20ms worth of 16-bit 48KHz stereo PCM, which is about 3,840 bytes per frame (20ms worth of audio).

RETURNS:
A bytes like object that represents the PCM or Opus data.

RETURN TYPE:
bytes

Opus Library
discord.opus.load_opus(name)[source]
Loads the libopus shared library for use with voice.

If this function is not called then the library uses the function ctypes.util.find_library() and then loads that one if available.

Not loading a library and attempting to use PCM based AudioSources will lead to voice not working.

This function propagates the exceptions thrown.

Warning

The bitness of the library must match the bitness of your python interpreter. If the library is 64-bit then your python interpreter must be 64-bit as well. Usually if there’s a mismatch in bitness then the load will throw an exception.

Note

On Windows, this function should not need to be called as the binaries are automatically loaded.

Note

On Windows, the .dll extension is not necessary. However, on Linux the full extension is required to load the library, e.g. libopus.so.1. On Linux however, ctypes.util.find_library() will usually find the library automatically without you having to call this.

PARAMETERS:
name (str) – The filename of the shared library.

RETURN TYPE:
None

discord.opus.is_loaded()[source]
Function to check if opus lib is successfully loaded either via the ctypes.util.find_library() call of load_opus().

This must return True for voice to work.

RETURNS:
Indicates if the opus library has been loaded.

RETURN TYPE:



Event Reference
This section outlines the different types of events listened by Client.

There are two ways to register an event, the first way is through the use of Client.event(). The second way is through subclassing Client and overriding the specific events. For example:

import discord

class MyClient(discord.Client):
    async def on_message(self, message):
        if message.author == self.user:
            return

        if message.content.startswith('$hello'):
            await message.channel.send('Hello World!')
If an event handler raises an exception, on_error() will be called to handle it, which defaults to print a traceback and ignoring the exception.

Warning

All the events must be a coroutine. If they aren’t, then you might get unexpected errors. In order to turn a function into a coroutine they must be async def functions.

Application Commands
discord.on_application_command(context)
Called when an application command is received.

New in version 2.0.

PARAMETERS:
context (ApplicationContext) – The ApplicationContext associated to the command being received.

discord.on_application_command_completion(context)
Called when an application command is completed, after any checks have finished.

New in version 2.0.

PARAMETERS:
context (ApplicationContext) – The ApplicationContext associated to the command that was completed.

discord.on_application_command_error(context, exception)
Called when an application command has an error.

New in version 2.0.

PARAMETERS:
context (ApplicationContext) – The ApplicationContext associated to the command that has an error.

exception (DiscordException) – The DiscordException associated to the error.

discord.on_unknown_application_command(interaction)
Called when an application command was not found in the bot’s internal cache.

New in version 2.0.

PARAMETERS:
interaction (Interaction) – The interaction associated to the unknown command.

AutoMod
discord.on_auto_moderation_rule_create(rule)
Called when an auto moderation rule is created.

The bot must have manage_guild to receive this, and Intents.auto_moderation_configuration must be enabled.

PARAMETERS:
rule (AutoModRule) – The newly created rule.

discord.on_auto_moderation_rule_update(rule)
Called when an auto moderation rule is updated.

The bot must have manage_guild to receive this, and Intents.auto_moderation_configuration must be enabled.

PARAMETERS:
rule (AutoModRule) – The updated rule.

discord.on_auto_moderation_rule_delete(rule)
Called when an auto moderation rule is deleted.

The bot must have manage_guild to receive this, and Intents.auto_moderation_configuration must be enabled.

PARAMETERS:
rule (AutoModRule) – The deleted rule.

discord.on_auto_moderation_action_execution(payload)
Called when an auto moderation action is executed.

The bot must have manage_guild to receive this, and Intents.auto_moderation_execution must be enabled.

PARAMETERS:
payload (AutoModActionExecutionEvent) – The event’s data.

Bans
discord.on_member_ban(guild, user)
Called when user gets banned from a Guild.

This requires Intents.bans to be enabled.

PARAMETERS:
guild (Guild) – The guild the user got banned from.

user (Union[User, Member]) – The user that got banned. Can be either User or Member depending if the user was in the guild or not at the time of removal.

discord.on_member_unban(guild, user)
Called when a User gets unbanned from a Guild.

This requires Intents.bans to be enabled.

PARAMETERS:
guild (Guild) – The guild the user got unbanned from.

user (User) – The user that got unbanned.

Channels
discord.on_private_channel_update(before, after)
Called whenever a private group DM is updated. e.g. changed name or topic.

This requires Intents.messages to be enabled.

PARAMETERS:
before (GroupChannel) – The updated group channel’s old info.

after (GroupChannel) – The updated group channel’s new info.

discord.on_private_channel_pins_update(channel, last_pin)
Called whenever a message is pinned or unpinned from a private channel.

PARAMETERS:
channel (abc.PrivateChannel) – The private channel that had its pins updated.

last_pin (Optional[datetime.datetime]) – The latest message that was pinned as an aware datetime in UTC. Could be None.

discord.on_guild_channel_update(before, after)
Called whenever a guild channel is updated. e.g. changed name, topic, permissions.

This requires Intents.guilds to be enabled.

PARAMETERS:
before (abc.GuildChannel) – The updated guild channel’s old info.

after (abc.GuildChannel) – The updated guild channel’s new info.

discord.on_guild_channel_pins_update(channel, last_pin)
Called whenever a message is pinned or unpinned from a guild channel.

This requires Intents.guilds to be enabled.

PARAMETERS:
channel (Union[abc.GuildChannel, Thread]) – The guild channel that had its pins updated.

last_pin (Optional[datetime.datetime]) – The latest message that was pinned as an aware datetime in UTC. Could be None.

discord.on_guild_channel_delete(channel)
discord.on_guild_channel_create(channel)
Called whenever a guild channel is deleted or created.

Note that you can get the guild from guild.

This requires Intents.guilds to be enabled.

PARAMETERS:
channel (abc.GuildChannel) – The guild channel that got created or deleted.

Connection
discord.on_error(event, *args, **kwargs)
Usually when an event raises an uncaught exception, a traceback is printed to stderr and the exception is ignored. If you want to change this behaviour and handle the exception for whatever reason yourself, this event can be overridden. Which, when done, will suppress the default action of printing the traceback.

The information of the exception raised and the exception itself can be retrieved with a standard call to sys.exc_info().

If you want exception to propagate out of the Client class you can define an on_error handler consisting of a single empty raise statement. Exceptions raised by on_error will not be handled in any way by Client.

Note

on_error will only be dispatched to Client.event().

It will not be received by Client.wait_for(), or, if used, Bots listeners such as listen() or listener().

PARAMETERS:
event (str) – The name of the event that raised the exception.

args – The positional arguments for the event that raised the exception.

kwargs – The keyword arguments for the event that raised the exception.

discord.on_connect()
Called when the client has successfully connected to Discord. This is not the same as the client being fully prepared, see on_ready() for that.

The warnings on on_ready() also apply.

Warning

Overriding this event will not call Bot.sync_commands(). As a result, ApplicationCommand will not be registered.

discord.on_shard_connect(shard_id)
Similar to on_connect() except used by AutoShardedClient to denote when a particular shard ID has connected to Discord.

New in version 1.4.

PARAMETERS:
shard_id (int) – The shard ID that has connected.

discord.on_disconnect()
Called when the client has disconnected from Discord, or a connection attempt to Discord has failed. This could happen either through the internet being disconnected, explicit calls to close, or Discord terminating the connection one way or the other.

This function can be called many times without a corresponding on_connect() call.

discord.on_shard_disconnect(shard_id)
Similar to on_disconnect() except used by AutoShardedClient to denote when a particular shard ID has disconnected from Discord.

New in version 1.4.

PARAMETERS:
shard_id (int) – The shard ID that has disconnected.

discord.on_ready()
Called when the client is done preparing the data received from Discord. Usually after login is successful and the Client.guilds and co. are filled up.

Warning

This function is not guaranteed to be the first event called. Likewise, this function is not guaranteed to only be called once. This library implements reconnection logic and thus will end up calling this event whenever a RESUME request fails.

discord.on_shard_ready(shard_id)
Similar to on_ready() except used by AutoShardedClient to denote when a particular shard ID has become ready.

PARAMETERS:
shard_id (int) – The shard ID that is ready.

discord.on_resumed()
Called when the client has resumed a session.

discord.on_shard_resumed(shard_id)
Similar to on_resumed() except used by AutoShardedClient to denote when a particular shard ID has resumed a session.

New in version 1.4.

PARAMETERS:
shard_id (int) – The shard ID that has resumed.

discord.on_socket_event_type(event_type)
Called whenever a WebSocket event is received from the WebSocket.

This is mainly useful for logging how many events you are receiving from the Discord gateway.

New in version 2.0.

PARAMETERS:
event_type (str) – The event type from Discord that is received, e.g. 'READY'.

discord.on_socket_raw_receive(msg)
Called whenever a message is completely received from the WebSocket, before it’s processed and parsed. This event is always dispatched when a complete message is received and the passed data is not parsed in any way.

This is only really useful for grabbing the WebSocket stream and debugging purposes.

This requires setting the enable_debug_events setting in the Client.

Note

This is only for the messages received from the client WebSocket. The voice WebSocket will not trigger this event.

PARAMETERS:
msg (str) – The message passed in from the WebSocket library.

discord.on_socket_raw_send(payload)
Called whenever a send operation is done on the WebSocket before the message is sent. The passed parameter is the message that is being sent to the WebSocket.

This is only really useful for grabbing the WebSocket stream and debugging purposes.

This requires setting the enable_debug_events setting in the Client.

Note

This is only for the messages sent from the client WebSocket. The voice WebSocket will not trigger this event.

PARAMETERS:
payload – The message that is about to be passed on to the WebSocket library. It can be bytes to denote a binary message or str to denote a regular text message.

Guilds
discord.on_guild_join(guild)
Called when a Guild is either created by the Client or when the Client joins a guild.

This requires Intents.guilds to be enabled.

PARAMETERS:
guild (Guild) – The guild that was joined.

discord.on_guild_remove(guild)
Called when a Guild is removed from the Client.

This happens through, but not limited to, these circumstances:

The client got banned.

The client got kicked.

The client left the guild.

The client or the guild owner deleted the guild.

In order for this event to be invoked then the Client must have been part of the guild to begin with. (i.e. it is part of Client.guilds)

This requires Intents.guilds to be enabled.

PARAMETERS:
guild (Guild) – The guild that got removed.

discord.on_guild_update(before, after)
Called when a Guild is updated, for example:

Changed name

Changed AFK channel

Changed AFK timeout

etc.

This requires Intents.guilds to be enabled.

PARAMETERS:
before (Guild) – The guild prior to being updated.

after (Guild) – The guild after being updated.

discord.on_guild_role_create(role)
discord.on_guild_role_delete(role)
Called when a Guild creates or deletes a Role.

To get the guild it belongs to, use Role.guild.

This requires Intents.guilds to be enabled.

PARAMETERS:
role (Role) – The role that was created or deleted.

discord.on_guild_role_update(before, after)
Called when a Role is changed guild-wide.

This requires Intents.guilds to be enabled.

PARAMETERS:
before (Role) – The updated role’s old info.

after (Role) – The updated role’s updated info.

discord.on_guild_emojis_update(guild, before, after)
Called when a Guild adds or removes an Emoji.

This requires Intents.emojis_and_stickers to be enabled.

PARAMETERS:
guild (Guild) – The guild who got their emojis updated.

before (Sequence[Emoji]) – A list of emojis before the update.

after (Sequence[Emoji]) – A list of emojis after the update.

discord.on_guild_stickers_update(guild, before, after)
Called when a Guild adds or removes a sticker.

This requires Intents.emojis_and_stickers to be enabled.

New in version 2.0.

PARAMETERS:
guild (Guild) – The guild who got their stickers updated.

before (Sequence[GuildSticker]) – A list of stickers before the update.

after (Sequence[GuildSticker]) – A list of stickers after the update.

discord.on_guild_available(guild)
discord.on_guild_unavailable(guild)
Called when a guild becomes available or unavailable. The guild must have existed in the Client.guilds cache.

This requires Intents.guilds to be enabled.

PARAMETERS:
guild (Guild) – The guild that has changed availability.

discord.on_webhooks_update(channel)
Called whenever a webhook is created, modified, or removed from a guild channel.

This requires Intents.webhooks to be enabled.

PARAMETERS:
channel (abc.GuildChannel) – The channel that had its webhooks updated.

Integrations
discord.on_guild_integrations_update(guild)
Called whenever an integration is created, modified, or removed from a guild.

This requires Intents.integrations to be enabled.

New in version 1.4.

PARAMETERS:
guild (Guild) – The guild that had its integrations updated.

discord.on_integration_create(integration)
Called when an integration is created.

This requires Intents.integrations to be enabled.

New in version 2.0.

PARAMETERS:
integration (Integration) – The integration that was created.

discord.on_integration_update(integration)
Called when an integration is updated.

This requires Intents.integrations to be enabled.

New in version 2.0.

PARAMETERS:
integration (Integration) – The integration that was created.

discord.on_raw_integration_delete(payload)
Called when an integration is deleted.

This requires Intents.integrations to be enabled.

New in version 2.0.

PARAMETERS:
payload (RawIntegrationDeleteEvent) – The raw event payload data.

Interactions
discord.on_interaction(interaction)
Called when an interaction happened.

This currently happens due to application command invocations or components being used.

Warning

This is a low level function that is not generally meant to be used. If you are working with components, consider using the callbacks associated with the View instead as it provides a nicer user experience.

New in version 2.0.

PARAMETERS:
interaction (Interaction) – The interaction data.

Invites
discord.on_invite_create(invite)
Called when an Invite is created. You must have the manage_channels permission to receive this.

New in version 1.3.

Note

There is a rare possibility that the Invite.guild and Invite.channel attributes will be of Object rather than the respective models.

This requires Intents.invites to be enabled.

PARAMETERS:
invite (Invite) – The invite that was created.

discord.on_invite_delete(invite)
Called when an Invite is deleted. You must have the manage_channels permission to receive this.

New in version 1.3.

Note

There is a rare possibility that the Invite.guild and Invite.channel attributes will be of Object rather than the respective models.

Outside of those two attributes, the only other attribute guaranteed to be filled by the Discord gateway for this event is Invite.code.

This requires Intents.invites to be enabled.

PARAMETERS:
invite (Invite) – The invite that was deleted.

Members/Users
discord.on_member_join(member)
discord.on_member_remove(member)
Called when a Member leaves or joins a Guild.

This requires Intents.members to be enabled.

PARAMETERS:
member (Member) – The member who joined or left.

discord.on_member_update(before, after)
Called when a Member updates their profile.

This is called when one or more of the following things change:

nickname

roles

pending

communication_disabled_until

timed_out

This requires Intents.members to be enabled.

PARAMETERS:
before (Member) – The updated member’s old info.

after (Member) – The updated member’s updated info.

discord.on_presence_update(before, after)
Called when a Member updates their presence.

This is called when one or more of the following things change:

status

activity

This requires Intents.presences and Intents.members to be enabled.

New in version 2.0.

PARAMETERS:
before (Member) – The updated member’s old info.

after (Member) – The updated member’s updated info.

discord.on_voice_state_update(member, before, after)
Called when a Member changes their VoiceState.

The following, but not limited to, examples illustrate when this event is called:

A member joins a voice or stage channel.

A member leaves a voice or stage channel.

A member is muted or deafened by their own accord.

A member is muted or deafened by a guild administrator.

This requires Intents.voice_states to be enabled.

PARAMETERS:
member (Member) – The member whose voice states changed.

before (VoiceState) – The voice state prior to the changes.

after (VoiceState) – The voice state after the changes.

discord.on_user_update(before, after)
Called when a User updates their profile.

This is called when one or more of the following things change:

avatar

username

discriminator

This requires Intents.members to be enabled.

PARAMETERS:
before (User) – The updated user’s old info.

after (User) – The updated user’s updated info.

Messages
discord.on_message(message)
Called when a Message is created and sent.

This requires Intents.messages to be enabled.

Warning

Your bot’s own messages and private messages are sent through this event. This can lead cases of ‘recursion’ depending on how your bot was programmed. If you want the bot to not reply to itself, consider checking the user IDs. Note that Bot does not have this problem.

PARAMETERS:
message (Message) – The current message.

discord.on_message_delete(message)
Called when a message is deleted. If the message is not found in the internal message cache, then this event will not be called. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds.

If this occurs increase the max_messages parameter or use the on_raw_message_delete() event instead.

This requires Intents.messages to be enabled.

PARAMETERS:
message (Message) – The deleted message.

discord.on_bulk_message_delete(messages)
Called when messages are bulk deleted. If none of the messages deleted are found in the internal message cache, then this event will not be called. If individual messages were not found in the internal message cache, this event will still be called, but the messages not found will not be included in the messages list. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds.

If this occurs increase the max_messages parameter or use the on_raw_bulk_message_delete() event instead.

This requires Intents.messages to be enabled.

PARAMETERS:
messages (List[Message]) – The messages that have been deleted.

discord.on_raw_message_delete(payload)
Called when a message is deleted. Unlike on_message_delete(), this is called regardless of the message being in the internal message cache or not.

If the message is found in the message cache, it can be accessed via RawMessageDeleteEvent.cached_message

This requires Intents.messages to be enabled.

PARAMETERS:
payload (RawMessageDeleteEvent) – The raw event payload data.

discord.on_raw_bulk_message_delete(payload)
Called when a bulk delete is triggered. Unlike on_bulk_message_delete(), this is called regardless of the messages being in the internal message cache or not.

If the messages are found in the message cache, they can be accessed via RawBulkMessageDeleteEvent.cached_messages

This requires Intents.messages to be enabled.

PARAMETERS:
payload (RawBulkMessageDeleteEvent) – The raw event payload data.

discord.on_message_edit(before, after)
Called when a Message receives an update event. If the message is not found in the internal message cache, then these events will not be called. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds.

If this occurs increase the max_messages parameter or use the on_raw_message_edit() event instead.

The following non-exhaustive cases trigger this event:

A message has been pinned or unpinned.

The message content has been changed.

The message has received an embed.

For performance reasons, the embed server does not do this in a “consistent” manner.

The message’s embeds were suppressed or unsuppressed.

A call message has received an update to its participants or ending time.

This requires Intents.messages to be enabled.

PARAMETERS:
before (Message) – The previous version of the message.

after (Message) – The current version of the message.

discord.on_raw_message_edit(payload)
Called when a message is edited. Unlike on_message_edit(), this is called regardless of the state of the internal message cache.

If the message is found in the message cache, it can be accessed via RawMessageUpdateEvent.cached_message. The cached message represents the message before it has been edited. For example, if the content of a message is modified and triggers the on_raw_message_edit() coroutine, the RawMessageUpdateEvent.cached_message will return a Message object that represents the message before the content was modified.

Due to the inherently raw nature of this event, the data parameter coincides with the raw data given by the gateway.

Since the data payload can be partial, care must be taken when accessing stuff in the dictionary. One example of a common case of partial data is when the 'content' key is inaccessible. This denotes an “embed” only edit, which is an edit in which only the embeds are updated by the Discord embed server.

This requires Intents.messages to be enabled.

PARAMETERS:
payload (RawMessageUpdateEvent) – The raw event payload data.

Reactions
discord.on_reaction_add(reaction, user)
Called when a message has a reaction added to it. Similar to on_message_edit(), if the message is not found in the internal message cache, then this event will not be called. Consider using on_raw_reaction_add() instead.

Note

To get the Message being reacted, access it via Reaction.message.

This requires Intents.reactions to be enabled.

Note

This doesn’t require Intents.members within a guild context, but due to Discord not providing updated user information in a direct message it’s required for direct messages to receive this event. Consider using on_raw_reaction_add() if you need this and do not otherwise want to enable the members intent.

PARAMETERS:
reaction (Reaction) – The current state of the reaction.

user (Union[Member, User]) – The user who added the reaction.

discord.on_raw_reaction_add(payload)
Called when a message has a reaction added. Unlike on_reaction_add(), this is called regardless of the state of the internal message cache.

This requires Intents.reactions to be enabled.

PARAMETERS:
payload (RawReactionActionEvent) – The raw event payload data.

discord.on_reaction_remove(reaction, user)
Called when a message has a reaction removed from it. Similar to on_message_edit, if the message is not found in the internal message cache, then this event will not be called.

Note

To get the message being reacted, access it via Reaction.message.

This requires both Intents.reactions and Intents.members to be enabled.

Note

Consider using on_raw_reaction_remove() if you need this and do not want to enable the members intent.

PARAMETERS:
reaction (Reaction) – The current state of the reaction.

user (Union[Member, User]) – The user who added the reaction.

discord.on_raw_reaction_remove(payload)
Called when a message has a reaction removed. Unlike on_reaction_remove(), this is called regardless of the state of the internal message cache.

This requires Intents.reactions to be enabled.

PARAMETERS:
payload (RawReactionActionEvent) – The raw event payload data.

discord.on_reaction_clear(message, reactions)
Called when a message has all its reactions removed from it. Similar to on_message_edit(), if the message is not found in the internal message cache, then this event will not be called. Consider using on_raw_reaction_clear() instead.

This requires Intents.reactions to be enabled.

PARAMETERS:
message (Message) – The message that had its reactions cleared.

reactions (List[Reaction]) – The reactions that were removed.

discord.on_raw_reaction_clear(payload)
Called when a message has all its reactions removed. Unlike on_reaction_clear(), this is called regardless of the state of the internal message cache.

This requires Intents.reactions to be enabled.

PARAMETERS:
payload (RawReactionClearEvent) – The raw event payload data.

discord.on_reaction_clear_emoji(reaction)
Called when a message has a specific reaction removed from it. Similar to on_message_edit(), if the message is not found in the internal message cache, then this event will not be called. Consider using on_raw_reaction_clear_emoji() instead.

This requires Intents.reactions to be enabled.

New in version 1.3.

PARAMETERS:
reaction (Reaction) – The reaction that got cleared.

discord.on_raw_reaction_clear_emoji(payload)
Called when a message has a specific reaction removed from it. Unlike on_reaction_clear_emoji() this is called regardless of the state of the internal message cache.

This requires Intents.reactions to be enabled.

New in version 1.3.

PARAMETERS:
payload (RawReactionClearEmojiEvent) – The raw event payload data.

Scheduled Events
discord.on_scheduled_event_create(event)
Called when an ScheduledEvent is created.

This requires Intents.scheduled_events to be enabled.

PARAMETERS:
event (ScheduledEvent) – The newly created scheduled event.

discord.on_scheduled_event_update(before, after)
Called when a scheduled event is updated.

This requires Intents.scheduled_events to be enabled.

PARAMETERS:
before (ScheduledEvent) – The old scheduled event.

after (ScheduledEvent) – The updated scheduled event.

discord.on_scheduled_event_delete(event)
Called when a scheduled event is deleted.

This requires Intents.scheduled_events to be enabled.

PARAMETERS:
event (ScheduledEvent) – The deleted scheduled event.

discord.on_scheduled_event_user_add(event, member)
Called when a user subscribes to an event. If the member or event is not found in the internal cache, then this event will not be called. Consider using on_raw_scheduled_event_user_add() instead.

This requires Intents.scheduled_events to be enabled.

PARAMETERS:
event (ScheduledEvent) – The scheduled event subscribed to.

member (Member) – The member who subscribed.

discord.on_raw_scheduled_event_user_add(payload)
Called when a user subscribes to an event. Unlike on_scheduled_event_user_add(), this will be called regardless of the state of the internal cache.

This requires Intents.scheduled_events to be enabled.

PARAMETERS:
payload (RawScheduledEventSubscription) – The raw event payload data.

discord.on_scheduled_event_user_remove(event, member)
Called when a user unsubscribes to an event. If the member or event is not found in the internal cache, then this event will not be called. Consider using on_raw_scheduled_event_user_remove() instead.

This requires Intents.scheduled_events to be enabled.

PARAMETERS:
event (ScheduledEvent) – The scheduled event unsubscribed from.

member (Member) – The member who unsubscribed.

discord.on_raw_scheduled_event_user_remove(payload)
Called when a user unsubscribes to an event. Unlike on_scheduled_event_user_remove(), this will be called regardless of the state of the internal cache.

This requires Intents.scheduled_events to be enabled.

PARAMETERS:
payload (RawScheduledEventSubscription) – The raw event payload data.

Stage Instances
discord.on_stage_instance_create(stage_instance)
discord.on_stage_instance_delete(stage_instance)
Called when a StageInstance is created or deleted for a StageChannel.

New in version 2.0.

PARAMETERS:
stage_instance (StageInstance) – The stage instance that was created or deleted.

discord.on_stage_instance_update(before, after)
Called when a StageInstance is updated.

The following, but not limited to, examples illustrate when this event is called:

The topic is changed.

The privacy level is changed.

New in version 2.0.

PARAMETERS:
before (StageInstance) – The stage instance before the update.

after (StageInstance) – The stage instance after the update.

Threads
discord.on_thread_join(thread)
Called whenever a thread is joined.

Note that you can get the guild from Thread.guild.

This requires Intents.guilds to be enabled.

New in version 2.0.

PARAMETERS:
thread (Thread) – The thread that got joined.

discord.on_thread_create(thread)
Called whenever a thread is created.

Note that you can get the guild from Thread.guild.

This requires Intents.guilds to be enabled.

New in version 2.0.

PARAMETERS:
thread (Thread) – The thread that got created.

discord.on_thread_remove(thread)
Called whenever a thread is removed. This is different from a thread being deleted.

Note that you can get the guild from Thread.guild.

This requires Intents.guilds to be enabled.

Warning

Due to technical limitations, this event might not be called as soon as one expects. Since the library tracks thread membership locally, the API only sends updated thread membership status upon being synced by joining a thread.

New in version 2.0.

PARAMETERS:
thread (Thread) – The thread that got removed.

discord.on_thread_delete(thread)
Called whenever a thread is deleted. If the deleted thread isn’t found in internal cache then this will not be called. Archived threads are not in the cache. Consider using on_raw_thread_delete()

Note that you can get the guild from Thread.guild.

This requires Intents.guilds to be enabled.

New in version 2.0.

PARAMETERS:
thread (Thread) – The thread that got deleted.

discord.on_raw_thread_delete(payload)
Called whenever a thread is deleted. Unlike on_thread_delete() this is called regardless of the state of the internal cache.

PARAMETERS:
payload (RawThreadDeleteEvent) – The raw event payload data.

discord.on_thread_member_join(member)
discord.on_thread_member_remove(member)
Called when a ThreadMember leaves or joins a Thread.

You can get the thread a member belongs in by accessing ThreadMember.thread.

This requires Intents.members to be enabled.

New in version 2.0.

PARAMETERS:
member (ThreadMember) – The member who joined or left.

discord.on_thread_update(before, after)
Called whenever a thread is updated.

This requires Intents.guilds to be enabled.

New in version 2.0.

PARAMETERS:
before (Thread) – The updated thread’s old info.

after (Thread) – The updated thread’s new info.

Typing
discord.on_typing(channel, user, when)
Called when someone begins typing a message.

The channel parameter can be a abc.Messageable instance. Which could either be TextChannel, GroupChannel, or DMChannel.

If the channel is a TextChannel then the user parameter is a Member, otherwise it is a User.

This requires Intents.typing to be enabled.

PARAMETERS:
channel (abc.Messageable) – The location where the typing originated from.

user (Union[User, Member]) – The user that started typing.

when (datetime.datetime) – When the typing started as an aware datetime in UTC.

discord.on_raw_typing(payload)
Called when someone begins typing a message. Unlike on_typing(), this is called regardless if the user can be found in the bot’s cache or not.

If the typing event is occurring in a guild, the member that started typing can be accessed via RawTypingEvent.member

This requires Intents.typing to be enabled.

PARAMETERS:
payload (RawTypingEvent) – The raw typing payload.



Utility Functions
discord.utils.find(predicate, seq)[source]
A helper to return the first element found in the sequence that meets the predicate. For example:

member = discord.utils.find(lambda m: m.name == 'Mighty', channel.guild.members)
would find the first Member whose name is ‘Mighty’ and return it. If an entry is not found, then None is returned.

This is different from filter() due to the fact it stops the moment it finds a valid entry.

PARAMETERS:
predicate (Callable[[T], Any]) – A function that returns a boolean-like result.

seq (collections.abc.Iterable) – The iterable to search through.

RETURN TYPE:
T | None

discord.utils.get(iterable, **attrs)[source]
A helper that returns the first element in the iterable that meets all the traits passed in attrs. This is an alternative for find().

When multiple attributes are specified, they are checked using logical AND, not logical OR. Meaning they have to meet every attribute passed in and not one of them.

To have a nested attribute search (i.e. search by x.y) then pass in x__y as the keyword argument.

If nothing is found that matches the attributes passed, then None is returned.

EXAMPLES

Basic usage:

member = discord.utils.get(message.guild.members, name='Foo')
Multiple attribute matching:

channel = discord.utils.get(guild.voice_channels, name='Foo', bitrate=64000)
Nested attribute matching:

channel = discord.utils.get(client.get_all_channels(), guild__name='Cool', name='general')
PARAMETERS:
iterable (Iterable[T]) – An iterable to search through.

**attrs (Any) – Keyword arguments that denote attributes to search with.

RETURN TYPE:
T | None

await discord.utils.get_or_fetch(obj, attr, id, *, default=...)[source]
This function is a coroutine.

Attempts to get an attribute from the object in cache. If it fails, it will attempt to fetch it. If the fetch also fails, an error will be raised.

PARAMETERS:
obj (Any) – The object to use the get or fetch methods in

attr (str) – The attribute to get or fetch. Note the object must have both a get_ and fetch_ method for this attribute.

id (int) – The ID of the object

default (Any) – The default value to return if the object is not found, instead of raising an error.

RETURNS:
The object found or the default value.

RETURN TYPE:
Any

RAISES:
AttributeError – The object is missing a get_ or fetch_ method

NotFound – Invalid ID for the object

HTTPException – An error occurred fetching the object

Forbidden – You do not have permission to fetch the object

EXAMPLES

Getting a guild from a guild ID:

guild = await utils.get_or_fetch(client, 'guild', guild_id)
Getting a channel from the guild. If the channel is not found, return None:

channel = await utils.get_or_fetch(guild, 'channel', channel_id, default=None)
discord.utils.oauth_url(client_id, *, permissions=..., guild=..., redirect_uri=..., scopes=..., disable_guild_select=False)[source]
A helper function that returns the OAuth2 URL for inviting the bot into guilds.

PARAMETERS:
client_id (Union[int, str]) – The client ID for your bot.

permissions (Permissions) – The permissions you’re requesting. If not given then you won’t be requesting any permissions.

guild (Snowflake) – The guild to pre-select in the authorization screen, if available.

redirect_uri (str) – An optional valid redirect URI.

scopes (Iterable[str]) –

An optional valid list of scopes. Defaults to ('bot',).

New in version 1.7.

disable_guild_select (bool) –

Whether to disallow the user from changing the guild dropdown.

New in version 2.0.

RETURNS:
The OAuth2 URL for inviting the bot into guilds.

RETURN TYPE:
str

discord.utils.remove_markdown(text, *, ignore_links=True)[source]
A helper function that removes markdown characters.

New in version 1.7.

Note

This function is not markdown aware and may remove meaning from the original text. For example, if the input contains 10 * 5 then it will be converted into 10  5.

PARAMETERS:
text (str) – The text to remove markdown from.

ignore_links (bool) – Whether to leave links alone when removing markdown. For example, if a URL in the text contains characters such as _ then it will be left alone. Defaults to True.

RETURNS:
The text with the markdown special characters removed.

RETURN TYPE:
str

discord.utils.escape_markdown(text, *, as_needed=False, ignore_links=True)[source]
A helper function that escapes Discord’s markdown.

PARAMETERS:
text (str) – The text to escape markdown from.

as_needed (bool) – Whether to escape the markdown characters as needed. This means that it does not escape extraneous characters if it’s not necessary, e.g. **hello** is escaped into \*\*hello** instead of \*\*hello\*\*. Note however that this can open you up to some clever syntax abuse. Defaults to False.

ignore_links (bool) – Whether to leave links alone when escaping markdown. For example, if a URL in the text contains characters such as _ then it will be left alone. This option is not supported with as_needed. Defaults to True.

RETURNS:
The text with the markdown special characters escaped with a slash.

RETURN TYPE:
str

discord.utils.escape_mentions(text)[source]
A helper function that escapes everyone, here, role, and user mentions.

Note

This does not include channel mentions.

Note

For more granular control over what mentions should be escaped within messages, refer to the AllowedMentions class.

PARAMETERS:
text (str) – The text to escape mentions from.

RETURNS:
The text with the mentions removed.

RETURN TYPE:
str

discord.utils.raw_mentions(text)[source]
Returns a list of user IDs matching <@user_id> in the string.

New in version 2.2.

PARAMETERS:
text (str) – The string to get user mentions from.

RETURNS:
A list of user IDs found in the string.

RETURN TYPE:
List[int]

discord.utils.raw_channel_mentions(text)[source]
Returns a list of channel IDs matching <@#channel_id> in the string.

New in version 2.2.

PARAMETERS:
text (str) – The string to get channel mentions from.

RETURNS:
A list of channel IDs found in the string.

RETURN TYPE:
List[int]

discord.utils.raw_role_mentions(text)[source]
Returns a list of role IDs matching <@&role_id> in the string.

New in version 2.2.

PARAMETERS:
text (str) – The string to get role mentions from.

RETURNS:
A list of role IDs found in the string.

RETURN TYPE:
List[int]

discord.utils.resolve_invite(invite)[source]
Resolves an invite from a Invite, URL or code.

PARAMETERS:
invite (Union[Invite, str]) – The invite.

RETURNS:
The invite code.

RETURN TYPE:
str

discord.utils.resolve_template(code)[source]
Resolves a template code from a Template, URL or code.

New in version 1.4.

PARAMETERS:
code (Union[Template, str]) – The code.

RETURNS:
The template code.

RETURN TYPE:
str

await discord.utils.sleep_until(when, result=None)[source]
This function is a coroutine.

Sleep until a specified time.

If the time supplied is in the past this function will yield instantly.

New in version 1.3.

PARAMETERS:
when (datetime.datetime) – The timestamp in which to sleep until. If the datetime is naive then it is assumed to be local time.

result (Any) – If provided is returned to the caller when the coroutine completes.

RETURN TYPE:
T | None

discord.utils.utcnow()[source]
A helper function to return an aware UTC datetime representing the current time.

This should be preferred to datetime.datetime.utcnow() since it is an aware datetime, compared to the naive datetime in the standard library.

New in version 2.0.

RETURNS:
The current aware datetime in UTC.

RETURN TYPE:
datetime.datetime

discord.utils.snowflake_time(id)[source]
Converts a Discord snowflake ID to a UTC-aware datetime object.

PARAMETERS:
id (int) – The snowflake ID.

RETURNS:
An aware datetime in UTC representing the creation time of the snowflake.

RETURN TYPE:
datetime.datetime

discord.utils.parse_time(timestamp)[source]
A helper function to convert an ISO 8601 timestamp to a datetime object.

PARAMETERS:
timestamp (Optional[str]) – The timestamp to convert.

RETURNS:
The converted datetime object.

RETURN TYPE:
Optional[datetime.datetime]

discord.utils.format_dt(dt, /, style=None)[source]
A helper function to format a datetime.datetime for presentation within Discord.

This allows for a locale-independent way of presenting data using Discord specific Markdown.

Style

Example Output

Description

t

22:57

Short Time

T

22:57:58

Long Time

d

17/05/2016

Short Date

D

17 May 2016

Long Date

f (default)

17 May 2016 22:57

Short Date Time

F

Tuesday, 17 May 2016 22:57

Long Date Time

R

5 years ago

Relative Time

Note that the exact output depends on the user’s locale setting in the client. The example output presented is using the en-GB locale.

New in version 2.0.

PARAMETERS:
dt (datetime.datetime) – The datetime to format.

style (str) – The style to format the datetime with.

RETURNS:
The formatted string.

RETURN TYPE:
str

discord.utils.time_snowflake(dt, high=False)[source]
Returns a numeric snowflake pretending to be created at the given date.

When using as the lower end of a range, use time_snowflake(high=False) - 1 to be inclusive, high=True to be exclusive.

When using as the higher end of a range, use time_snowflake(high=True) + 1 to be inclusive, high=False to be exclusive

PARAMETERS:
dt (datetime.datetime) – A datetime object to convert to a snowflake. If naive, the timezone is assumed to be local time.

high (bool) – Whether to set the lower 22 bit to high or low.

RETURNS:
The snowflake representing the time given.

RETURN TYPE:
int

discord.utils.generate_snowflake(dt=None)[source]
Returns a numeric snowflake pretending to be created at the given date but more accurate and random than time_snowflake(). If dt is not passed, it makes one from the current time using utcnow.

PARAMETERS:
dt (datetime.datetime) – A datetime object to convert to a snowflake. If naive, the timezone is assumed to be local time.

RETURNS:
The snowflake representing the time given.

RETURN TYPE:
int

discord.utils.basic_autocomplete(values)[source]
A helper function to make a basic autocomplete for slash commands. This is a pretty standard autocomplete and will return any options that start with the value from the user, case-insensitive. If the values parameter is callable, it will be called with the AutocompleteContext.

This is meant to be passed into the discord.Option.autocomplete attribute.

PARAMETERS:
values (Union[Union[Iterable[OptionChoice], Iterable[str], Iterable[int], Iterable[float]], Callable[[AutocompleteContext], Union[Union[Iterable[str], Iterable[int], Iterable[float]], Awaitable[Union[Iterable[str], Iterable[int], Iterable[float]]]]], Awaitable[Union[Iterable[str], Iterable[int], Iterable[float]]]]) – Possible values for the option. Accepts an iterable of str, a callable (sync or async) that takes a single argument of AutocompleteContext, or a coroutine. Must resolve to an iterable of str.

RETURNS:
A wrapped callback for the autocomplete.

RETURN TYPE:
Callable[[AutocompleteContext], Awaitable[Union[Iterable[OptionChoice], Iterable[str], Iterable[int], Iterable[float]]]]

Note

Autocomplete cannot be used for options that have specified choices.

EXAMPLE

Option(str, "color", autocomplete=basic_autocomplete(("red", "green", "blue")))

# or

async def autocomplete(ctx):
    return "foo", "bar", "baz", ctx.interaction.user.name

Option(str, "name", autocomplete=basic_autocomplete(autocomplete))
New in version 2.0.

discord.utils.as_chunks(iterator, max_size)[source]
A helper function that collects an iterator into chunks of a given size.

New in version 2.0.

PARAMETERS:
iterator (Union[collections.abc.Iterator, collections.abc.AsyncIterator]) – The iterator to chunk, can be sync or async.

max_size (int) – The maximum chunk size.

warning:: (..) – The last chunk collected may not be as large as max_size.

RETURNS:
A new iterator which yields chunks of a given size.

RETURN TYPE:
Union[collections.abc.Iterator, collections.abc.AsyncIterator]

discord.utils.filter_params(params, **kwargs)[source]
A helper function to filter out and replace certain keyword parameters

PARAMETERS:
params (Dict[str, Any]) – The initial parameters to filter.

**kwargs (Dict[str, Optional[str]]) – Key to value pairs where the key’s contents would be moved to the value, or if the value is None, remove key’s contents (see code example).

EXAMPLE

params = {"param1": 12, "param2": 13}
filter_params(params, param1="param3", param2=None)
{'param3': 12}
# values of 'param1' is moved to 'param3'
# and values of 'param2' are completely removed.
discord.utils.warn_deprecated(name, instead=None, since=None, removed=None, reference=None)[source]
Warn about a deprecated function, with the ability to specify details about the deprecation. Emits a DeprecationWarning.

PARAMETERS:
name (str) – The name of the deprecated function.

instead (Optional[str]) – A recommended alternative to the function.

since (Optional[str]) – The version in which the function was deprecated. This should be in the format major.minor(.patch), where the patch version is optional.

removed (Optional[str]) – The version in which the function is planned to be removed. This should be in the format major.minor(.patch), where the patch version is optional.

reference (Optional[str]) – A reference that explains the deprecation, typically a URL to a page such as a changelog entry or a GitHub issue/PR.

RETURN TYPE:
None

discord.utils.deprecated(instead=None, since=None, removed=None, reference=None, *, use_qualname=True)[source]
A decorator implementation of warn_deprecated(). This will automatically call warn_deprecated() when the decorated function is called.

PARAMETERS:
instead (Optional[str]) – A recommended alternative to the function.

since (Optional[str]) – The version in which the function was deprecated. This should be in the format major.minor(.patch), where the patch version is optional.

removed (Optional[str]) – The version in which the function is planned to be removed. This should be in the format major.minor(.patch), where the patch version is optional.

reference (Optional[str]) – A reference that explains the deprecation, typically a URL to a page such as a changelog entry or a GitHub issue/PR.

use_qualname (bool) – Whether to use the qualified name of the function in the deprecation warning. If False, the short name of the function will be used instead. For example, __qualname__ will display as Client.login while __name__ will display as login. Defaults to True.

RETURN TYPE:
Callable[[Callable[[P], T]], Callable[[P], T]]




Enumerations
The API provides some enumerations for certain types of strings to avoid the API from being stringly typed in case the strings change in the future.

All enumerations are subclasses of an internal class which mimics the behaviour of enum.Enum.

class discord.SlashCommandOptionType[source]
Specifies the input type of an option.

New in version 2.0.

sub_command
A slash subcommand.

sub_command_group
A slash command group.

string
A string.

integer
An integer.

boolean
A boolean.

user
A user from the current channel. This will be converted to an instance of User in private channels, else Member

channel
A channel from the current guild.

role
A role from the current guild.

mentionable
A mentionable (user or role).

number
A floating number.

attachment
An attachment.

class discord.ChannelType[source]
Specifies the type of channel.

text
A text channel.

voice
A voice channel.

private
A private text channel. Also called a direct message.

group
A private group text channel.

category
A category channel.

news
A guild news channel.

stage_voice
A guild stage voice channel.

New in version 1.7.

news_thread
A news thread.

New in version 2.0.

public_thread
A public thread.

New in version 2.0.

private_thread
A private thread.

New in version 2.0.

directory
A guild directory entry, used in hub guilds, currently in experiment.

New in version 2.0.

forum
User can only write in threads, similar functionality to a forum.

New in version 2.0.

class discord.MessageType[source]
Specifies the type of Message. This is used to denote if a message is to be interpreted as a system message or a regular message.

x == y
Checks if two messages are equal.

x != y
Checks if two messages are not equal.

default
The default message type. This is the same as regular messages.

recipient_add
The system message when a user is added to a group private message or a thread.

recipient_remove
The system message when a user is removed from a group private message or a thread.

call
The system message denoting call state, e.g. missed call, started call, etc.

channel_name_change
The system message denoting that a channel’s name has been changed.

channel_icon_change
The system message denoting that a channel’s icon has been changed.

pins_add
The system message denoting that a pinned message has been added to a channel.

new_member
The system message denoting that a new member has joined a Guild.

premium_guild_subscription
The system message denoting that a member has “nitro boosted” a guild.

premium_guild_tier_1
The system message denoting that a member has “nitro boosted” a guild and it achieved level 1.

premium_guild_tier_2
The system message denoting that a member has “nitro boosted” a guild and it achieved level 2.

premium_guild_tier_3
The system message denoting that a member has “nitro boosted” a guild and it achieved level 3.

channel_follow_add
The system message denoting that an announcement channel has been followed.

New in version 1.3.

guild_stream
The system message denoting that a member is streaming in the guild.

New in version 1.7.

guild_discovery_disqualified
The system message denoting that the guild is no longer eligible for Server Discovery.

New in version 1.7.

guild_discovery_requalified
The system message denoting that the guild has become eligible again for Server Discovery.

New in version 1.7.

guild_discovery_grace_period_initial_warning
The system message denoting that the guild has failed to meet the Server Discovery requirements for one week.

New in version 1.7.

guild_discovery_grace_period_final_warning
The system message denoting that the guild has failed to meet the Server Discovery requirements for 3 weeks in a row.

New in version 1.7.

thread_created
The system message denoting that a thread has been created. This is only sent if the thread has been created from an older message. The period of time required for a message to be considered old cannot be relied upon and is up to Discord.

New in version 2.0.

reply
The system message denoting that the author is replying to a message.

New in version 2.0.

application_command
The system message denoting that an application (or “slash”) command was executed.

New in version 2.0.

guild_invite_reminder
The system message sent as a reminder to invite people to the guild.

New in version 2.0.

thread_starter_message
The system message denoting the message in the thread that is the one that started the thread’s conversation topic.

New in version 2.0.

context_menu_command
The system message denoting that an context menu command was executed.

New in version 2.0.

class discord.UserFlags[source]
Represents Discord User flags.

staff
The user is a Discord Employee.

partner
The user is a Discord Partner.

hypesquad
The user is a HypeSquad Events member.

bug_hunter
The user is a Bug Hunter.

mfa_sms
The user has SMS recovery for Multi Factor Authentication enabled.

premium_promo_dismissed
The user has dismissed the Discord Nitro promotion.

hypesquad_bravery
The user is a HypeSquad Bravery member.

hypesquad_brilliance
The user is a HypeSquad Brilliance member.

hypesquad_balance
The user is a HypeSquad Balance member.

early_supporter
The user is an Early Supporter.

team_user
The user is a Team User.

partner_or_verification_application
Relates to partner/verification applications.

system
The user is a system user (i.e. represents Discord officially).

has_unread_urgent_messages
The user has an unread system message.

bug_hunter_level_2
The user is a Bug Hunter Level 2.

underage_deleted
The user was deleted for being underage.

verified_bot
The user is a Verified Bot.

verified_bot_developer
The user is an Early Verified Bot Developer.

discord_certified_moderator
The user is a Discord Certified Moderator.

bot_http_interactions
The bot has set an interactions endpoint url.

spammer
The user is disabled for being a spammer.

active_developer
The user is an Active Developer.

class discord.ActivityType[source]
Specifies the type of Activity. This is used to check how to interpret the activity itself.

unknown
An unknown activity type. This should generally not happen.

playing
A “Playing” activity type.

streaming
A “Streaming” activity type.

listening
A “Listening” activity type.

watching
A “Watching” activity type.

custom
A custom activity type.

competing
A competing activity type.

New in version 1.5.

class discord.InteractionType[source]
Specifies the type of Interaction.

New in version 2.0.

ping
Represents Discord pinging to see if the interaction response server is alive.

application_command
Represents a slash command interaction.

component
Represents a component based interaction, i.e. using the Discord Bot UI Kit.

auto_complete
Represents a autocomplete interaction for slash commands.

modal_submit
Represents a modal based interaction.

class discord.InteractionResponseType[source]
Specifies the response type for the interaction.

New in version 2.0.

pong
Pongs the interaction when given a ping.

See also InteractionResponse.pong()

channel_message
Respond to the interaction with a message.

See also InteractionResponse.send_message()

deferred_channel_message
Responds to the interaction with a message at a later time.

See also InteractionResponse.defer()

deferred_message_update
Acknowledges the component interaction with a promise that the message will update later (though there is no need to actually update the message).

See also InteractionResponse.defer()

message_update
Responds to the interaction by editing the message.

See also InteractionResponse.edit_message()

auto_complete_result
Responds to the interaction by sending the autocomplete choices.

See also InteractionResponse.send_autocomplete_result()

modal
Responds to the interaction by sending a modal dialog.

See also InteractionResponse.send_modal()

class discord.ComponentType[source]
Represents the component type of a component.

New in version 2.0.

action_row
Represents the group component which holds different components in a row.

button
Represents a button component.

select
Represents a string select component.

Deprecated since version 2.3: Use ComponentType.string_select instead.

string_select
Represents a string select component.

input_text
Represents an input_text component.

user_select
Represents a user select component.

role_select
Represents a role select component.

mentionable_select
Represents a mentionable select component.

channel_select
Represents a channel select component.

class discord.ButtonStyle[source]
Represents the style of the button component.

New in version 2.0.

primary
Represents a blurple button for the primary action.

secondary
Represents a grey button for the secondary action.

success
Represents a green button for a successful action.

danger
Represents a red button for a dangerous action.

link
Represents a link button.

blurple
An alias for primary.

grey
An alias for secondary.

gray
An alias for secondary.

green
An alias for success.

red
An alias for danger.

url
An alias for link.

class discord.InputTextStyle[source]
Represents the style of the input text component.

New in version 2.0.

short
Represents a single-line input text field.

long
Represents a multi-line input text field.

singleline
An alias for short.

multiline
An alias for long.

paragraph
An alias for long.

class discord.VoiceRegion[source]
Specifies the region a voice server belongs to.

amsterdam
The Amsterdam region.

brazil
The Brazil region.

dubai
The Dubai region.

New in version 1.3.

eu_central
The EU Central region.

eu_west
The EU West region.

europe
The Europe region.

New in version 1.3.

frankfurt
The Frankfurt region.

hongkong
The Hong Kong region.

india
The India region.

New in version 1.2.

japan
The Japan region.

london
The London region.

russia
The Russia region.

singapore
The Singapore region.

southafrica
The South Africa region.

south_korea
The South Korea region.

sydney
The Sydney region.

us_central
The US Central region.

us_east
The US East region.

us_south
The US South region.

us_west
The US West region.

vip_amsterdam
The Amsterdam region for VIP guilds.

vip_us_east
The US East region for VIP guilds.

vip_us_west
The US West region for VIP guilds.

class discord.VerificationLevel[source]
Specifies a Guild's verification level, which is the criteria in which a member must meet before being able to send messages to the guild.

New in version 2.0.

x == y
Checks if two verification levels are equal.

x != y
Checks if two verification levels are not equal.

x > y
Checks if a verification level is higher than another.

x < y
Checks if a verification level is lower than another.

x >= y
Checks if a verification level is higher or equal to another.

x <= y
Checks if a verification level is lower or equal to another.

none
No criteria set.

low
Member must have a verified email on their Discord account.

medium
Member must have a verified email and be registered on Discord for more than five minutes.

high
Member must have a verified email, be registered on Discord for more than five minutes, and be a member of the guild itself for more than ten minutes.

highest
Member must have a verified phone on their Discord account.

class discord.NotificationLevel[source]
Specifies whether a Guild has notifications on for all messages or mentions only by default.

New in version 2.0.

x == y
Checks if two notification levels are equal.

x != y
Checks if two notification levels are not equal.

x > y
Checks if a notification level is higher than another.

x < y
Checks if a notification level is lower than another.

x >= y
Checks if a notification level is higher or equal to another.

x <= y
Checks if a notification level is lower or equal to another.

all_messages
Members receive notifications for every message regardless of them being mentioned.

only_mentions
Members receive notifications for messages they are mentioned in.

class discord.ContentFilter[source]
Specifies a Guild's explicit content filter, which is the machine learning algorithms that Discord uses to detect if an image contains pornography or otherwise explicit content.

New in version 2.0.

x == y
Checks if two content filter levels are equal.

x != y
Checks if two content filter levels are not equal.

x > y
Checks if a content filter level is higher than another.

x < y
Checks if a content filter level is lower than another.

x >= y
Checks if a content filter level is higher or equal to another.

x <= y
Checks if a content filter level is lower or equal to another.

disabled
The guild does not have the content filter enabled.

no_role
The guild has the content filter enabled for members without a role.

all_members
The guild has the content filter enabled for every member.

class discord.Status[source]
Specifies a Member ‘s status.

online
The member is online.

offline
The member is offline.

idle
The member is idle.

dnd
The member is “Do Not Disturb”.

do_not_disturb
An alias for dnd.

invisible
The member is “invisible”. In reality, this is only used in sending a presence a la Client.change_presence(). When you receive a user’s presence this will be offline instead.

streaming
The member is streaming.

class discord.AuditLogAction[source]
Represents the type of action being done for a AuditLogEntry, which is retrievable via Guild.audit_logs().

guild_update
The guild has updated. Things that trigger this include:

Changing the guild vanity URL

Changing the guild invite splash

Changing the guild AFK channel or timeout

Changing the guild voice server region

Changing the guild icon, banner, or discovery splash

Changing the guild moderation settings

Changing things related to the guild widget

When this is the action, the type of target is the Guild.

Possible attributes for AuditLogDiff:

afk_channel

system_channel

afk_timeout

default_message_notifications

explicit_content_filter

mfa_level

name

owner

splash

discovery_splash

icon

banner

vanity_url_code

channel_create
A new channel was created.

When this is the action, the type of target is either a abc.GuildChannel or Object with an ID.

A more filled out object in the Object case can be found by using after.

Possible attributes for AuditLogDiff:

name

type

overwrites

channel_update
A channel was updated. Things that trigger this include:

The channel name or topic was changed

The channel bitrate was changed

When this is the action, the type of target is the abc.GuildChannel or Object with an ID.

A more filled out object in the Object case can be found by using after or before.

Possible attributes for AuditLogDiff:

name

type

position

overwrites

topic

bitrate

rtc_region

video_quality_mode

default_auto_archive_duration

channel_delete
A channel was deleted.

When this is the action, the type of target is an Object with an ID.

A more filled out object can be found by using the before object.

Possible attributes for AuditLogDiff:

name

type

overwrites

overwrite_create
A channel permission overwrite was created.

When this is the action, the type of target is the abc.GuildChannel or Object with an ID.

When this is the action, the type of extra is either a Role or Member. If the object is not found then it is a Object with an ID being filled, a name, and a type attribute set to either 'role' or 'member' to help dictate what type of ID it is.

Possible attributes for AuditLogDiff:

deny

allow

id

type

overwrite_update
A channel permission overwrite was changed, this is typically when the permission values change.

See overwrite_create for more information on how the target and extra fields are set.

Possible attributes for AuditLogDiff:

deny

allow

id

type

overwrite_delete
A channel permission overwrite was deleted.

See overwrite_create for more information on how the target and extra fields are set.

Possible attributes for AuditLogDiff:

deny

allow

id

type

kick
A member was kicked.

When this is the action, the type of target is the User who got kicked.

When this is the action, changes is empty.

member_prune
A member prune was triggered.

When this is the action, the type of target is set to None.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

delete_members_days: An integer specifying how far the prune was.

members_removed: An integer specifying how many members were removed.

When this is the action, changes is empty.

ban
A member was banned.

When this is the action, the type of target is the User who got banned.

When this is the action, changes is empty.

unban
A member was unbanned.

When this is the action, the type of target is the User who got unbanned.

When this is the action, changes is empty.

member_update
A member has updated. This triggers in the following situations:

A nickname was changed

They were server muted or deafened (or it was undone)

When this is the action, the type of target is the Member or User who got updated.

Possible attributes for AuditLogDiff:

nick

mute

deaf

member_role_update
A member’s role has been updated. This triggers when a member either gains a role or loses a role.

When this is the action, the type of target is the Member or User who got the role.

Possible attributes for AuditLogDiff:

roles

member_move
A member’s voice channel has been updated. This triggers when a member is moved to a different voice channel.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

channel: A TextChannel or Object with the channel ID where the members were moved.

count: An integer specifying how many members were moved.

New in version 1.3.

member_disconnect
A member’s voice state has changed. This triggers when a member is force disconnected from voice.

When this is the action, the type of extra is set to an unspecified proxy object with one attribute:

count: An integer specifying how many members were disconnected.

New in version 1.3.

bot_add
A bot was added to the guild.

When this is the action, the type of target is the Member or User which was added to the guild.

New in version 1.3.

role_create
A new role was created.

When this is the action, the type of target is the Role or a Object with the ID.

Possible attributes for AuditLogDiff:

colour

mentionable

hoist

name

permissions

role_update
A role was updated. This triggers in the following situations:

The name has changed

The permissions have changed

The colour has changed

Its hoist/mentionable state has changed

When this is the action, the type of target is the Role or a Object with the ID.

Possible attributes for AuditLogDiff:

colour

mentionable

hoist

name

permissions

role_delete
A role was deleted.

When this is the action, the type of target is the Role or a Object with the ID.

Possible attributes for AuditLogDiff:

colour

mentionable

hoist

name

permissions

invite_create
An invite was created.

When this is the action, the type of target is the Invite that was created.

Possible attributes for AuditLogDiff:

max_age

code

temporary

inviter

channel

uses

max_uses

invite_update
An invite was updated.

When this is the action, the type of target is the Invite that was updated.

invite_delete
An invite was deleted.

When this is the action, the type of target is the Invite that was deleted.

Possible attributes for AuditLogDiff:

max_age

code

temporary

inviter

channel

uses

max_uses

webhook_create
A webhook was created.

When this is the action, the type of target is the Object with the webhook ID.

Possible attributes for AuditLogDiff:

channel

name

type (always set to 1 if so)

webhook_update
A webhook was updated. This trigger in the following situations:

The webhook name changed

The webhook channel changed

When this is the action, the type of target is the Object with the webhook ID.

Possible attributes for AuditLogDiff:

channel

name

avatar

webhook_delete
A webhook was deleted.

When this is the action, the type of target is the Object with the webhook ID.

Possible attributes for AuditLogDiff:

channel

name

type (always set to 1 if so)

emoji_create
An emoji was created.

When this is the action, the type of target is the Emoji or Object with the emoji ID.

Possible attributes for AuditLogDiff:

name

emoji_update
An emoji was updated. This triggers when the name has changed.

When this is the action, the type of target is the Emoji or Object with the emoji ID.

Possible attributes for AuditLogDiff:

name

emoji_delete
An emoji was deleted.

When this is the action, the type of target is the Object with the emoji ID.

Possible attributes for AuditLogDiff:

name

message_delete
A message was deleted by a moderator. Note that this only triggers if the message was deleted by someone other than the author.

When this is the action, the type of target is the Member or User who had their message deleted.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

count: An integer specifying how many messages were deleted.

channel: A TextChannel or Object with the channel ID where the message got deleted.

message_bulk_delete
Messages were bulk deleted by a moderator.

When this is the action, the type of target is the TextChannel or Object with the ID of the channel that was purged.

When this is the action, the type of extra is set to an unspecified proxy object with one attribute:

count: An integer specifying how many messages were deleted.

New in version 1.3.

message_pin
A message was pinned in a channel.

When this is the action, the type of target is the Member or User who had their message pinned.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

channel: A TextChannel or Object with the channel ID where the message was pinned.

message_id: the ID of the message which was pinned.

New in version 1.3.

message_unpin
A message was unpinned in a channel.

When this is the action, the type of target is the Member or User who had their message unpinned.

When this is the action, the type of extra is set to an unspecified proxy object with two attributes:

channel: A TextChannel or Object with the channel ID where the message was unpinned.

message_id: the ID of the message which was unpinned.

New in version 1.3.

integration_create
A guild integration was created.

When this is the action, the type of target is the Object with the integration ID of the integration which was created.

New in version 1.3.

integration_update
A guild integration was updated.

When this is the action, the type of target is the Object with the integration ID of the integration which was updated.

New in version 1.3.

integration_delete
A guild integration was deleted.

When this is the action, the type of target is the Object with the integration ID of the integration which was deleted.

New in version 1.3.

stage_instance_create
A stage instance was started.

When this is the action, the type of target is the StageInstance or Object with the ID of the stage instance which was created.

Possible attributes for AuditLogDiff:

topic

privacy_level

New in version 2.0.

stage_instance_update
A stage instance was updated.

When this is the action, the type of target is the StageInstance or Object with the ID of the stage instance which was updated.

Possible attributes for AuditLogDiff:

topic

privacy_level

New in version 2.0.

stage_instance_delete
A stage instance was ended.

New in version 2.0.

sticker_create
A sticker was created.

When this is the action, the type of target is the GuildSticker or Object with the ID of the sticker which was updated.

Possible attributes for AuditLogDiff:

name

emoji

type

format_type

description

available

New in version 2.0.

sticker_update
A sticker was updated.

When this is the action, the type of target is the GuildSticker or Object with the ID of the sticker which was updated.

Possible attributes for AuditLogDiff:

name

emoji

type

format_type

description

available

New in version 2.0.

sticker_delete
A sticker was deleted.

When this is the action, the type of target is the GuildSticker or Object with the ID of the sticker which was updated.

Possible attributes for AuditLogDiff:

name

emoji

type

format_type

description

available

New in version 2.0.

scheduled_event_create
A scheduled event was created.

When this is the action, the type of target is the ScheduledEvent or Object with the ID of the thread which was deleted.

Possible attributes for AuditLogDiff:

name

description

channel

privacy_level

location

status

type

New in version 2.0.

scheduled_event_update
A scheduled event was updated.

When this is the action, the type of target is the ScheduledEvent or Object with the ID of the thread which was deleted.

Possible attributes for AuditLogDiff:

name

description

channel

privacy_level

location

status

type

New in version 2.0.

scheduled_event_delete
A scheduled event was deleted.

When this is the action, the type of target is the ScheduledEvent or Object with the ID of the thread which was deleted.

Possible attributes for AuditLogDiff:

name

description

channel

privacy_level

location

status

type

New in version 2.0.

thread_create
A thread was created.

When this is the action, the type of target is the Thread or Object with the ID of the thread which was created.

Possible attributes for AuditLogDiff:

name

archived

locked

auto_archive_duration

invitable

New in version 2.0.

thread_update
A thread was updated.

When this is the action, the type of target is the Thread or Object with the ID of the thread which was updated.

Possible attributes for AuditLogDiff:

name

archived

locked

auto_archive_duration

invitable

New in version 2.0.

thread_delete
A thread was deleted.

When this is the action, the type of target is the Thread or Object with the ID of the thread which was deleted.

Possible attributes for AuditLogDiff:

name

archived

locked

auto_archive_duration

invitable

New in version 2.0.

application_command_permission_update
An application command’s permissions were updated.

When this is the action, the type of target is an Object with the ID of the command that had it’s permissions edited.

Possible attributes for AuditLogDiff:

command_id

New in version 2.0.

class discord.AuditLogActionCategory[source]
Represents the category that the AuditLogAction belongs to.

This can be retrieved via AuditLogEntry.category.

create
The action is the creation of something.

delete
The action is the deletion of something.

update
The action is the update of something.

class discord.TeamMembershipState[source]
Represents the membership state of a team member retrieved through Client.application_info().

New in version 1.3.

invited
Represents an invited member.

accepted
Represents a member currently in the team.

class discord.WebhookType[source]
Represents the type of webhook that can be received.

New in version 1.3.

incoming
Represents a webhook that can post messages to channels with a token.

channel_follower
Represents a webhook that is internally managed by Discord, used for following channels.

application
Represents a webhook that is used for interactions or applications.

New in version 2.0.

class discord.ExpireBehaviour[source]
Represents the behaviour the Integration should perform when a user’s subscription has finished.

There is an alias for this called ExpireBehavior.

New in version 1.4.

remove_role
This will remove the StreamIntegration.role from the user when their subscription is finished.

kick
This will kick the user when their subscription is finished.

class discord.DefaultAvatar[source]
Represents the default avatar of a Discord User

blurple
Represents the default avatar with the color blurple. See also Colour.blurple

grey
Represents the default avatar with the color grey. See also Colour.greyple

gray
An alias for grey.

green
Represents the default avatar with the color green. See also Colour.green

orange
Represents the default avatar with the color orange. See also Colour.orange

red
Represents the default avatar with the color red. See also Colour.red

class discord.StickerType[source]
Represents the type of sticker.

New in version 2.0.

standard
Represents a standard sticker that all Nitro users can use.

guild
Represents a custom sticker created in a guild.

class discord.StickerFormatType[source]
Represents the type of sticker images.

New in version 1.6.

png
Represents a sticker with a png image.

apng
Represents a sticker with an apng image.

lottie
Represents a sticker with a lottie image.

class discord.InviteTarget[source]
Represents the invite type for voice channel invites.

New in version 2.0.

unknown
The invite doesn’t target anyone or anything.

stream
A stream invite that targets a user.

embedded_application
A invite that targets an embedded application.

Note that your bot won’t be verified if you provide users access to this

class discord.VideoQualityMode[source]
Represents the camera video quality mode for voice channel participants.

New in version 2.0.

auto
Represents auto camera video quality.

full
Represents full camera video quality.

class discord.StagePrivacyLevel[source]
Represents a stage instance’s privacy level. Stage event privacy levels can only have 1 possible value at the moment so this shouldn’t really be used.

New in version 2.0.

closed
The stage instance can only be joined by members of the guild.

guild_only
Alias for closed

class discord.NSFWLevel[source]
Represents the NSFW level of a guild.

New in version 2.0.

x == y
Checks if two NSFW levels are equal.

x != y
Checks if two NSFW levels are not equal.

x > y
Checks if a NSFW level is higher than another.

x < y
Checks if a NSFW level is lower than another.

x >= y
Checks if a NSFW level is higher or equal to another.

x <= y
Checks if a NSFW level is lower or equal to another.

default
The guild has not been categorised yet.

explicit
The guild contains NSFW content.

safe
The guild does not contain any NSFW content.

age_restricted
The guild may contain NSFW content.

class discord.EmbeddedActivity[source]
Represents an embedded activity application.

Some might be boost-only or gated.

Warning

Discord said that they won’t verify bots who gives access to embedded activities.

Read more here: https://discord.com/channels/613425648685547541/697236247739105340/901153332075315321.

New in version 2.0.

awkword
Represents the embedded application Awkword.

betrayal
Represents the embedded application Betrayal.io

checkers_in_the_park
Represents the embedded application Checkers in the Park Prod.

checkers_in_the_park_dev
Represents the embedded application Checkers in the Park Development.

checkers_in_the_park_staging
Represents the embedded application Checkers in the Park Staging.

checkers_in_the_park_qa
Represents the embedded application Checkers in the Park QA.

chess_in_the_park
Represents the embedded application Chess in the Park.

chess_in_the_park_dev
Represents the embedded application Chess in the Park Development.

chest_in_the_park_staging
Represents the embedded application Chess in the Park Staging.

chest_in_the_park_qa
Represents the embedded application Chess in the Park QA.

doodle_crew
Represents the embedded application Doodle Crew.

fishington
Represents the embedded application Fishington.io

letter_tile
Represents the embedded application Letter Tile.

ocho
Represents the embedded application Ocho.

ocho_dev
Represents the embedded application Ocho Development.

ocho_staging
Represents the embedded application Ocho Staging.

ocho_qa
Represents the embedded application Ocho QA.

poker_night_staging
Represents the embedded application Poker Night Staging.

poker_night
Represents the embedded application Poker Night.

poker_night_qa
Represents the embedded application Poker QA.

putts
Represents the embedded application Putts.

sketchy_artist
Represents the embedded application Sketchy Artist.

sketchy_artist_dev
Represents the embedded application Sketchy Artist development version.

spell_cast
Represents the embedded application Spell Cast.

watch_together
Same as youtube_together with remote feature which allows guild admins to limit the playlist access.

watch_together_dev
Development version of watch_together.

word_snacks
Represents the embedded application word snacks.

word_snacks_dev
Represents the embedded application word snacks. This is development version of word_snacks

youtube_together
Represents the embedded application Youtube Together.

class discord.ScheduledEventStatus[source]
Represents the status of a scheduled event.

New in version 2.0.

scheduled
The scheduled event hasn’t started or been canceled yet.

active
The scheduled event is in progress.

completed
The scheduled event is over.

canceled
The scheduled event has been canceled before it can start.

cancelled
Alias to canceled.

class discord.ScheduledEventLocationType[source]
Represents a scheduled event location type (otherwise known as the entity type on the API).

New in version 2.0.

stage_instance
Represents a scheduled event that is happening in a StageChannel.

voice
Represents a scheduled event that is happening in a VoiceChannel.

external
Represents a generic location as a str.

class discord.ScheduledEventPrivacyLevel[source]
Represents the privacy level of a scheduled event. Scheduled event privacy levels can only have 1 possible value at the moment so this shouldn’t really be used.

guild_only
Represents a scheduled event that is only available to members inside the guild.



Async Iterator
Some API functions return an “async iterator”. An async iterator is something that is capable of being used in an async for statement.

These async iterators can be used as follows:

async for elem in channel.history():
    # do stuff with elem here
Certain utilities make working with async iterators easier, detailed below.

class discord.AsyncIterator
Represents the “AsyncIterator” concept. Note that no such class exists, it is purely abstract.

async for x in y
Iterates over the contents of the async iterator.

await next()
This function is a coroutine.

Advances the iterator by one, if possible. If no more items are found then this raises NoMoreItems.

await get(**attrs)
This function is a coroutine.

Similar to utils.get() except run over the async iterator.

Getting the last message by a user named ‘Dave’ or None:

msg = await channel.history().get(author__name='Dave')
await find(predicate)
This function is a coroutine.

Similar to utils.find() except run over the async iterator.

Unlike utils.find(), the predicate provided can be a coroutine.

Getting the last audit log with a reason or None:

def predicate(event):
    return event.reason is not None

event = await guild.audit_logs().find(predicate)
PARAMETERS:
predicate – The predicate to use. Could be a coroutine.

RETURNS:
The first element that returns True for the predicate or None.

await flatten()
This function is a coroutine.

Flattens the async iterator into a list with all the elements.

RETURNS:
A list of every element in the async iterator.

RETURN TYPE:
list

chunk(max_size)
Collects items into chunks of up to a given maximum size. Another AsyncIterator is returned which collects items into lists of a given size. The maximum chunk size must be a positive integer.

New in version 1.6.

Collecting groups of users:

async for leader, *users in reaction.users().chunk(3):
    ...
Warning

The last chunk collected may not be as large as max_size.

PARAMETERS:
max_size – The size of individual chunks.

RETURN TYPE:
AsyncIterator

map(func)
This is similar to the built-in map function. Another AsyncIterator is returned that executes the function on every element it is iterating over. This function can either be a regular function or a coroutine.

Creating a content iterator:

def transform(message):
    return message.content

async for content in channel.history().map(transform):
    message_length = len(content)
PARAMETERS:
func – The function to call on every element. Could be a coroutine.

RETURN TYPE:
AsyncIterator

filter(predicate)
This is similar to the built-in filter function. Another AsyncIterator is returned that filters over the original async iterator. This predicate can be a regular function or a coroutine.

Getting messages by non-bot accounts:

def predicate(message):
    return not message.author.bot

async for elem in channel.history().filter(predicate):
    ...
PARAMETERS:
predicate – The predicate to call on every element. Could be a coroutine.

RETURN TYPE:
AsyncIterator




Audit Log Data
Working with Guild.audit_logs() is a complicated process with a lot of machinery involved. The library attempts to make it easy to use and friendly. In order to accomplish this goal, it must make use of a couple of data classes that aid in this goal.

class discord.AuditLogEntry(*, users, data, guild)[source]
Attributes
action
after
before
category
changes
created_at
extra
id
reason
target
user
Represents an Audit Log entry.

You retrieve these via Guild.audit_logs().

x == y
Checks if two entries are equal.

x != y
Checks if two entries are not equal.

hash(x)
Returns the entry’s hash.

Changed in version 1.7: Audit log entries are now comparable and hashable.

action
The action that was done.

TYPE:
AuditLogAction

user
The user who initiated this action. Usually a Member, unless gone then it’s a User.

TYPE:
abc.User

id
The entry ID.

TYPE:
int

target
The target that got changed. The exact type of this depends on the action being done.

TYPE:
Any

reason
The reason this action was done.

TYPE:
Optional[str]

extra
Extra information that this entry has that might be useful. For most actions, this is None. However, in some cases it contains extra information. See AuditLogAction for which actions have this field filled out.

TYPE:
Any

created_at
Returns the entry’s creation time in UTC.

category
The category of the action, if applicable.

changes
The list of changes this entry has.

before
The target’s prior state.

after
The target’s subsequent state.

class discord.AuditLogChanges[source]
Attributes
after
before
An audit log change set.

before
The old value. The attribute has the type of AuditLogDiff.

Depending on the AuditLogActionCategory retrieved by category, the data retrieved by this attribute differs:

Category

Description

create

All attributes are set to None.

delete

All attributes are set the value before deletion.

update

All attributes are set the value before updating.

None

No attributes are set.

after
The new value. The attribute has the type of AuditLogDiff.

Depending on the AuditLogActionCategory retrieved by category, the data retrieved by this attribute differs:

Category

Description

create

All attributes are set to the created value

delete

All attributes are set to None

update

All attributes are set the value after updating.

None

No attributes are set.

class discord.AuditLogDiff[source]
Attributes
afk_channel
afk_timeout
allow
archived
auto_archive_duration
available
avatar
banner
bitrate
channel
code
color
colour
command_id
deaf
default_auto_archive_duration
default_message_notifications
default_notifications
deny
description
discovery_splash
emoji
explicit_content_filter
format_type
hoist
icon
id
invitable
inviter
locked
max_age
max_uses
mentionable
mfa_level
mute
name
nick
overwrites
owner
permissions
position
privacy_level
public_updates_channel
roles
rtc_region
rules_channel
slowmode_delay
splash
system_channel
temporary
topic
type
uses
vanity_url_code
verification_level
video_quality_mode
widget_channel
widget_enabled
Represents an audit log “change” object. A change object has dynamic attributes that depend on the type of action being done. Certain actions map to certain attributes being set.

Note that accessing an attribute that does not match the specified action will lead to an attribute error.

To get a list of attributes that have been set, you can iterate over them. To see a list of all possible attributes that could be set based on the action being done, check the documentation for AuditLogAction, otherwise check the documentation below for all attributes that are possible.

iter(diff)
Returns an iterator over (attribute, value) tuple of this diff.

name
A name of something.

TYPE:
str

icon
A guild’s icon. See also Guild.icon.

TYPE:
Asset

splash
The guild’s invite splash. See also Guild.splash.

TYPE:
Asset

discovery_splash
The guild’s discovery splash. See also Guild.discovery_splash.

TYPE:
Asset

banner
The guild’s banner. See also Guild.banner.

TYPE:
Asset

owner
The guild’s owner. See also Guild.owner

TYPE:
Union[Member, User]

afk_channel
The guild’s AFK channel.

If this could not be found, then it falls back to a Object with the ID being set.

See Guild.afk_channel.

TYPE:
Union[VoiceChannel, Object]

system_channel
The guild’s system channel.

If this could not be found, then it falls back to a Object with the ID being set.

See Guild.system_channel.

TYPE:
Union[TextChannel, Object]

rules_channel
The guild’s rules channel.

If this could not be found then it falls back to a Object with the ID being set.

See Guild.rules_channel.

TYPE:
Union[TextChannel, Object]

public_updates_channel
The guild’s public updates channel.

If this could not be found then it falls back to a Object with the ID being set.

See Guild.public_updates_channel.

TYPE:
Union[TextChannel, Object]

afk_timeout
The guild’s AFK timeout. See Guild.afk_timeout.

TYPE:
int

mfa_level
The guild’s MFA level. See Guild.mfa_level.

TYPE:
int

widget_enabled
The guild’s widget has been enabled or disabled.

TYPE:
bool

widget_channel
The widget’s channel.

If this could not be found then it falls back to a Object with the ID being set.

TYPE:
Union[TextChannel, Object]

verification_level
The guild’s verification level.

See also Guild.verification_level.

TYPE:
VerificationLevel

default_notifications
The guild’s default notification level.

See also Guild.default_notifications.

TYPE:
NotificationLevel

explicit_content_filter
The guild’s content filter.

See also Guild.explicit_content_filter.

TYPE:
ContentFilter

default_message_notifications
The guild’s default message notification setting.

TYPE:
int

vanity_url_code
The guild’s vanity URL.

See also Guild.vanity_invite() and Guild.edit().

TYPE:
str

position
The position of a Role or abc.GuildChannel.

TYPE:
int

type
The type of channel or sticker.

TYPE:
Union[ChannelType, StickerType]

topic
The topic of a TextChannel or StageChannel.

See also TextChannel.topic or StageChannel.topic.

TYPE:
str

bitrate
The bitrate of a VoiceChannel.

See also VoiceChannel.bitrate.

TYPE:
int

overwrites
A list of permission overwrite tuples that represents a target and a PermissionOverwrite for said target.

The first element is the object being targeted, which can either be a Member or User or Role. If this object is not found then it is a Object with an ID being filled and a type attribute set to either 'role' or 'member' to help decide what type of ID it is.

TYPE:
List[Tuple[target, PermissionOverwrite]]

privacy_level
The privacy level of the stage instance or scheduled event.

TYPE:
Union[StagePrivacyLevel, ScheduledEventPrivacyLevel]

roles
A list of roles being added or removed from a member.

If a role is not found then it is a Object with the ID and name being filled in.

TYPE:
List[Union[Role, Object]]

nick
The nickname of a member.

See also Member.nick

TYPE:
Optional[str]

deaf
Whether the member is being server deafened.

See also VoiceState.deaf.

TYPE:
bool

mute
Whether the member is being server muted.

See also VoiceState.mute.

TYPE:
bool

permissions
The permissions of a role.

See also Role.permissions.

TYPE:
Permissions

colour
color
The colour of a role.

See also Role.colour

TYPE:
Colour

hoist
Whether the role is being hoisted or not.

See also Role.hoist

TYPE:
bool

mentionable
Whether the role is mentionable or not.

See also Role.mentionable

TYPE:
bool

code
The invite’s code.

See also Invite.code

TYPE:
str

channel
A guild channel.

If the channel is not found then it is a Object with the ID being set. In some cases the channel name is also set.

TYPE:
Union[abc.GuildChannel, Object]

inviter
The user who created the invite.

See also Invite.inviter.

TYPE:
Optional[User]

max_uses
The invite’s max uses.

See also Invite.max_uses.

TYPE:
int

uses
The invite’s current uses.

See also Invite.uses.

TYPE:
int

max_age
The invite’s max age in seconds.

See also Invite.max_age.

TYPE:
int

temporary
If the invite is a temporary invite.

See also Invite.temporary.

TYPE:
bool

allow
deny
The permissions being allowed or denied.

TYPE:
Permissions

id
The ID of the object being changed.

TYPE:
int

avatar
The avatar of a member.

See also User.avatar.

TYPE:
Asset

slowmode_delay
The number of seconds members have to wait before sending another message in the channel.

See also TextChannel.slowmode_delay.

TYPE:
int

rtc_region
The region for the voice channel’s voice communication. A value of None indicates automatic voice region detection.

See also VoiceChannel.rtc_region.

TYPE:
VoiceRegion

video_quality_mode
The camera video quality for the voice channel’s participants.

See also VoiceChannel.video_quality_mode.

TYPE:
VideoQualityMode

format_type
The format type of a sticker being changed.

See also GuildSticker.format

TYPE:
StickerFormatType

emoji
The name of the emoji that represents a sticker being changed.

See also GuildSticker.emoji

TYPE:
str

description
The description of a sticker being changed.

See also GuildSticker.description

TYPE:
str

available
The availability of a sticker being changed.

See also GuildSticker.available

TYPE:
bool

archived
The thread is now archived.

TYPE:
bool

locked
The thread is being locked or unlocked.

TYPE:
bool

auto_archive_duration
The thread’s auto archive duration being changed.

See also Thread.auto_archive_duration

TYPE:
int

default_auto_archive_duration
The default auto archive duration for newly created threads being changed.

TYPE:
int

invitable
Non-moderators can now add other non-moderators to this thread.

TYPE:
bool

command_id
This command’s permissions were updated.

TYPE:
int




Webhook Support
Pycord offers support for creating, editing, and executing webhooks through the Webhook class.

class discord.Webhook(data, session, proxy=None, proxy_auth=None, token=None, state=None)[source]
Attributes
avatar
channel
channel_id
created_at
guild
guild_id
id
name
source_channel
source_guild
token
type
url
user
Methods
Webhook.from_url
Webhook.partial
delete
delete_message
edit
edit_message
fetch
fetch_message
is_authenticated
is_partial
send
Represents an asynchronous Discord webhook.

Webhooks are a form to send messages to channels in Discord without a bot user or authentication.

There are two main ways to use Webhooks. The first is through the ones received by the library such as Guild.webhooks() and TextChannel.webhooks(). The ones received by the library will automatically be bound using the library’s internal HTTP session.

The second form involves creating a webhook object manually using the from_url() or partial() classmethods.

For example, creating a webhook from a URL and using aiohttp:

from discord import Webhook
import aiohttp

async def foo():
    async with aiohttp.ClientSession() as session:
        webhook = Webhook.from_url('url-here', session=session)
        await webhook.send('Hello World', username='Foo')
For a synchronous counterpart, see SyncWebhook.

x == y
Checks if two webhooks are equal.

x != y
Checks if two webhooks are not equal.

hash(x)
Returns the webhook’s hash.

Changed in version 1.4: Webhooks are now comparable and hashable.

id
The webhook’s ID

TYPE:
int

type
The type of the webhook.

New in version 1.3.

TYPE:
WebhookType

token
The authentication token of the webhook. If this is None then the webhook cannot be used to make requests.

TYPE:
Optional[str]

guild_id
The guild ID this webhook is for.

TYPE:
Optional[int]

channel_id
The channel ID this webhook is for.

TYPE:
Optional[int]

user
The user this webhook was created by. If the webhook was received without authentication then this will be None.

TYPE:
Optional[abc.User]

name
The default name of the webhook.

TYPE:
Optional[str]

source_guild
The guild of the channel that this webhook is following. Only given if type is WebhookType.channel_follower.

New in version 2.0.

TYPE:
Optional[PartialWebhookGuild]

source_channel
The channel that this webhook is following. Only given if type is WebhookType.channel_follower.

New in version 2.0.

TYPE:
Optional[PartialWebhookChannel]

PARAMETERS:
data (WebhookPayload) –

session (aiohttp.ClientSession) –

proxy (str | None) –

proxy_auth (aiohttp.BasicAuth | None) –

token (str | None) –

property url
Returns the webhook’s url.

RETURN TYPE:
str

classmethod partial(id, token, *, session, proxy=None, proxy_auth=None, bot_token=None)[source]
Creates a partial Webhook.

PARAMETERS:
id (int) – The ID of the webhook.

token (str) – The authentication token of the webhook.

session (aiohttp.ClientSession) –

The session to use to send requests with. Note that the library does not manage the session and will not close it.

New in version 2.0.

bot_token (Optional[str]) –

The bot authentication token for authenticated requests involving the webhook.

New in version 2.0.

proxy (str | None) –

proxy_auth (aiohttp.BasicAuth | None) –

RETURNS:
A partial Webhook. A partial webhook is just a webhook object with an ID and a token.

RETURN TYPE:
Webhook

classmethod from_url(url, *, session, proxy=None, proxy_auth=None, bot_token=None)[source]
Creates a partial Webhook from a webhook URL.

PARAMETERS:
url (str) – The URL of the webhook.

session (aiohttp.ClientSession) –

The session to use to send requests with. Note that the library does not manage the session and will not close it.

New in version 2.0.

bot_token (Optional[str]) –

The bot authentication token for authenticated requests involving the webhook.

New in version 2.0.

proxy (str | None) –

proxy_auth (aiohttp.BasicAuth | None) –

RETURNS:
A partial Webhook. A partial webhook is just a webhook object with an ID and a token.

RETURN TYPE:
Webhook

RAISES:
InvalidArgument – The URL is invalid.

await fetch(*, prefer_auth=True)[source]
This function is a coroutine.

Fetches the current webhook.

This could be used to get a full webhook from a partial webhook.

New in version 2.0.

Note

When fetching with an unauthenticated webhook, i.e. is_authenticated() returns False, then the returned webhook does not contain any user information.

PARAMETERS:
prefer_auth (bool) – Whether to use the bot token over the webhook token if available. Defaults to True.

RETURNS:
The fetched webhook.

RETURN TYPE:
Webhook

RAISES:
HTTPException – Could not fetch the webhook

NotFound – Could not find the webhook by this ID

InvalidArgument – This webhook does not have a token associated with it.

await delete(*, reason=None, prefer_auth=True)[source]
This function is a coroutine.

Deletes this Webhook.

PARAMETERS:
reason (Optional[str]) –

The reason for deleting this webhook. Shows up on the audit log.

New in version 1.4.

prefer_auth (bool) –

Whether to use the bot token over the webhook token if available. Defaults to True.

New in version 2.0.

RAISES:
HTTPException – Deleting the webhook failed.

NotFound – This webhook does not exist.

Forbidden – You do not have permissions to delete this webhook.

InvalidArgument – This webhook does not have a token associated with it.

await edit(*, reason=None, name=..., avatar=..., channel=None, prefer_auth=True)[source]
This function is a coroutine.

Edits this Webhook.

PARAMETERS:
name (Optional[str]) – The webhook’s new default name.

avatar (Optional[bytes]) – A bytes-like object representing the webhook’s new default avatar.

channel (Optional[abc.Snowflake]) –

The webhook’s new channel. This requires an authenticated webhook.

New in version 2.0.

reason (Optional[str]) –

The reason for editing this webhook. Shows up on the audit log.

New in version 1.4.

prefer_auth (bool) –

Whether to use the bot token over the webhook token if available. Defaults to True.

New in version 2.0.

RAISES:
HTTPException – Editing the webhook failed.

NotFound – This webhook does not exist.

InvalidArgument – This webhook does not have a token associated with it, or it tried editing a channel without authentication.

RETURN TYPE:
Webhook

await send(content=..., *, username=..., avatar_url=..., tts=False, ephemeral=False, file=..., files=..., embed=..., embeds=..., allowed_mentions=..., view=..., thread=..., thread_name=None, wait=False, delete_after=None)[source]
This function is a coroutine.

Sends a message using the webhook.

The content must be a type that can convert to a string through str(content).

To upload a single file, the file parameter should be used with a single File object.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type. You cannot mix the embed parameter with the embeds parameter, which must be a list of Embed objects to send.

PARAMETERS:
content (str) – The content of the message to send.

wait (bool) – Whether the server should wait before sending a response. This essentially means that the return type of this function changes from None to a WebhookMessage if set to True. If the type of webhook is WebhookType.application then this is always set to True.

username (str) – The username to send with this message. If no username is provided then the default username for the webhook is used.

avatar_url (str) – The avatar URL to send with this message. If no avatar URL is provided then the default avatar for the webhook is used. If this is not a string then it is explicitly cast using str.

tts (bool) – Indicates if the message should be sent using text-to-speech.

ephemeral (bool) –

Indicates if the message should only be visible to the user. This is only available to WebhookType.application webhooks. If a view is sent with an ephemeral message, and it has no timeout set then the timeout is set to 15 minutes.

New in version 2.0.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

embed (Embed) – The rich embed for the content to send. This cannot be mixed with embeds parameter.

embeds (List[Embed]) – A list of embeds to send with the content. Maximum of 10. This cannot be mixed with the embed parameter.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message.

New in version 1.4.

view (discord.ui.View) –

The view to send with the message. You can only send a view if this webhook is not partial and has state attached. A webhook has state attached if the webhook is managed by the library.

New in version 2.0.

thread (Snowflake) –

The thread to send this webhook to.

New in version 2.0.

thread_name (str) –

The name of the thread to create. Only works for forum channels.

New in version 2.0.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent.

RETURNS:
If wait is True then the message that was sent, otherwise None.

RETURN TYPE:
Optional[WebhookMessage]

RAISES:
HTTPException – Sending the message failed.

NotFound – This webhook was not found.

Forbidden – The authorization token for the webhook is incorrect.

TypeError – You specified both embed and embeds or file and files.

ValueError – The length of embeds was invalid.

InvalidArgument – Either there was no token associated with this webhook, ephemeral was passed with the improper webhook type, there was no state attached with this webhook when giving it a view, or you specified both thread_name and thread.

property avatar
Returns an Asset for the avatar the webhook has.

If the webhook does not have a traditional avatar, an asset for the default avatar is returned instead.

RETURN TYPE:
Asset

property channel
The text channel this webhook belongs to.

If this is a partial webhook, then this will always return None.

RETURN TYPE:
TextChannel | None

property created_at
Returns the webhook’s creation time in UTC.

RETURN TYPE:
datetime

await fetch_message(id, *, thread_id=None)[source]
This function is a coroutine.

Retrieves a single WebhookMessage owned by this webhook.

New in version 2.0.

PARAMETERS:
id (int) – The message ID to look for.

thread_id (Optional[int]) – The ID of the thread that contains the message.

RETURNS:
The message asked for.

RETURN TYPE:
WebhookMessage

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

InvalidArgument – There was no token associated with this webhook.

property guild
The guild this webhook belongs to.

If this is a partial webhook, then this will always return None.

RETURN TYPE:
Guild | None

is_authenticated()
Whether the webhook is authenticated with a bot token.

New in version 2.0.

RETURN TYPE:
bool

is_partial()
Whether the webhook is a “partial” webhook.

New in version 2.0.

RETURN TYPE:
bool

await edit_message(message_id, *, content=..., embeds=..., embed=..., file=..., files=..., attachments=..., view=..., allowed_mentions=None, thread=...)[source]
This function is a coroutine.

Edits a message owned by this webhook.

This is a lower level interface to WebhookMessage.edit() in case you only have an ID.

New in version 1.6.

Changed in version 2.0: The edit is no longer in-place, instead the newly edited message is returned.

PARAMETERS:
message_id (int) – The message ID to edit.

content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

attachments (List[Attachment]) – A list of attachments to keep in the message. If [] is passed then all attachments are removed.

file (File) –

The file to upload. This cannot be mixed with files parameter.

New in version 2.0.

files (List[File]) –

A list of files to send with the content. This cannot be mixed with the file parameter.

New in version 2.0.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

view (Optional[View]) –

The updated view to update this message with. If None is passed then the view is removed. The webhook must have state attached, similar to send().

New in version 2.0.

thread (Optional[Snowflake]) – The thread that contains the message.

RETURNS:
The newly edited webhook message.

RETURN TYPE:
WebhookMessage

RAISES:
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid

InvalidArgument – There was no token associated with this webhook or the webhook had no state.

await delete_message(message_id, *, thread_id=None)[source]
This function is a coroutine.

Deletes a message owned by this webhook.

This is a lower level interface to WebhookMessage.delete() in case you only have an ID.

New in version 1.6.

PARAMETERS:
message_id (int) – The message ID to delete.

thread_id (Optional[int]) – The ID of the thread that contains the message.

RAISES:
HTTPException – Deleting the message failed.

Forbidden – Deleted a message that is not yours.

RETURN TYPE:
None

class discord.WebhookMessage(*, state, channel, data)[source]
Methods
delete
edit
Represents a message sent from your webhook.

This allows you to edit or delete a message sent by your webhook.

This inherits from discord.Message with changes to edit() and delete() to work.

New in version 1.6.

PARAMETERS:
state (ConnectionState) –

channel (Union[TextChannel, VoiceChannel, Thread, DMChannel, PartialMessageable, GroupChannel]) –

data (Message) –

await edit(content=..., embeds=..., embed=..., file=..., files=..., attachments=..., view=..., allowed_mentions=None)[source]
This function is a coroutine.

Edits the message.

New in version 1.6.

Changed in version 2.0: The edit is no longer in-place, instead the newly edited message is returned.

PARAMETERS:
content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

file (File) –

The file to upload. This cannot be mixed with files parameter.

New in version 2.0.

files (List[File]) –

A list of files to send with the content. This cannot be mixed with the file parameter.

New in version 2.0.

attachments (List[Attachment]) –

A list of attachments to keep in the message. If [] is passed then all attachments are removed.

New in version 2.0.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

view (Optional[View]) –

The updated view to update this message with. If None is passed then the view is removed.

New in version 2.0.

RETURNS:
The newly edited message.

RETURN TYPE:
WebhookMessage

RAISES:
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid

InvalidArgument – There was no token associated with this webhook.

await delete(*, delay=None)[source]
This function is a coroutine.

Deletes the message.

PARAMETERS:
delay (Optional[float]) – If provided, the number of seconds to wait before deleting the message. The waiting is done in the background and deletion failures are ignored.

RAISES:
Forbidden – You do not have proper permissions to delete the message.

NotFound – The message was deleted already.

HTTPException – Deleting the message failed.

RETURN TYPE:
None

class discord.SyncWebhook(data, session, token=None, state=None)[source]
Attributes
avatar
channel
channel_id
created_at
guild
guild_id
id
name
source_channel
source_guild
token
type
url
user
Methods
SyncWebhook.from_url
SyncWebhook.partial
delete
delete_message
edit
edit_message
fetch
fetch_message
is_authenticated
is_partial
send
Represents a synchronous Discord webhook.

For an asynchronous counterpart, see Webhook.

x == y
Checks if two webhooks are equal.

x != y
Checks if two webhooks are not equal.

hash(x)
Returns the webhook’s hash.

Changed in version 1.4: Webhooks are now comparable and hashable.

id
The webhook’s ID

TYPE:
int

type
The type of the webhook.

New in version 1.3.

TYPE:
WebhookType

token
The authentication token of the webhook. If this is None then the webhook cannot be used to make requests.

TYPE:
Optional[str]

guild_id
The guild ID this webhook is for.

TYPE:
Optional[int]

channel_id
The channel ID this webhook is for.

TYPE:
Optional[int]

user
The user this webhook was created by. If the webhook was received without authentication then this will be None.

TYPE:
Optional[abc.User]

name
The default name of the webhook.

TYPE:
Optional[str]

source_guild
The guild of the channel that this webhook is following. Only given if type is WebhookType.channel_follower.

New in version 2.0.

TYPE:
Optional[PartialWebhookGuild]

source_channel
The channel that this webhook is following. Only given if type is WebhookType.channel_follower.

New in version 2.0.

TYPE:
Optional[PartialWebhookChannel]

PARAMETERS:
data (WebhookPayload) –

session (Session) –

token (str | None) –

property url
Returns the webhook’s url.

RETURN TYPE:
str

classmethod partial(id, token, *, session=..., bot_token=None)[source]
Creates a partial Webhook.

PARAMETERS:
id (int) – The ID of the webhook.

token (str) – The authentication token of the webhook.

session (requests.Session) – The session to use to send requests with. Note that the library does not manage the session and will not close it. If not given, the requests auto session creation functions are used instead.

bot_token (Optional[str]) – The bot authentication token for authenticated requests involving the webhook.

RETURNS:
A partial Webhook. A partial webhook is just a webhook object with an ID and a token.

RETURN TYPE:
Webhook

classmethod from_url(url, *, session=..., bot_token=None)[source]
Creates a partial Webhook from a webhook URL.

PARAMETERS:
url (str) – The URL of the webhook.

session (requests.Session) – The session to use to send requests with. Note that the library does not manage the session and will not close it. If not given, the requests auto session creation functions are used instead.

bot_token (Optional[str]) – The bot authentication token for authenticated requests involving the webhook.

RETURNS:
A partial Webhook. A partial webhook is just a webhook object with an ID and a token.

RETURN TYPE:
Webhook

RAISES:
InvalidArgument – The URL is invalid.

fetch(*, prefer_auth=True)[source]
Fetches the current webhook.

This could be used to get a full webhook from a partial webhook.

Note

When fetching with an unauthenticated webhook, i.e. is_authenticated() returns False, then the returned webhook does not contain any user information.

PARAMETERS:
prefer_auth (bool) – Whether to use the bot token over the webhook token if available. Defaults to True.

RETURNS:
The fetched webhook.

RETURN TYPE:
SyncWebhook

RAISES:
HTTPException – Could not fetch the webhook

NotFound – Could not find the webhook by this ID

InvalidArgument – This webhook does not have a token associated with it.

delete(*, reason=None, prefer_auth=True)[source]
Deletes this Webhook.

PARAMETERS:
reason (Optional[str]) –

The reason for deleting this webhook. Shows up on the audit log.

New in version 1.4.

prefer_auth (bool) – Whether to use the bot token over the webhook token if available. Defaults to True.

RAISES:
HTTPException – Deleting the webhook failed.

NotFound – This webhook does not exist.

Forbidden – You do not have permissions to delete this webhook.

InvalidArgument – This webhook does not have a token associated with it.

RETURN TYPE:
None

edit(*, reason=None, name=..., avatar=..., channel=None, prefer_auth=True)[source]
Edits this Webhook.

PARAMETERS:
name (Optional[str]) – The webhook’s new default name.

avatar (Optional[bytes]) – A bytes-like object representing the webhook’s new default avatar.

channel (Optional[abc.Snowflake]) – The webhook’s new channel. This requires an authenticated webhook.

reason (Optional[str]) –

The reason for editing this webhook. Shows up on the audit log.

New in version 1.4.

prefer_auth (bool) – Whether to use the bot token over the webhook token if available. Defaults to True.

RETURNS:
The newly edited webhook.

RETURN TYPE:
SyncWebhook

RAISES:
HTTPException – Editing the webhook failed.

NotFound – This webhook does not exist.

InvalidArgument – This webhook does not have a token associated with it, or it tried editing a channel without authentication.

send(content=..., *, username=..., avatar_url=..., tts=False, file=..., files=..., embed=..., embeds=..., allowed_mentions=..., thread=..., thread_name=None, wait=False)[source]
Sends a message using the webhook.

The content must be a type that can convert to a string through str(content).

To upload a single file, the file parameter should be used with a single File object.

If the embed parameter is provided, it must be of type Embed and it must be a rich embed type. You cannot mix the embed parameter with the embeds parameter, which must be a list of Embed objects to send.

PARAMETERS:
content (str) – The content of the message to send.

wait (bool) – Whether the server should wait before sending a response. This essentially means that the return type of this function changes from None to a WebhookMessage if set to True.

username (str) – The username to send with this message. If no username is provided then the default username for the webhook is used.

avatar_url (str) – The avatar URL to send with this message. If no avatar URL is provided then the default avatar for the webhook is used. If this is not a string then it is explicitly cast using str.

tts (bool) – Indicates if the message should be sent using text-to-speech.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

embed (Embed) – The rich embed for the content to send. This cannot be mixed with embeds parameter.

embeds (List[Embed]) – A list of embeds to send with the content. Maximum of 10. This cannot be mixed with the embed parameter.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message.

New in version 1.4.

thread (Snowflake) –

The thread to send this message to.

New in version 2.0.

thread_name (str) –

The name of the thread to create. Only works for forum channels.

New in version 2.0.

RETURNS:
If wait is True then the message that was sent, otherwise None.

RETURN TYPE:
Optional[SyncWebhookMessage]

RAISES:
HTTPException – Sending the message failed.

NotFound – This webhook was not found.

Forbidden – The authorization token for the webhook is incorrect.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid

InvalidArgument – There was no token associated with this webhook, or you specified both a thread to send to and a thread to create (the thread and thread_name parameters).

fetch_message(id, *, thread_id=None)[source]
Retrieves a single SyncWebhookMessage owned by this webhook.

New in version 2.0.

PARAMETERS:
id (int) – The message ID to look for.

thread_id (Optional[int]) – The ID of the thread that contains the message.

RETURNS:
The message asked for.

RETURN TYPE:
SyncWebhookMessage

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

InvalidArgument – There was no token associated with this webhook.

property avatar
Returns an Asset for the avatar the webhook has.

If the webhook does not have a traditional avatar, an asset for the default avatar is returned instead.

RETURN TYPE:
Asset

property channel
The text channel this webhook belongs to.

If this is a partial webhook, then this will always return None.

RETURN TYPE:
TextChannel | None

property created_at
Returns the webhook’s creation time in UTC.

RETURN TYPE:
datetime

edit_message(message_id, *, content=..., embeds=..., embed=..., file=..., files=..., allowed_mentions=None, thread=...)[source]
Edits a message owned by this webhook.

This is a lower level interface to WebhookMessage.edit() in case you only have an ID.

New in version 1.6.

PARAMETERS:
message_id (int) – The message ID to edit.

content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

thread (Optional[Snowflake]) – The thread that contains the message.

RAISES:
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid

InvalidArgument – There was no token associated with this webhook.

RETURN TYPE:
SyncWebhookMessage

property guild
The guild this webhook belongs to.

If this is a partial webhook, then this will always return None.

RETURN TYPE:
Guild | None

is_authenticated()
Whether the webhook is authenticated with a bot token.

New in version 2.0.

RETURN TYPE:
bool

is_partial()
Whether the webhook is a “partial” webhook.

New in version 2.0.

RETURN TYPE:
bool

delete_message(message_id, *, thread_id=None)[source]
Deletes a message owned by this webhook.

This is a lower level interface to WebhookMessage.delete() in case you only have an ID.

New in version 1.6.

PARAMETERS:
message_id (int) – The message ID to delete.

thread_id (Optional[int]) – The ID of the thread that contains the message.

RAISES:
HTTPException – Deleting the message failed.

Forbidden – Deleted a message that is not yours.

RETURN TYPE:
None

class discord.SyncWebhookMessage(*, state, channel, data)[source]
Methods
delete
edit
Represents a message sent from your webhook.

This allows you to edit or delete a message sent by your webhook.

This inherits from discord.Message with changes to edit() and delete() to work.

New in version 2.0.

PARAMETERS:
state (ConnectionState) –

channel (Union[TextChannel, VoiceChannel, Thread, DMChannel, PartialMessageable, GroupChannel]) –

data (Message) –

edit(content=..., embeds=..., embed=..., file=..., files=..., allowed_mentions=None)[source]
Edits the message.

PARAMETERS:
content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

RETURNS:
The newly edited message.

RETURN TYPE:
SyncWebhookMessage

RAISES:
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid

InvalidArgument – There was no token associated with this webhook.

delete(*, delay=None)[source]
Deletes the message.

PARAMETERS:
delay (Optional[float]) – If provided, the number of seconds to wait before deleting the message. This blocks the thread.

RAISES:
Forbidden – You do not have proper permissions to delete the message.

NotFound – The message was deleted already.

HTTPException – Deleting the message failed.

RETURN TYPE:
None




Abstract Base Classes
An abstract base class (also known as an abc) is a class that models can inherit to get their behaviour. Abstract base classes should not be instantiated. They are mainly there for usage with isinstance() and issubclass().

This library has a module related to abstract base classes, in which all the ABCs are subclasses of typing.Protocol.

class discord.abc.Snowflake[source]
Attributes
id
An ABC that details the common operations on a Discord model.

Almost all Discord models meet this abstract base class.

If you want to create a snowflake on your own, consider using Object.

id
The model’s unique ID.

TYPE:
int

class discord.abc.User[source]
Attributes
avatar
bot
discriminator
display_name
mention
name
An ABC that details the common operations on a Discord user.

The following implement this ABC:

User

ClientUser

Member

This ABC must also implement Snowflake.

name
The user’s username.

TYPE:
str

discriminator
The user’s discriminator.

TYPE:
str

avatar
The avatar asset the user has.

TYPE:
Asset

bot
If the user is a bot account.

TYPE:
bool

property display_name
Returns the user’s display name.

RETURN TYPE:
str

property mention
Returns a string that allows you to mention the given user.

RETURN TYPE:
str

class discord.abc.PrivateChannel[source]
Attributes
me
An ABC that details the common operations on a private Discord channel.

The following implement this ABC:

DMChannel

GroupChannel

This ABC must also implement Snowflake.

me
The user presenting yourself.

TYPE:
ClientUser

class discord.abc.GuildChannel[source]
Attributes
category
changed_roles
created_at
guild
jump_url
mention
name
overwrites
permissions_synced
position
Methods
clone
create_invite
delete
invites
move
overwrites_for
permissions_for
set_permissions
An ABC that details the common operations on a Discord guild channel.

The following implement this ABC:

TextChannel

VoiceChannel

CategoryChannel

StageChannel

ForumChannel

This ABC must also implement Snowflake.

name
The channel name.

TYPE:
str

guild
The guild the channel belongs to.

TYPE:
Guild

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

TYPE:
int

property changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

property mention
The string that allows you to mention the channel.

RETURN TYPE:
str

property jump_url
Returns a URL that allows the client to jump to the channel.

New in version 2.0.

RETURN TYPE:
str

property created_at
Returns the channel’s creation time in UTC.

RETURN TYPE:
datetime

overwrites_for(obj)[source]
Returns the channel-specific overwrites for a member or a role.

PARAMETERS:
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

RETURNS:
The permission overwrites for this object.

RETURN TYPE:
PermissionOverwrite

property overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

RETURNS:
The channel’s permission overwrites.

RETURN TYPE:
Dict[Union[Role, Member], PermissionOverwrite]

property category
The category this channel belongs to.

If there is no category then this is None.

RETURN TYPE:
CategoryChannel | None

property permissions_synced
Whether the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

RETURN TYPE:
bool

permissions_for(obj, /)[source]
Handles permission resolution for the Member or Role.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

If a Role is passed, then it checks the permissions someone with that role would have, which is essentially:

The default role permissions

The permissions of the role used as a parameter

The default role permission overwrites

The permission overwrites of the role used as a parameter

Changed in version 2.0: The object passed in can now be a role object.

PARAMETERS:
obj (Union[Member, Role]) – The object to resolve permissions for. This could be either a member or a role. If it’s a role then member overwrites are not computed.

RETURNS:
The resolved permissions for the member or role.

RETURN TYPE:
Permissions

await delete(*, reason=None)[source]
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

RAISES:
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

RETURN TYPE:
None

await set_permissions(target, *, overwrite=..., reason=None, **permissions)[source]
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Note

This method replaces the old overwrites with the ones given.

EXAMPLES

Setting allow and deny:

await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
PARAMETERS:
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

await clone(*, name=None, reason=None)[source]
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

PARAMETERS:
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

self (GCH) –

RETURNS:
The channel that was created.

RETURN TYPE:
abc.GuildChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

await move(**kwargs)[source]
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit should be used instead.

You must have the manage_channels permission to do this.

Note

Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

PARAMETERS:
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

RAISES:
InvalidArgument – An invalid position was given or a bad mix of arguments was passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

RETURN TYPE:
None

await create_invite(*, reason=None, max_age=0, max_uses=0, temporary=False, unique=True, target_event=None, target_type=None, target_user=None, target_application_id=None)[source]
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

PARAMETERS:
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

target_type (Optional[InviteTarget]) –

The type of target for the voice channel invite, if any.

New in version 2.0.

target_user (Optional[User]) –

The user whose stream to display for this invite, required if target_type is TargetType.stream. The user must be streaming in the channel.

New in version 2.0.

target_application_id (Optional[int]) –

The id of the embedded application for the invite, required if target_type is TargetType.embedded_application.

New in version 2.0.

target_event (Optional[ScheduledEvent]) –

The scheduled event object to link to the event. Shortcut to Invite.set_scheduled_event()

See Invite.set_scheduled_event() for more info on event invite linking.

New in version 2.0.

RETURNS:
The invite that was created.

RETURN TYPE:
Invite

RAISES:
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

await invites()[source]
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

RETURNS:
The list of invites that are currently active.

RETURN TYPE:
List[Invite]

RAISES:
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

class discord.abc.Messageable[source]
Methods
can_send
fetch_message
history
pins
send
trigger_typing
typing
An ABC that details the common operations on a model that can send messages.

The following implement this ABC:

TextChannel

DMChannel

GroupChannel

User

Member

Context

Thread

ApplicationContext

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)[source]
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

async with typing()[source]
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)[source]
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await trigger_typing()[source]
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

await fetch_message(id, /)[source]
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

await pins()[source]
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

can_send(*objects)[source]
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

class discord.abc.Connectable[source]
An ABC that details the common operations on a channel that can connect to a voice server.

The following implement this ABC:

VoiceChannel

StageChannel

Note

This ABC is not decorated with typing.runtime_checkable(), so will fail isinstance()/issubclass() checks.






Discord Models
Models are classes that are received from Discord and are not meant to be created by the user of the library.

Danger

The classes listed below are not intended to be created by users and are also read-only.

For example, this means that you should not make your own User instances nor should you modify the User instance yourself.

If you want to get one of these model classes instances they’d have to be through the cache, and a common way of doing so is through the utils.find() function or attributes of model classes that you receive from the events specified in the Event Reference.

Note

Nearly all classes here have __slots__ defined which means that it is impossible to have dynamic attributes to the data classes.

class discord.Asset(state, *, url, key, animated=False)[source]
Attributes
key
url
Methods
is_animated
read
replace
save
with_format
with_size
with_static_format
Represents a CDN asset on Discord.

str(x)
Returns the URL of the CDN asset.

len(x)
Returns the length of the CDN asset’s URL.

x == y
Checks if the asset is equal to another asset.

x != y
Checks if the asset is not equal to another asset.

hash(x)
Returns the hash of the asset.

PARAMETERS:
url (str) –

key (str) –

animated (bool) –

property url
Returns the underlying URL of the asset.

RETURN TYPE:
str

property key
Returns the identifying key of the asset.

RETURN TYPE:
str

is_animated()[source]
Returns whether the asset is animated.

RETURN TYPE:
bool

replace(*, size=..., format=..., static_format=...)[source]
Returns a new asset with the passed components replaced.

PARAMETERS:
size (int) – The new size of the asset.

format (str) – The new format to change it to. Must be either ‘webp’, ‘jpeg’, ‘jpg’, ‘png’, or ‘gif’ if it’s animated.

static_format (str) – The new format to change it to if the asset isn’t animated. Must be either ‘webp’, ‘jpeg’, ‘jpg’, or ‘png’.

RETURNS:
The newly updated asset.

RETURN TYPE:
Asset

RAISES:
InvalidArgument – An invalid size or format was passed.

with_size(size, /)[source]
Returns a new asset with the specified size.

PARAMETERS:
size (int) – The new size of the asset.

RETURNS:
The new updated asset.

RETURN TYPE:
Asset

RAISES:
InvalidArgument – The asset had an invalid size.

with_format(format, /)[source]
Returns a new asset with the specified format.

PARAMETERS:
format (str) – The new format of the asset.

RETURNS:
The new updated asset.

RETURN TYPE:
Asset

RAISES:
InvalidArgument – The asset has an invalid format.

with_static_format(format, /)[source]
Returns a new asset with the specified static format.

This only changes the format if the underlying asset is not animated. Otherwise, the asset is not changed.

PARAMETERS:
format (str) – The new static format of the asset.

RETURNS:
The new updated asset.

RETURN TYPE:
Asset

RAISES:
InvalidArgument – The asset had an invalid format.

await read()
This function is a coroutine.

Retrieves the content of this asset as a bytes object.

RETURNS:
The content of the asset.

RETURN TYPE:
bytes

RAISES:
DiscordException – There was no internal connection state.

HTTPException – Downloading the asset failed.

NotFound – The asset was deleted.

await save(fp, *, seek_begin=True)
This function is a coroutine.

Saves this asset into a file-like object.

PARAMETERS:
fp (Union[io.BufferedIOBase, os.PathLike]) – The file-like object to save this attachment to or the filename to use. If a filename is passed then a file is created with that filename and used instead.

seek_begin (bool) – Whether to seek to the beginning of the file after saving is successfully done.

RETURNS:
The number of bytes written.

RETURN TYPE:
int

RAISES:
DiscordException – There was no internal connection state.

HTTPException – Downloading the asset failed.

NotFound – The asset was deleted.

class discord.Spotify[source]
Attributes
album
album_cover_url
artist
artists
color
colour
created_at
duration
end
name
party_id
start
title
track_id
track_url
type
Represents a Spotify listening activity from Discord. This is a special case of Activity that makes it easier to work with the Spotify integration.

x == y
Checks if two activities are equal.

x != y
Checks if two activities are not equal.

hash(x)
Returns the activity’s hash.

str(x)
Returns the string ‘Spotify’.

property type
Returns the activity’s type. This is for compatibility with Activity.

It always returns ActivityType.listening.

RETURN TYPE:
ActivityType

property created_at
When the user started listening in UTC.

New in version 1.3.

RETURN TYPE:
datetime.datetime | None

property colour
Returns the Spotify integration colour, as a Colour.

There is an alias for this named color

RETURN TYPE:
Colour

property color
Returns the Spotify integration colour, as a Colour.

There is an alias for this named colour

RETURN TYPE:
Colour

property name
The activity’s name. This will always return “Spotify”.

RETURN TYPE:
str

property title
The title of the song being played.

RETURN TYPE:
str

property artists
The artists of the song being played.

property artist
The artist of the song being played.

This does not attempt to split the artist information into multiple artists. Useful if there’s only a single artist.

RETURN TYPE:
str

property album
The album that the song being played belongs to.

RETURN TYPE:
str

property album_cover_url
The album cover image URL from Spotify’s CDN.

RETURN TYPE:
str

property track_id
The track ID used by Spotify to identify this song.

RETURN TYPE:
str

property track_url
The track URL to listen on Spotify.

New in version 2.0.

RETURN TYPE:
str

property start
When the user started playing this song in UTC.

RETURN TYPE:
datetime

property end
When the user will stop playing this song in UTC.

RETURN TYPE:
datetime

property duration
The duration of the song being played.

RETURN TYPE:
timedelta

property party_id
The party ID of the listening party.

RETURN TYPE:
str

class discord.VoiceState(*, data, channel=None)[source]
Attributes
afk
channel
deaf
mute
requested_to_speak_at
self_deaf
self_mute
self_stream
self_video
suppress
Represents a Discord user’s voice state.

deaf
Indicates if the user is currently deafened by the guild.

TYPE:
bool

mute
Indicates if the user is currently muted by the guild.

TYPE:
bool

self_mute
Indicates if the user is currently muted by their own accord.

TYPE:
bool

self_deaf
Indicates if the user is currently deafened by their own accord.

TYPE:
bool

self_stream
Indicates if the user is currently streaming via ‘Go Live’ feature.

New in version 1.3.

TYPE:
bool

self_video
Indicates if the user is currently broadcasting video.

TYPE:
bool

suppress
Indicates if the user is suppressed from speaking.

Only applies to stage channels.

New in version 1.7.

TYPE:
bool

requested_to_speak_at
An aware datetime object that specifies the date and time in UTC that the member requested to speak. It will be None if they are not requesting to speak anymore or have been accepted to speak.

Only applicable to stage channels.

New in version 1.7.

TYPE:
Optional[datetime.datetime]

afk
Indicates if the user is currently in the AFK channel in the guild.

TYPE:
bool

channel
The voice channel that the user is currently connected to. None if the user is not currently in a voice channel.

TYPE:
Optional[Union[VoiceChannel, StageChannel]]

PARAMETERS:
data (VoiceStatePayload) –

channel (VocalGuildChannel | None) –

class discord.PartialMessageable(state, id, type=None)[source]
Attributes
id
type
Methods
can_send
fetch_message
get_partial_message
history
pins
send
trigger_typing
typing
Represents a partial messageable to aid with working messageable channels when only a channel ID are present.

The only way to construct this class is through Client.get_partial_messageable().

Note that this class is trimmed down and has no rich attributes.

New in version 2.0.

x == y
Checks if two partial messageables are equal.

x != y
Checks if two partial messageables are not equal.

hash(x)
Returns the partial messageable’s hash.

id
The channel ID associated with this partial messageable.

TYPE:
int

type
The channel type associated with this partial messageable, if given.

TYPE:
Optional[ChannelType]

PARAMETERS:
state (ConnectionState) –

id (int) –

type (ChannelType | None) –

can_send(*objects)
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

await fetch_message(id, /)
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

get_partial_message(message_id, /)[source]
Creates a PartialMessage from the message ID.

This is useful if you want to work with a message and only have its ID without doing an unnecessary API call.

PARAMETERS:
message_id (int) – The message ID to create a partial message for.

RETURNS:
The partial message.

RETURN TYPE:
PartialMessage

Users
class discord.ClientUser(*, state, data)[source]
Attributes
accent_color
accent_colour
avatar
banner
bot
color
colour
created_at
default_avatar
discriminator
display_avatar
display_name
id
jump_url
locale
mention
mfa_enabled
name
public_flags
system
verified
Methods
edit
mentioned_in
Represents your Discord user.

x == y
Checks if two users are equal.

x != y
Checks if two users are not equal.

hash(x)
Return the user’s hash.

str(x)
Returns the user’s name with discriminator.

name
The user’s username.

TYPE:
str

id
The user’s unique ID.

TYPE:
int

discriminator
The user’s discriminator. This is given when the username has conflicts.

TYPE:
str

bot
Specifies if the user is a bot account.

TYPE:
bool

system
Specifies if the user is a system user (i.e. represents Discord officially).

New in version 1.3.

TYPE:
bool

verified
Specifies if the user’s email is verified.

TYPE:
bool

locale
The IETF language tag used to identify the language the user is using.

TYPE:
Optional[str]

mfa_enabled
Specifies if the user has MFA turned on and working.

TYPE:
bool

PARAMETERS:
state (ConnectionState) –

data (User) –

await edit(*, username=..., avatar=...)[source]
This function is a coroutine.

Edits the current profile of the client.

Note

To upload an avatar, a bytes-like object must be passed in that represents the image being uploaded. If this is done through a file then the file must be opened via open('some_filename', 'rb') and the bytes-like object is given through the use of fp.read().

The only image formats supported for uploading is JPEG and PNG.

Changed in version 2.0: The edit is no longer in-place, instead the newly edited client user is returned.

PARAMETERS:
username (str) – The new username you wish to change to.

avatar (bytes) – A bytes-like object representing the image to upload. Could be None to denote no avatar.

RETURNS:
The newly edited client user.

RETURN TYPE:
ClientUser

RAISES:
HTTPException – Editing your profile failed.

InvalidArgument – Wrong image format passed for avatar.

property accent_color
Returns the user’s accent color, if applicable.

There is an alias for this named accent_colour.

New in version 2.0.

Note

This information is only available via Client.fetch_user().

RETURN TYPE:
Colour | None

property accent_colour
Returns the user’s accent colour, if applicable.

There is an alias for this named accent_color.

New in version 2.0.

Note

This information is only available via Client.fetch_user().

RETURN TYPE:
Colour | None

property avatar
Returns an Asset for the avatar the user has.

If the user does not have a traditional avatar, None is returned. If you want the avatar that a user has displayed, consider display_avatar.

RETURN TYPE:
Asset | None

property banner
Returns the user’s banner asset, if available.

New in version 2.0.

Note

This information is only available via Client.fetch_user().

RETURN TYPE:
Asset | None

property color
A property that returns a color denoting the rendered color for the user. This always returns Colour.default().

There is an alias for this named colour.

RETURN TYPE:
Colour

property colour
A property that returns a colour denoting the rendered colour for the user. This always returns Colour.default().

There is an alias for this named color.

RETURN TYPE:
Colour

property created_at
Returns the user’s creation time in UTC.

This is when the user’s Discord account was created.

RETURN TYPE:
datetime

property default_avatar
Returns the default avatar for a given user. This is calculated by the user’s discriminator.

RETURN TYPE:
Asset

property display_avatar
Returns the user’s display avatar.

For regular users this is just their default avatar or uploaded avatar.

New in version 2.0.

RETURN TYPE:
Asset

property display_name
Returns the user’s display name.

For regular users this is just their username, but if they have a guild specific nickname then that is returned instead.

RETURN TYPE:
str

property jump_url
Returns a URL that allows the client to jump to the user.

New in version 2.0.

RETURN TYPE:
str

property mention
Returns a string that allows you to mention the given user.

RETURN TYPE:
str

mentioned_in(message)
Checks if the user is mentioned in the specified message.

PARAMETERS:
message (Message) – The message to check if you’re mentioned in.

RETURNS:
Indicates if the user is mentioned in the message.

RETURN TYPE:
bool

property public_flags
The publicly available flags the user has.

RETURN TYPE:
PublicUserFlags

class discord.User(*, state, data)[source]
Attributes
accent_color
accent_colour
avatar
banner
bot
color
colour
created_at
default_avatar
discriminator
display_avatar
display_name
dm_channel
id
jump_url
mention
mutual_guilds
name
public_flags
system
Methods
can_send
create_dm
fetch_message
history
mentioned_in
pins
send
trigger_typing
typing
Represents a Discord user.

x == y
Checks if two users are equal.

x != y
Checks if two users are not equal.

hash(x)
Return the user’s hash.

str(x)
Returns the user’s name with discriminator.

name
The user’s username.

TYPE:
str

id
The user’s unique ID.

TYPE:
int

discriminator
The user’s discriminator. This is given when the username has conflicts.

TYPE:
str

bot
Specifies if the user is a bot account.

TYPE:
bool

system
Specifies if the user is a system user (i.e. represents Discord officially).

TYPE:
bool

PARAMETERS:
state (ConnectionState) –

data (User) –

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

property dm_channel
Returns the channel associated with this user if it exists.

If this returns None, you can create a DM channel by calling the create_dm() coroutine function.

RETURN TYPE:
DMChannel | None

property mutual_guilds
The guilds that the user shares with the client.

Note

This will only return mutual guilds within the client’s internal cache.

New in version 1.7.

property accent_color
Returns the user’s accent color, if applicable.

There is an alias for this named accent_colour.

New in version 2.0.

Note

This information is only available via Client.fetch_user().

RETURN TYPE:
Colour | None

property accent_colour
Returns the user’s accent colour, if applicable.

There is an alias for this named accent_color.

New in version 2.0.

Note

This information is only available via Client.fetch_user().

RETURN TYPE:
Colour | None

property avatar
Returns an Asset for the avatar the user has.

If the user does not have a traditional avatar, None is returned. If you want the avatar that a user has displayed, consider display_avatar.

RETURN TYPE:
Asset | None

property banner
Returns the user’s banner asset, if available.

New in version 2.0.

Note

This information is only available via Client.fetch_user().

RETURN TYPE:
Asset | None

can_send(*objects)
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

property color
A property that returns a color denoting the rendered color for the user. This always returns Colour.default().

There is an alias for this named colour.

RETURN TYPE:
Colour

property colour
A property that returns a colour denoting the rendered colour for the user. This always returns Colour.default().

There is an alias for this named color.

RETURN TYPE:
Colour

await create_dm()[source]
This function is a coroutine.

Creates a DMChannel with this user.

This should be rarely called, as this is done transparently for most people.

RETURNS:
The channel that was created.

RETURN TYPE:
DMChannel

property created_at
Returns the user’s creation time in UTC.

This is when the user’s Discord account was created.

RETURN TYPE:
datetime

property default_avatar
Returns the default avatar for a given user. This is calculated by the user’s discriminator.

RETURN TYPE:
Asset

property display_avatar
Returns the user’s display avatar.

For regular users this is just their default avatar or uploaded avatar.

New in version 2.0.

RETURN TYPE:
Asset

property display_name
Returns the user’s display name.

For regular users this is just their username, but if they have a guild specific nickname then that is returned instead.

RETURN TYPE:
str

await fetch_message(id, /)
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

property jump_url
Returns a URL that allows the client to jump to the user.

New in version 2.0.

RETURN TYPE:
str

property mention
Returns a string that allows you to mention the given user.

RETURN TYPE:
str

mentioned_in(message)
Checks if the user is mentioned in the specified message.

PARAMETERS:
message (Message) – The message to check if you’re mentioned in.

RETURNS:
Indicates if the user is mentioned in the message.

RETURN TYPE:
bool

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

property public_flags
The publicly available flags the user has.

RETURN TYPE:
PublicUserFlags

await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

Messages
class discord.Attachment(*, data, state)[source]
Attributes
content_type
description
ephemeral
filename
height
id
proxy_url
size
url
width
Methods
is_spoiler
read
save
to_file
Represents an attachment from Discord.

str(x)
Returns the URL of the attachment.

x == y
Checks if the attachment is equal to another attachment.

x != y
Checks if the attachment is not equal to another attachment.

hash(x)
Returns the hash of the attachment.

Changed in version 1.7: Attachment can now be cast to str and is hashable.

id
The attachment ID.

TYPE:
int

size
The attachment size in bytes.

TYPE:
int

height
The attachment’s height, in pixels. Only applicable to images and videos.

TYPE:
Optional[int]

width
The attachment’s width, in pixels. Only applicable to images and videos.

TYPE:
Optional[int]

filename
The attachment’s filename.

TYPE:
str

url
The attachment URL. If the message this attachment was attached to is deleted, then this will 404.

TYPE:
str

proxy_url
The proxy URL. This is a cached version of the url in the case of images. When the message is deleted, this URL might be valid for a few minutes or not valid at all.

TYPE:
str

content_type
The attachment’s media type

TYPE:
Optional[str]

ephemeral
Whether the attachment is ephemeral or not.

New in version 1.7.

TYPE:
bool

description
The attachment’s description.

New in version 2.0.

TYPE:
Optional[str]

PARAMETERS:
data (Attachment) –

state (ConnectionState) –

is_spoiler()[source]
Whether this attachment contains a spoiler.

RETURN TYPE:
bool

await save(fp, *, seek_begin=True, use_cached=False)[source]
This function is a coroutine.

Saves this attachment into a file-like object.

PARAMETERS:
fp (Union[io.BufferedIOBase, os.PathLike]) – The file-like object to save this attachment to or the filename to use. If a filename is passed then a file is created with that filename and used instead.

seek_begin (bool) – Whether to seek to the beginning of the file after saving is successfully done.

use_cached (bool) – Whether to use proxy_url rather than url when downloading the attachment. This will allow attachments to be saved after deletion more often, compared to the regular URL which is generally deleted right after the message is deleted. Note that this can still fail to download deleted attachments if too much time has passed, and it does not work on some types of attachments.

RETURNS:
The number of bytes written.

RETURN TYPE:
int

RAISES:
HTTPException – Saving the attachment failed.

NotFound – The attachment was deleted.

await read(*, use_cached=False)[source]
This function is a coroutine.

Retrieves the content of this attachment as a bytes object.

New in version 1.1.

PARAMETERS:
use_cached (bool) – Whether to use proxy_url rather than url when downloading the attachment. This will allow attachments to be saved after deletion more often, compared to the regular URL which is generally deleted right after the message is deleted. Note that this can still fail to download deleted attachments if too much time has passed, and it does not work on some types of attachments.

RETURNS:
The contents of the attachment.

RETURN TYPE:
bytes

RAISES:
HTTPException – Downloading the attachment failed.

Forbidden – You do not have permissions to access this attachment

NotFound – The attachment was deleted.

await to_file(*, use_cached=False, spoiler=False)[source]
This function is a coroutine.

Converts the attachment into a File suitable for sending via abc.Messageable.send().

New in version 1.3.

PARAMETERS:
use_cached (bool) –

Whether to use proxy_url rather than url when downloading the attachment. This will allow attachments to be saved after deletion more often, compared to the regular URL which is generally deleted right after the message is deleted. Note that this can still fail to download deleted attachments if too much time has passed, and it does not work on some types of attachments.

New in version 1.4.

spoiler (bool) –

Whether the file is a spoiler.

New in version 1.4.

RETURNS:
The attachment as a file suitable for sending.

RETURN TYPE:
File

RAISES:
HTTPException – Downloading the attachment failed.

Forbidden – You do not have permissions to access this attachment

NotFound – The attachment was deleted.

class discord.Message(*, state, channel, data)[source]
Attributes
activity
application
attachments
author
channel
channel_mentions
clean_content
components
content
created_at
edited_at
embeds
flags
guild
id
interaction
jump_url
mention_everyone
mentions
nonce
pinned
raw_channel_mentions
raw_mentions
raw_role_mentions
reactions
reference
role_mentions
stickers
system_content
thread
tts
type
webhook_id
Methods
add_reaction
clear_reaction
clear_reactions
create_thread
delete
edit
is_system
pin
publish
remove_reaction
reply
to_reference
unpin
Represents a message from Discord.

x == y
Checks if two messages are equal.

x != y
Checks if two messages are not equal.

hash(x)
Returns the message’s hash.

tts
Specifies if the message was done with text-to-speech. This can only be accurately received in on_message() due to a discord limitation.

TYPE:
bool

type
The type of message. In most cases this should not be checked, but it is helpful in cases where it might be a system message for system_content.

TYPE:
MessageType

author
A Member that sent the message. If channel is a private channel or the user has the left the guild, then it is a User instead.

TYPE:
Union[Member, abc.User]

content
The actual contents of the message.

TYPE:
str

nonce
The value used by the discord guild and the client to verify that the message is successfully sent. This is not stored long term within Discord’s servers and is only used ephemerally.

TYPE:
Optional[Union[str, int]]

embeds
A list of embeds the message has.

TYPE:
List[Embed]

channel
The TextChannel or Thread that the message was sent from. Could be a DMChannel or GroupChannel if it’s a private message.

TYPE:
Union[TextChannel, Thread, DMChannel, GroupChannel, PartialMessageable]

reference
The message that this message references. This is only applicable to messages of type MessageType.pins_add, crossposted messages created by a followed channel integration, or message replies.

New in version 1.5.

TYPE:
Optional[MessageReference]

mention_everyone
Specifies if the message mentions everyone.

Note

This does not check if the @everyone or the @here text is in the message itself. Rather this boolean indicates if either the @everyone or the @here text is in the message and it did end up mentioning.

TYPE:
bool

mentions
A list of Member that were mentioned. If the message is in a private message then the list will be of User instead. For messages that are not of type MessageType.default, this array can be used to aid in system messages. For more information, see system_content.

Warning

The order of the mentions list is not in any particular order, so you should not rely on it. This is a Discord limitation, not one with the library.

TYPE:
List[abc.User]

channel_mentions
A list of abc.GuildChannel that were mentioned. If the message is in a private message then the list is always empty.

TYPE:
List[abc.GuildChannel]

role_mentions
A list of Role that were mentioned. If the message is in a private message then the list is always empty.

TYPE:
List[Role]

id
The message ID.

TYPE:
int

webhook_id
If this message was sent by a webhook, then this is the webhook ID’s that sent this message.

TYPE:
Optional[int]

attachments
A list of attachments given to a message.

TYPE:
List[Attachment]

pinned
Specifies if the message is currently pinned.

TYPE:
bool

flags
Extra features of the message.

New in version 1.3.

TYPE:
MessageFlags

reactions
Reactions to a message. Reactions can be either custom emoji or standard unicode emoji.

TYPE:
List[Reaction]

activity
The activity associated with this message. Sent with Rich-Presence related messages that for example, request joining, spectating, or listening to or with another member.

It is a dictionary with the following optional keys:

type: An integer denoting the type of message activity being requested.

party_id: The party ID associated with the party.

TYPE:
Optional[dict]

application
The rich presence enabled application associated with this message.

It is a dictionary with the following keys:

id: A string representing the application’s ID.

name: A string representing the application’s name.

description: A string representing the application’s description.

icon: A string representing the icon ID of the application.

cover_image: A string representing the embed’s image asset ID.

TYPE:
Optional[dict]

stickers
A list of sticker items given to the message.

New in version 1.6.

TYPE:
List[StickerItem]

components
A list of components in the message.

New in version 2.0.

TYPE:
List[Component]

guild
The guild that the message belongs to, if applicable.

TYPE:
Optional[Guild]

interaction
The interaction associated with the message, if applicable.

TYPE:
Optional[MessageInteraction]

thread
The thread created from this message, if applicable.

New in version 2.0.

TYPE:
Optional[Thread]

PARAMETERS:
state (ConnectionState) –

channel (Union[TextChannel, VoiceChannel, Thread, DMChannel, PartialMessageable, GroupChannel]) –

data (Message) –

raw_mentions
A property that returns an array of user IDs matched with the syntax of <@user_id> in the message content.

This allows you to receive the user IDs of mentioned users even in a private message context.

raw_channel_mentions
A property that returns an array of channel IDs matched with the syntax of <#channel_id> in the message content.

raw_role_mentions
A property that returns an array of role IDs matched with the syntax of <@&role_id> in the message content.

clean_content
A property that returns the content in a “cleaned up” manner. This basically means that mentions are transformed into the way the client shows it. e.g. <#id> will transform into #name.

This will also transform @everyone and @here mentions into non-mentions.

Note

This does not affect markdown. If you want to escape or remove markdown then use utils.escape_markdown() or utils.remove_markdown() respectively, along with this function.

property created_at
The message’s creation time in UTC.

RETURN TYPE:
datetime

property edited_at
An aware UTC datetime object containing the edited time of the message.

RETURN TYPE:
datetime.datetime | None

property jump_url
Returns a URL that allows the client to jump to this message.

RETURN TYPE:
str

is_system()[source]
Whether the message is a system message.

A system message is a message that is constructed entirely by the Discord API in response to something.

New in version 1.3.

RETURN TYPE:
bool

system_content
A property that returns the content that is rendered regardless of the Message.type.

In the case of MessageType.default and MessageType.reply, this just returns the regular Message.content. Otherwise, this returns an English message denoting the contents of the system message.

await delete(*, delay=None, reason=None)[source]
This function is a coroutine.

Deletes the message.

Your own messages could be deleted without any proper permissions. However, to delete other people’s messages, you need the manage_messages permission.

Changed in version 1.1: Added the new delay keyword-only parameter.

PARAMETERS:
delay (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message. If the deletion fails then it is silently ignored.

reason (Optional[str]) – The reason for deleting the message. Shows up on the audit log.

RAISES:
Forbidden – You do not have proper permissions to delete the message.

NotFound – The message was deleted already

HTTPException – Deleting the message failed.

RETURN TYPE:
None

await edit(content=..., embed=..., embeds=..., file=..., files=..., attachments=..., suppress=..., delete_after=None, allowed_mentions=..., view=...)[source]
This function is a coroutine.

Edits the message.

The content must be able to be transformed into a string via str(content).

Changed in version 1.3: The suppress keyword-only parameter was added.

PARAMETERS:
content (Optional[str]) – The new content to replace the message with. Could be None to remove the content.

embed (Optional[Embed]) – The new embed to replace the original with. Could be None to remove the embed.

embeds (List[Embed]) –

The new embeds to replace the original with. Must be a maximum of 10. To remove all embeds [] should be passed.

New in version 2.0.

file (Sequence[File]) – A new file to add to the message.

files (List[Sequence[File]]) – New files to add to the message.

attachments (List[Attachment]) – A list of attachments to keep in the message. If [] is passed then all attachments are removed.

suppress (bool) – Whether to suppress embeds for the message. This removes all the embeds if set to True. If set to False this brings the embeds back if they were suppressed. Using this parameter requires manage_messages.

delete_after (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message we just edited. If the deletion fails, then it is silently ignored.

allowed_mentions (Optional[AllowedMentions]) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

view (Optional[View]) – The updated view to update this message with. If None is passed then the view is removed.

RAISES:
HTTPException – Editing the message failed.

Forbidden – Tried to suppress a message without permissions or edited a message’s content or embed that isn’t yours.

InvalidArgument – You specified both embed and embeds, specified both file and files, or either``file`` or files were of the wrong type.

RETURN TYPE:
Message

await publish()[source]
This function is a coroutine.

Publishes this message to your announcement channel.

You must have the send_messages permission to do this.

If the message is not your own then the manage_messages permission is also needed.

RAISES:
Forbidden – You do not have the proper permissions to publish this message.

HTTPException – Publishing the message failed.

RETURN TYPE:
None

await pin(*, reason=None)[source]
This function is a coroutine.

Pins the message.

You must have the manage_messages permission to do this in a non-private channel context.

PARAMETERS:
reason (Optional[str]) –

The reason for pinning the message. Shows up on the audit log.

New in version 1.4.

RAISES:
Forbidden – You do not have permissions to pin the message.

NotFound – The message or channel was not found or deleted.

HTTPException – Pinning the message failed, probably due to the channel having more than 50 pinned messages.

RETURN TYPE:
None

await unpin(*, reason=None)[source]
This function is a coroutine.

Unpins the message.

You must have the manage_messages permission to do this in a non-private channel context.

PARAMETERS:
reason (Optional[str]) –

The reason for unpinning the message. Shows up on the audit log.

New in version 1.4.

RAISES:
Forbidden – You do not have permissions to unpin the message.

NotFound – The message or channel was not found or deleted.

HTTPException – Unpinning the message failed.

RETURN TYPE:
None

await add_reaction(emoji)[source]
This function is a coroutine.

Add a reaction to the message.

The emoji may be a unicode emoji or a custom guild Emoji.

You must have the read_message_history permission to use this. If nobody else has reacted to the message using this emoji, the add_reactions permission is required.

PARAMETERS:
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to react with.

RAISES:
HTTPException – Adding the reaction failed.

Forbidden – You do not have the proper permissions to react to the message.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

RETURN TYPE:
None

await remove_reaction(emoji, member)[source]
This function is a coroutine.

Remove a reaction by the member from the message.

The emoji may be a unicode emoji or a custom guild Emoji.

If the reaction is not your own (i.e. member parameter is not you) then the manage_messages permission is needed.

The member parameter must represent a member and meet the abc.Snowflake abc.

PARAMETERS:
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to remove.

member (abc.Snowflake) – The member for which to remove the reaction.

RAISES:
HTTPException – Removing the reaction failed.

Forbidden – You do not have the proper permissions to remove the reaction.

NotFound – The member or emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

RETURN TYPE:
None

await clear_reaction(emoji)[source]
This function is a coroutine.

Clears a specific reaction from the message.

The emoji may be a unicode emoji or a custom guild Emoji.

You need the manage_messages permission to use this.

New in version 1.3.

PARAMETERS:
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to clear.

RAISES:
HTTPException – Clearing the reaction failed.

Forbidden – You do not have the proper permissions to clear the reaction.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

RETURN TYPE:
None

await clear_reactions()[source]
This function is a coroutine.

Removes all the reactions from the message.

You need the manage_messages permission to use this.

RAISES:
HTTPException – Removing the reactions failed.

Forbidden – You do not have the proper permissions to remove all the reactions.

RETURN TYPE:
None

await create_thread(*, name, auto_archive_duration=...)[source]
This function is a coroutine.

Creates a public thread from this message.

You must have create_public_threads in order to create a public thread from a message.

The channel this message belongs in must be a TextChannel.

New in version 2.0.

PARAMETERS:
name (str) – The name of the thread.

auto_archive_duration (int) – The duration in minutes before a thread is automatically archived for inactivity. If not provided, the channel’s default auto archive duration is used.

RETURNS:
The created thread.

RETURN TYPE:
Thread

RAISES:
Forbidden – You do not have permissions to create a thread.

HTTPException – Creating the thread failed.

InvalidArgument – This message does not have guild info attached.

await reply(content=None, **kwargs)[source]
This function is a coroutine.

A shortcut method to abc.Messageable.send() to reply to the Message.

New in version 1.6.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, or you specified both file and files.

PARAMETERS:
content (str | None) –

to_reference(*, fail_if_not_exists=True)[source]
Creates a MessageReference from the current message.

New in version 1.6.

PARAMETERS:
fail_if_not_exists (bool) –

Whether replying using the message reference should raise HTTPException if the message no longer exists or Discord could not fetch the message.

New in version 1.7.

RETURNS:
The reference to this message.

RETURN TYPE:
MessageReference

class discord.DeletedReferencedMessage(parent)[source]
Attributes
channel_id
guild_id
id
A special sentinel type that denotes whether the resolved message referenced message had since been deleted.

The purpose of this class is to separate referenced messages that could not be fetched and those that were previously fetched but have since been deleted.

New in version 1.6.

PARAMETERS:
parent (MessageReference) –

property id
The message ID of the deleted referenced message.

RETURN TYPE:
int

property channel_id
The channel ID of the deleted referenced message.

RETURN TYPE:
int

property guild_id
The guild ID of the deleted referenced message.

RETURN TYPE:
int | None

class discord.Reaction(*, message, data, emoji=None)[source]
Attributes
count
emoji
me
message
Methods
clear
is_custom_emoji
remove
users
Represents a reaction to a message.

Depending on the way this object was created, some of the attributes can have a value of None.

x == y
Checks if two reactions are equal. This works by checking if the emoji is the same. So two messages with the same reaction will be considered “equal”.

x != y
Checks if two reactions are not equal.

hash(x)
Returns the reaction’s hash.

str(x)
Returns the string form of the reaction’s emoji.

emoji
The reaction emoji. May be a custom emoji, or a unicode emoji.

TYPE:
Union[Emoji, PartialEmoji, str]

count
Number of times this reaction was made

TYPE:
int

me
If the user sent this reaction.

TYPE:
bool

message
Message this reaction is for.

TYPE:
Message

PARAMETERS:
message (Message) –

data (ReactionPayload) –

emoji (PartialEmoji | Emoji | str | None) –

async for ... in users(*, limit=None, after=None)[source]
Returns an AsyncIterator representing the users that have reacted to the message.

The after parameter must represent a member and meet the abc.Snowflake abc.

PARAMETERS:
limit (Optional[int]) – The maximum number of results to return. If not provided, returns all the users who reacted to the message.

after (Optional[abc.Snowflake]) – For pagination, reactions are sorted by member.

YIELDS:
Union[User, Member] – The member (if retrievable) or the user that has reacted to this message. The case where it can be a Member is in a guild message context. Sometimes it can be a User if the member has left the guild.

RAISES:
HTTPException – Getting the users for the reaction failed.

EXAMPLES

Usage

# I do not actually recommend doing this.
async for user in reaction.users():
    await channel.send(f'{user} has reacted with {reaction.emoji}!')
Flattening into a list:

users = await reaction.users().flatten()
# users is now a list of User...
winner = random.choice(users)
await channel.send(f'{winner} has won the raffle.')
RETURN TYPE:
ReactionIterator

is_custom_emoji()[source]
If this is a custom emoji.

RETURN TYPE:
bool

await remove(user)[source]
This function is a coroutine.

Remove the reaction by the provided User from the message.

If the reaction is not your own (i.e. user parameter is not you) then the manage_messages permission is needed.

The user parameter must represent a user or member and meet the abc.Snowflake abc.

PARAMETERS:
user (abc.Snowflake) – The user or member from which to remove the reaction.

RAISES:
HTTPException – Removing the reaction failed.

Forbidden – You do not have the proper permissions to remove the reaction.

NotFound – The user you specified, or the reaction’s message was not found.

RETURN TYPE:
None

await clear()[source]
This function is a coroutine.

Clears this reaction from the message.

You need the manage_messages permission to use this.

New in version 1.3.

RAISES:
HTTPException – Clearing the reaction failed.

Forbidden – You do not have the proper permissions to clear the reaction.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

RETURN TYPE:
None

Guild
class discord.Guild(*, data, state)[source]
Attributes
afk_channel
afk_timeout
approximate_member_count
approximate_presence_count
banner
bitrate_limit
categories
channels
chunked
created_at
default_notifications
default_role
description
discovery_splash
emoji_limit
emojis
explicit_content_filter
features
filesize_limit
forum_channels
icon
id
invites_disabled
jump_url
large
max_members
max_presences
max_video_channel_users
me
member_count
members
mfa_level
name
nsfw_level
owner
owner_id
preferred_locale
premium_progress_bar_enabled
premium_subscriber_role
premium_subscribers
premium_subscription_count
premium_tier
public_updates_channel
roles
rules_channel
scheduled_events
self_role
shard_id
splash
stage_channels
stage_instances
sticker_limit
stickers
system_channel
system_channel_flags
text_channels
threads
unavailable
verification_level
voice_channels
voice_client
Methods
active_threads
audit_logs
ban
bans
by_category
change_voice_state
chunk
create_auto_moderation_rule
create_category
create_category_channel
create_custom_emoji
create_forum_channel
create_integration
create_role
create_scheduled_event
create_stage_channel
create_sticker
create_template
create_text_channel
create_voice_channel
delete
delete_emoji
delete_sticker
edit
edit_role_positions
edit_welcome_screen
edit_widget
estimate_pruned_members
fetch_auto_moderation_rule
fetch_auto_moderation_rules
fetch_ban
fetch_channel
fetch_channels
fetch_emoji
fetch_emojis
fetch_member
fetch_members
fetch_roles
fetch_scheduled_event
fetch_scheduled_events
fetch_sticker
fetch_stickers
get_channel
get_channel_or_thread
get_member
get_member_named
get_role
get_scheduled_event
get_stage_instance
get_thread
integrations
invites
kick
leave
prune_members
query_members
set_mfa_required
templates
unban
vanity_invite
webhooks
welcome_screen
widget
Represents a Discord guild.

This is referred to as a “server” in the official Discord UI.

x == y
Checks if two guilds are equal.

x != y
Checks if two guilds are not equal.

hash(x)
Returns the guild’s hash.

str(x)
Returns the guild’s name.

name
The guild name.

TYPE:
str

emojis
All emojis that the guild owns.

TYPE:
Tuple[Emoji, …]

stickers
All stickers that the guild owns.

New in version 2.0.

TYPE:
Tuple[GuildSticker, …]

afk_timeout
The timeout to get sent to the AFK channel.

TYPE:
int

afk_channel
The channel that denotes the AFK channel. None if it doesn’t exist.

TYPE:
Optional[VoiceChannel]

id
The guild’s ID.

TYPE:
int

invites_disabled
Indicates if the guild invites are disabled.

TYPE:
bool

owner_id
The guild owner’s ID. Use Guild.owner instead.

TYPE:
int

unavailable
Indicates if the guild is unavailable. If this is True then the reliability of other attributes outside of Guild.id is slim and they might all be None. It is best to not do anything with the guild if it is unavailable.

Check the on_guild_unavailable() and on_guild_available() events.

TYPE:
bool

max_presences
The maximum amount of presences for the guild.

TYPE:
Optional[int]

max_members
The maximum amount of members for the guild.

Note

This attribute is only available via Client.fetch_guild().

TYPE:
Optional[int]

max_video_channel_users
The maximum amount of users in a video channel.

New in version 1.4.

TYPE:
Optional[int]

description
The guild’s description.

TYPE:
Optional[str]

mfa_level
Indicates the guild’s two-factor authorisation level. If this value is 0 then the guild does not require 2FA for their administrative members. If the value is 1 then they do.

TYPE:
int

verification_level
The guild’s verification level.

TYPE:
VerificationLevel

explicit_content_filter
The guild’s explicit content filter.

TYPE:
ContentFilter

default_notifications
The guild’s notification settings.

TYPE:
NotificationLevel

features
A list of features that the guild has. The features that a guild can have are subject to arbitrary change by Discord.

They are currently as follows:

ANIMATED_BANNER: Guild can upload an animated banner.

ANIMATED_ICON: Guild can upload an animated icon.

APPLICATION_COMMAND_PERMISSIONS_V2: Guild is using the old command permissions behavior.

AUTO_MODERATION: Guild has enabled the auto moderation system.

BANNER: Guild can upload and use a banner. (i.e. banner)

CHANNEL_BANNER: Guild can upload and use a channel banners.

COMMERCE: Guild can sell things using store channels, which have now been removed.

COMMUNITY: Guild is a community server.

DEVELOPER_SUPPORT_SERVER: Guild has been set as a support server on the App Directory.

DISCOVERABLE: Guild shows up in Server Discovery.

FEATURABLE: Guild can be featured in the Server Directory.

HAS_DIRECTORY_ENTRY: Unknown.

HUB: Hubs contain a directory channel that let you find school-related, student-run servers for your school or university.

INTERNAL_EMPLOYEE_ONLY: Indicates that only users with the staff badge can join the guild.

INVITES_DISABLED: Guild Invites are disabled.

INVITE_SPLASH: Guild’s invite page can have a special splash.

LINKED_TO_HUB: ‘Guild is linked to a hub.

MEMBER_PROFILES: Unknown.

MEMBER_VERIFICATION_GATE_ENABLED: Guild has Membership Screening enabled.

MONETIZATION_ENABLED: Guild has enabled monetization.

MORE_EMOJI: Guild has increased custom emoji slots.

MORE_STICKERS: Guild has increased custom sticker slots.

NEWS: Guild can create news channels.

NEW_THREAD_PERMISSIONS: Guild has new thread permissions.

PARTNERED: Guild is a partnered server.

PREMIUM_TIER_3_OVERRIDE: Forces the server to server boosting level 3 (specifically created by Discord Staff Member “Jethro” for their personal server).

PREVIEW_ENABLED: Guild can be viewed before being accepted via Membership Screening.

ROLE_ICONS: Guild can set an image or emoji as a role icon.

ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE: Role subscriptions are available for purchasing.

ROLE_SUBSCRIPTIONS_ENABLED: Guild is able to view and manage role subscriptions.

SEVEN_DAY_THREAD_ARCHIVE: Users can set the thread archive time to 7 days.

TEXT_IN_VOICE_ENABLED: Guild has a chat button inside voice channels that opens a dedicated text channel in a sidebar similar to thread view.

THREADS_ENABLED_TESTING: Used by bot developers to test their bots with threads in guilds with 5 or fewer members and a bot. Also gives the premium thread features.

THREE_DAY_THREAD_ARCHIVE: Users can set the thread archive time to 3 days.

TICKETED_EVENTS_ENABLED: Guild has enabled ticketed events.

VANITY_URL: Guild can have a vanity invite URL (e.g. discord.gg/discord-api).

VERIFIED: Guild is a verified server.

VIP_REGIONS: Guild has VIP voice regions.

WELCOME_SCREEN_ENABLED: Guild has enabled the welcome screen.

TYPE:
List[str]

premium_tier
The premium tier for this guild. Corresponds to “Nitro Server” in the official UI. The number goes from 0 to 3 inclusive.

TYPE:
int

premium_subscription_count
The number of “boosts” this guild currently has.

TYPE:
int

premium_progress_bar_enabled
Indicates if the guild has premium progress bar enabled.

New in version 2.0.

TYPE:
bool

preferred_locale
The preferred locale for the guild. Used when filtering Server Discovery results to a specific language.

TYPE:
Optional[str]

nsfw_level
The guild’s NSFW level.

New in version 2.0.

TYPE:
NSFWLevel

approximate_member_count
The approximate number of members in the guild. This is None unless the guild is obtained using Client.fetch_guild() with with_counts=True.

New in version 2.0.

TYPE:
Optional[int]

approximate_presence_count
The approximate number of members currently active in the guild. This includes idle, dnd, online, and invisible members. Offline members are excluded. This is None unless the guild is obtained using Client.fetch_guild() with with_counts=True.

New in version 2.0.

TYPE:
Optional[int]

PARAMETERS:
data (Guild) –

state (ConnectionState) –

async for ... in fetch_members(*, limit=1000, after=None)[source]
Retrieves an AsyncIterator that enables receiving the guild’s members. In order to use this, Intents.members() must be enabled.

Note

This method is an API call. For general usage, consider members instead.

New in version 1.3.

All parameters are optional.

PARAMETERS:
limit (Optional[int]) – The number of members to retrieve. Defaults to 1000. Pass None to fetch all members. Note that this is potentially slow.

after (Optional[Union[abc.Snowflake, datetime.datetime]]) – Retrieve members after this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

YIELDS:
Member – The member with the member data parsed.

RAISES:
ClientException – The members intent is not enabled.

HTTPException – Getting the members failed.

EXAMPLES

Usage

async for member in guild.fetch_members(limit=150):
    print(member.name)
Flattening into a list

members = await guild.fetch_members(limit=150).flatten()
# members is now a list of Member...
RETURN TYPE:
MemberIterator

async for ... in audit_logs(*, limit=100, before=None, after=None, oldest_first=None, user=None, action=None)[source]
Returns an AsyncIterator that enables receiving the guild’s audit logs.

You must have the view_audit_log permission to use this.

PARAMETERS:
limit (Optional[int]) – The number of entries to retrieve. If None retrieve all entries.

before (Union[abc.Snowflake, datetime.datetime]) – Retrieve entries before this date or entry. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Union[abc.Snowflake, datetime.datetime]) – Retrieve entries after this date or entry. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

oldest_first (bool) – If set to True, return entries in oldest->newest order. Defaults to True if after is specified, otherwise False.

user (abc.Snowflake) – The moderator to filter entries from.

action (AuditLogAction) – The action to filter with.

YIELDS:
AuditLogEntry – The audit log entry.

RAISES:
Forbidden – You are not allowed to fetch audit logs

HTTPException – An error occurred while fetching the audit logs.

EXAMPLES

Getting the first 100 entries:

async for entry in guild.audit_logs(limit=100):
    print(f'{entry.user} did {entry.action} to {entry.target}')
Getting entries for a specific action:

async for entry in guild.audit_logs(action=discord.AuditLogAction.ban):
    print(f'{entry.user} banned {entry.target}')
Getting entries made by a specific user:

entries = await guild.audit_logs(limit=None, user=guild.me).flatten()
await channel.send(f'I made {len(entries)} moderation actions.')
RETURN TYPE:
AuditLogIterator

property channels
A list of channels that belong to this guild.

property threads
A list of threads that you have permission to view.

New in version 2.0.

property jump_url
Returns a URL that allows the client to jump to the guild.

New in version 2.0.

RETURN TYPE:
str

property large
Indicates if the guild is a ‘large’ guild.

A large guild is defined as having more than large_threshold count members, which for this library is set to the maximum of 250.

RETURN TYPE:
bool

property voice_channels
A list of voice channels that belong to this guild.

This is sorted by the position and are in UI order from top to bottom.

property stage_channels
A list of stage channels that belong to this guild.

New in version 1.7.

This is sorted by the position and are in UI order from top to bottom.

property forum_channels
A list of forum channels that belong to this guild.

New in version 2.0.

This is sorted by the position and are in UI order from top to bottom.

property me
Similar to Client.user except an instance of Member. This is essentially used to get the member version of yourself.

RETURN TYPE:
Member

property voice_client
Returns the VoiceProtocol associated with this guild, if any.

RETURN TYPE:
VoiceProtocol | None

property text_channels
A list of text channels that belong to this guild.

This is sorted by the position and are in UI order from top to bottom.

property categories
A list of categories that belong to this guild.

This is sorted by the position and are in UI order from top to bottom.

by_category()[source]
Returns every CategoryChannel and their associated channels.

These channels and categories are sorted in the official Discord UI order.

If the channels do not have a category, then the first element of the tuple is None.

RETURNS:
The categories and their associated channels.

RETURN TYPE:
List[Tuple[Optional[CategoryChannel], List[abc.GuildChannel]]]

get_channel_or_thread(channel_id, /)[source]
Returns a channel or thread with the given ID.

New in version 2.0.

PARAMETERS:
channel_id (int) – The ID to search for.

RETURNS:
The returned channel or thread or None if not found.

RETURN TYPE:
Optional[Union[Thread, abc.GuildChannel]]

get_channel(channel_id, /)[source]
Returns a channel with the given ID.

Note

This does not search for threads.

PARAMETERS:
channel_id (int) – The ID to search for.

RETURNS:
The returned channel or None if not found.

RETURN TYPE:
Optional[abc.GuildChannel]

get_thread(thread_id, /)[source]
Returns a thread with the given ID.

New in version 2.0.

PARAMETERS:
thread_id (int) – The ID to search for.

RETURNS:
The returned thread or None if not found.

RETURN TYPE:
Optional[Thread]

property system_channel
Returns the guild’s channel used for system messages.

If no channel is set, then this returns None.

RETURN TYPE:
TextChannel | None

property system_channel_flags
Returns the guild’s system channel settings.

RETURN TYPE:
SystemChannelFlags

property rules_channel
Return’s the guild’s channel used for the rules. The guild must be a Community guild.

If no channel is set, then this returns None.

New in version 1.3.

RETURN TYPE:
TextChannel | None

property public_updates_channel
Return’s the guild’s channel where admins and moderators of the guilds receive notices from Discord. The guild must be a Community guild.

If no channel is set, then this returns None.

New in version 1.4.

RETURN TYPE:
TextChannel | None

property emoji_limit
The maximum number of emoji slots this guild has.

RETURN TYPE:
int

property sticker_limit
The maximum number of sticker slots this guild has.

New in version 2.0.

RETURN TYPE:
int

property bitrate_limit
The maximum bitrate for voice channels this guild can have.

RETURN TYPE:
float

property filesize_limit
The maximum number of bytes files can have when uploaded to this guild.

RETURN TYPE:
int

property members
A list of members that belong to this guild.

get_member(user_id, /)[source]
Returns a member with the given ID.

PARAMETERS:
user_id (int) – The ID to search for.

RETURNS:
The member or None if not found.

RETURN TYPE:
Optional[Member]

property premium_subscribers
A list of members who have “boosted” this guild.

property roles
Returns a list of the guild’s roles in hierarchy order.

The first element of this list will be the lowest role in the hierarchy.

get_role(role_id, /)[source]
Returns a role with the given ID.

PARAMETERS:
role_id (int) – The ID to search for.

RETURNS:
The role or None if not found.

RETURN TYPE:
Optional[Role]

property default_role
Gets the @everyone role that all members have by default.

RETURN TYPE:
Role

property premium_subscriber_role
Gets the premium subscriber role, AKA “boost” role, in this guild.

New in version 1.6.

RETURN TYPE:
Role | None

property self_role
Gets the role associated with this client’s user, if any.

New in version 1.6.

RETURN TYPE:
Role | None

property stage_instances
Returns a list of the guild’s stage instances that are currently running.

New in version 2.0.

get_stage_instance(stage_instance_id, /)[source]
Returns a stage instance with the given ID.

New in version 2.0.

PARAMETERS:
stage_instance_id (int) – The ID to search for.

RETURNS:
The stage instance or None if not found.

RETURN TYPE:
Optional[StageInstance]

property owner
The member that owns the guild.

RETURN TYPE:
Member | None

property icon
Returns the guild’s icon asset, if available.

RETURN TYPE:
Asset | None

property banner
Returns the guild’s banner asset, if available.

RETURN TYPE:
Asset | None

property splash
Returns the guild’s invite splash asset, if available.

RETURN TYPE:
Asset | None

property discovery_splash
Returns the guild’s discovery splash asset, if available.

RETURN TYPE:
Asset | None

property member_count
Returns the true member count regardless of it being loaded fully or not.

Warning

Due to a Discord limitation, in order for this attribute to remain up-to-date and accurate, it requires Intents.members to be specified.

RETURN TYPE:
int

property chunked
Returns a boolean indicating if the guild is “chunked”.

A chunked guild means that member_count is equal to the number of members stored in the internal members cache.

If this value returns False, then you should request for offline members.

RETURN TYPE:
bool

property shard_id
Returns the shard ID for this guild if applicable.

RETURN TYPE:
int

property created_at
Returns the guild’s creation time in UTC.

RETURN TYPE:
datetime

property invites_disabled
Returns a boolean indicating if the guild invites are disabled.

RETURN TYPE:
bool

get_member_named(name, /)[source]
Returns the first member found that matches the name provided.

The name can have an optional discriminator argument, e.g. “Jake#0001” or “Jake” will both do the lookup. However, the former will give a more precise result. Note that the discriminator must have all 4 digits for this to work.

If a nickname is passed, then it is looked up via the nickname. Note however, that a nickname + discriminator combo will not look up the nickname but rather the username + discriminator combo due to nickname + discriminator not being unique.

If no member is found, None is returned.

PARAMETERS:
name (str) – The name of the member to lookup with an optional discriminator.

RETURNS:
The member in this guild with the associated name. If not found then None is returned.

RETURN TYPE:
Optional[Member]

await create_text_channel(name, *, reason=None, category=None, position=..., topic=..., slowmode_delay=..., nsfw=..., overwrites=...)[source]
This function is a coroutine.

Creates a TextChannel for the guild.

Note that you need the manage_channels permission to create the channel.

The overwrites parameter can be used to create a ‘secret’ channel upon creation. This parameter expects a dict of overwrites with the target (either a Member or a Role) as the key and a PermissionOverwrite as the value.

Note

Creating a channel of a specified position will not update the position of other channels to follow suit. A follow-up call to edit() will be required to update the position of the channel in the channel list.

PARAMETERS:
name (str) – The channel’s name.

overwrites (Dict[Union[Role, Member, Snowflake], PermissionOverwrite]) – The overwrites to apply to the channel. Useful for creating secret channels.

category (Optional[CategoryChannel]) – The category to place the newly created channel under. The permissions will be automatically synced to category if no overwrites are provided.

position (int) – The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

topic (str) – The new channel’s topic.

slowmode_delay (int) – Specifies the slowmode rate limit for user in this channel, in seconds. The maximum value possible is 21600.

nsfw (bool) – To mark the channel as NSFW or not.

reason (Optional[str]) – The reason for creating this channel. Shows up on the audit log.

RETURNS:
The channel that was just created.

RETURN TYPE:
TextChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

EXAMPLES

Creating a basic channel:

channel = await guild.create_text_channel('cool-channel')
Creating a “secret” channel:

overwrites = {
    guild.default_role: discord.PermissionOverwrite(read_messages=False),
    guild.me: discord.PermissionOverwrite(read_messages=True)
}

channel = await guild.create_text_channel('secret', overwrites=overwrites)
await create_voice_channel(name, *, reason=None, category=None, position=..., bitrate=..., user_limit=..., rtc_region=..., video_quality_mode=..., overwrites=...)[source]
This function is a coroutine.

This is similar to create_text_channel() except makes a VoiceChannel instead.

PARAMETERS:
name (str) – The channel’s name.

overwrites (Dict[Union[Role, Member, Snowflake], PermissionOverwrite]) – The overwrites to apply to the channel. Useful for creating secret channels.

category (Optional[CategoryChannel]) – The category to place the newly created channel under. The permissions will be automatically synced to category if no overwrites are provided.

position (int) – The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

bitrate (int) – The channel’s preferred audio bitrate in bits per second.

user_limit (int) – The channel’s limit for number of members that can be in a voice channel.

rtc_region (Optional[VoiceRegion]) –

The region for the voice channel’s voice communication. A value of None indicates automatic voice region detection.

New in version 1.7.

video_quality_mode (VideoQualityMode) –

The camera video quality for the voice channel’s participants.

New in version 2.0.

reason (Optional[str]) – The reason for creating this channel. Shows up on the audit log.

RETURNS:
The channel that was just created.

RETURN TYPE:
VoiceChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

await create_stage_channel(name, *, topic, position=..., overwrites=..., category=None, reason=None)[source]
This function is a coroutine.

This is similar to create_text_channel() except makes a StageChannel instead.

New in version 1.7.

PARAMETERS:
name (str) – The channel’s name.

topic (str) – The new channel’s topic.

overwrites (Dict[Union[Role, Member, Snowflake], PermissionOverwrite]) – The overwrites to apply to the channel. Useful for creating secret channels.

category (Optional[CategoryChannel]) – The category to place the newly created channel under. The permissions will be automatically synced to category if no overwrites are provided.

position (int) – The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

reason (Optional[str]) – The reason for creating this channel. Shows up on the audit log.

RETURNS:
The channel that was just created.

RETURN TYPE:
StageChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

await create_forum_channel(name, *, reason=None, category=None, position=..., topic=..., slowmode_delay=..., nsfw=..., overwrites=...)[source]
This function is a coroutine.

Creates a ForumChannel for the guild.

Note that you need the manage_channels permission to create the channel.

The overwrites parameter can be used to create a ‘secret’ channel upon creation. This parameter expects a dict of overwrites with the target (either a Member or a Role) as the key and a PermissionOverwrite as the value.

Note

Creating a channel of a specified position will not update the position of other channels to follow suit. A follow-up call to edit() will be required to update the position of the channel in the channel list.

PARAMETERS:
name (str) – The channel’s name.

overwrites (Dict[Union[Role, Member, Snowflake], PermissionOverwrite]) – The overwrites to apply to the channel. Useful for creating secret channels.

category (Optional[CategoryChannel]) – The category to place the newly created channel under. The permissions will be automatically synced to category if no overwrites are provided.

position (int) – The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0.

topic (str) – The new channel’s topic.

slowmode_delay (int) – Specifies the slowmode rate limit for user in this channel, in seconds. The maximum value possible is 21600.

nsfw (bool) – To mark the channel as NSFW or not.

reason (Optional[str]) – The reason for creating this channel. Shows up on the audit log.

RETURNS:
The channel that was just created.

RETURN TYPE:
ForumChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

EXAMPLES

Creating a basic channel:

channel = await guild.create_forum_channel('cool-channel')
Creating a “secret” channel:

overwrites = {
    guild.default_role: discord.PermissionOverwrite(read_messages=False),
    guild.me: discord.PermissionOverwrite(read_messages=True)
}

channel = await guild.create_forum_channel('secret', overwrites=overwrites)
await create_category(name, *, overwrites=..., reason=None, position=...)[source]
This function is a coroutine.

Same as create_text_channel() except makes a CategoryChannel instead.

Note

The category parameter is not supported in this function since categories cannot have categories.

RETURNS:
The channel that was just created.

RETURN TYPE:
CategoryChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

PARAMETERS:
name (str) –

overwrites (dict[Role | Member, PermissionOverwrite]) –

reason (str | None) –

position (int) –

await create_category_channel(name, *, overwrites=..., reason=None, position=...)
This function is a coroutine.

Same as create_text_channel() except makes a CategoryChannel instead.

Note

The category parameter is not supported in this function since categories cannot have categories.

RETURNS:
The channel that was just created.

RETURN TYPE:
CategoryChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

InvalidArgument – The permission overwrite information is not in proper form.

PARAMETERS:
name (str) –

overwrites (dict[Role | Member, PermissionOverwrite]) –

reason (str | None) –

position (int) –

await leave()[source]
This function is a coroutine.

Leaves the guild.

Note

You cannot leave the guild that you own, you must delete it instead via delete().

RAISES:
HTTPException – Leaving the guild failed.

RETURN TYPE:
None

await delete()[source]
This function is a coroutine.

Deletes the guild. You must be the guild owner to delete the guild.

RAISES:
HTTPException – Deleting the guild failed.

Forbidden – You do not have permissions to delete the guild.

RETURN TYPE:
None

await set_mfa_required(required, *, reason=None)[source]
This function is a coroutine.

Set whether it is required to have MFA enabled on your account to perform moderation actions. You must be the guild owner to do this.

PARAMETERS:
required (bool) – Whether MFA should be required to perform moderation actions.

reason (str) – The reason to show up in the audit log.

RAISES:
HTTPException – The operation failed.

Forbidden – You are not the owner of the guild.

RETURN TYPE:
None

await edit(*, reason=..., name=..., description=..., icon=..., banner=..., splash=..., discovery_splash=..., community=..., afk_channel=..., owner=..., afk_timeout=..., default_notifications=..., verification_level=..., explicit_content_filter=..., vanity_code=..., system_channel=..., system_channel_flags=..., preferred_locale=..., rules_channel=..., public_updates_channel=..., premium_progress_bar_enabled=..., disable_invites=...)[source]
This function is a coroutine.

Edits the guild.

You must have the manage_guild permission to edit the guild.

Changed in version 1.4: The rules_channel and public_updates_channel keyword-only parameters were added.

Changed in version 2.0: The discovery_splash and community keyword-only parameters were added.

Changed in version 2.0: The newly updated guild is returned.

PARAMETERS:
name (str) – The new name of the guild.

description (Optional[str]) – The new description of the guild. Could be None for no description. This is only available to guilds that contain PUBLIC in Guild.features.

icon (bytes) – A bytes-like object representing the icon. Only PNG/JPEG is supported. GIF is only available to guilds that contain ANIMATED_ICON in Guild.features. Could be None to denote removal of the icon.

banner (bytes) – A bytes-like object representing the banner. Could be None to denote removal of the banner. This is only available to guilds that contain BANNER in Guild.features.

splash (bytes) – A bytes-like object representing the invite splash. Only PNG/JPEG supported. Could be None to denote removing the splash. This is only available to guilds that contain INVITE_SPLASH in Guild.features.

discovery_splash (bytes) – A bytes-like object representing the discovery splash. Only PNG/JPEG supported. Could be None to denote removing the splash. This is only available to guilds that contain DISCOVERABLE in Guild.features.

community (bool) – Whether the guild should be a Community guild. If set to True, both rules_channel and public_updates_channel parameters are required.

afk_channel (Optional[VoiceChannel]) – The new channel that is the AFK channel. Could be None for no AFK channel.

afk_timeout (int) – The number of seconds until someone is moved to the AFK channel.

owner (Member) – The new owner of the guild to transfer ownership to. Note that you must be owner of the guild to do this.

verification_level (VerificationLevel) – The new verification level for the guild.

default_notifications (NotificationLevel) – The new default notification level for the guild.

explicit_content_filter (ContentFilter) – The new explicit content filter for the guild.

vanity_code (str) – The new vanity code for the guild.

system_channel (Optional[TextChannel]) – The new channel that is used for the system channel. Could be None for no system channel.

system_channel_flags (SystemChannelFlags) – The new system channel settings to use with the new system channel.

preferred_locale (str) – The new preferred locale for the guild. Used as the primary language in the guild. If set, this must be an ISO 639 code, e.g. en-US or ja or zh-CN.

rules_channel (Optional[TextChannel]) – The new channel that is used for rules. This is only available to guilds that contain PUBLIC in Guild.features. Could be None for no rules channel.

public_updates_channel (Optional[TextChannel]) – The new channel that is used for public updates from Discord. This is only available to guilds that contain PUBLIC in Guild.features. Could be None for no public updates channel.

premium_progress_bar_enabled (bool) – Whether the guild should have premium progress bar enabled.

disable_invites (bool) – Whether the guild should have server invites enabled or disabled.

reason (Optional[str]) – The reason for editing this guild. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to edit the guild.

HTTPException – Editing the guild failed.

InvalidArgument – The image format passed in to icon is invalid. It must be PNG or JPG. This is also raised if you are not the owner of the guild and request an ownership transfer.

RETURNS:
The newly updated guild. Note that this has the same limitations as mentioned in Client.fetch_guild() and may not have full data.

RETURN TYPE:
Guild

await fetch_channels()[source]
This function is a coroutine.

Retrieves all abc.GuildChannel that the guild has.

Note

This method is an API call. For general usage, consider channels instead.

New in version 1.2.

RETURNS:
All channels in the guild.

RETURN TYPE:
Sequence[abc.GuildChannel]

RAISES:
InvalidData – An unknown channel type was received from Discord.

HTTPException – Retrieving the channels failed.

await active_threads()[source]
This function is a coroutine.

Returns a list of active Thread that the client can access.

This includes both private and public threads.

New in version 2.0.

RETURNS:
The active threads

RETURN TYPE:
List[Thread]

RAISES:
HTTPException – The request to get the active threads failed.

await fetch_member(member_id, /)[source]
This function is a coroutine.

Retrieves a Member from a guild ID, and a member ID.

Note

This method is an API call. If you have Intents.members and member cache enabled, consider get_member() instead.

PARAMETERS:
member_id (int) – The member’s ID to fetch from.

RETURNS:
The member from the member ID.

RETURN TYPE:
Member

RAISES:
Forbidden – You do not have access to the guild.

HTTPException – Fetching the member failed.

await fetch_ban(user)[source]
This function is a coroutine.

Retrieves the BanEntry for a user.

You must have the ban_members permission to get this information.

PARAMETERS:
user (abc.Snowflake) – The user to get ban information from.

RETURNS:
The BanEntry object for the specified user.

RETURN TYPE:
BanEntry

RAISES:
Forbidden – You do not have proper permissions to get the information.

NotFound – This user is not banned.

HTTPException – An error occurred while fetching the information.

await fetch_channel(channel_id, /)[source]
This function is a coroutine.

Retrieves a abc.GuildChannel or Thread with the specified ID.

Note

This method is an API call. For general usage, consider get_channel_or_thread() instead.

New in version 2.0.

RETURNS:
The channel from the ID.

RETURN TYPE:
Union[abc.GuildChannel, Thread]

RAISES:
InvalidData – An unknown channel type was received from Discord or the guild the channel belongs to is not the same as the one in this object points to.

HTTPException – Retrieving the channel failed.

NotFound – Invalid Channel ID.

Forbidden – You do not have permission to fetch this channel.

PARAMETERS:
channel_id (int) –

bans(limit=None, before=None, after=None)[source]
This function is a coroutine.

Retrieves an AsyncIterator that enables receiving the guild’s bans. In order to use this, you must have the ban_members permission.

Changed in version 2.0: The limit, before. and after parameters were added. Now returns a BanIterator instead of a list of BanEntry objects.

All parameters are optional.

PARAMETERS:
limit (Optional[int]) – The number of bans to retrieve. Defaults to 1000.

before (Optional[Union[abc.Snowflake, datetime.datetime]]) – Retrieve bans before this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[abc.Snowflake, datetime.datetime]]) – Retrieve bans after this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

YIELDS:
BanEntry – The ban entry for the ban.

RAISES:
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

EXAMPLES

Usage

async for ban in guild.bans(limit=150):
    print(ban.user.name)
Flattening into a list

bans = await guild.bans(limit=150).flatten()
# bans is now a list of BanEntry...
RETURN TYPE:
BanIterator

await prune_members(*, days, compute_prune_count=True, roles=..., reason=None)[source]
This function is a coroutine.

Prunes the guild from its inactive members.

The inactive members are denoted if they have not logged on in days number of days and have no roles.

You must have the kick_members permission to use this.

To check how many members you would prune without actually pruning, see the estimate_pruned_members() function.

To prune members that have specific roles see the roles parameter.

Changed in version 1.4: The roles keyword-only parameter was added.

PARAMETERS:
days (int) – The number of days before counting as inactive.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

compute_prune_count (bool) – Whether to compute the prune count. This defaults to True which makes it prone to timeouts in very large guilds. In order to prevent timeouts, you must set this to False. If this is set to False, then this function will always return None.

roles (List[abc.Snowflake]) – A list of abc.Snowflake that represent roles to include in the pruning process. If a member has a role that is not specified, they’ll be excluded.

RAISES:
Forbidden – You do not have permissions to prune members.

HTTPException – An error occurred while pruning members.

InvalidArgument – An integer was not passed for days.

RETURNS:
The number of members pruned. If compute_prune_count is False then this returns None.

RETURN TYPE:
Optional[int]

await templates()[source]
This function is a coroutine.

Gets the list of templates from this guild.

Requires manage_guild permissions.

New in version 1.7.

RETURNS:
The templates for this guild.

RETURN TYPE:
List[Template]

RAISES:
Forbidden – You don’t have permissions to get the templates.

await webhooks()[source]
This function is a coroutine.

Gets the list of webhooks from this guild.

Requires manage_webhooks permissions.

RETURNS:
The webhooks for this guild.

RETURN TYPE:
List[Webhook]

RAISES:
Forbidden – You don’t have permissions to get the webhooks.

await estimate_pruned_members(*, days, roles=...)[source]
This function is a coroutine.

Similar to prune_members() except instead of actually pruning members, it returns how many members it would prune from the guild had it been called.

PARAMETERS:
days (int) – The number of days before counting as inactive.

roles (List[abc.Snowflake]) –

A list of abc.Snowflake that represent roles to include in the estimate. If a member has a role that is not specified, they’ll be excluded.

New in version 1.7.

RETURNS:
The number of members estimated to be pruned.

RETURN TYPE:
int

RAISES:
Forbidden – You do not have permissions to prune members.

HTTPException – An error occurred while fetching the prune members estimate.

InvalidArgument – An integer was not passed for days.

await invites()[source]
This function is a coroutine.

Returns a list of all active instant invites from the guild.

You must have the manage_guild permission to get this information.

RETURNS:
The list of invites that are currently active.

RETURN TYPE:
List[Invite]

RAISES:
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

await create_template(*, name, description=...)[source]
This function is a coroutine.

Creates a template for the guild.

You must have the manage_guild permission to do this.

New in version 1.7.

PARAMETERS:
name (str) – The name of the template.

description (str) – The description of the template.

RETURN TYPE:
Template

await create_integration(*, type, id)[source]
This function is a coroutine.

Attaches an integration to the guild.

You must have the manage_guild permission to do this.

New in version 1.4.

PARAMETERS:
type (str) – The integration type (e.g. Twitch).

id (int) – The integration ID.

RAISES:
Forbidden – You do not have permission to create the integration.

HTTPException – The account could not be found.

RETURN TYPE:
None

await integrations()[source]
This function is a coroutine.

Returns a list of all integrations attached to the guild.

You must have the manage_guild permission to do this.

New in version 1.4.

RETURNS:
The list of integrations that are attached to the guild.

RETURN TYPE:
List[Integration]

RAISES:
Forbidden – You do not have permission to create the integration.

HTTPException – Fetching the integrations failed.

await fetch_stickers()[source]
This function is a coroutine.

Retrieves a list of all Stickers for the guild.

New in version 2.0.

Note

This method is an API call. For general usage, consider stickers instead.

RAISES:
HTTPException – An error occurred fetching the stickers.

RETURNS:
The retrieved stickers.

RETURN TYPE:
List[GuildSticker]

await fetch_sticker(sticker_id, /)[source]
This function is a coroutine.

Retrieves a custom Sticker from the guild.

New in version 2.0.

Note

This method is an API call. For general usage, consider iterating over stickers instead.

PARAMETERS:
sticker_id (int) – The sticker’s ID.

RETURNS:
The retrieved sticker.

RETURN TYPE:
GuildSticker

RAISES:
NotFound – The sticker requested could not be found.

HTTPException – An error occurred fetching the sticker.

await create_sticker(*, name, description=None, emoji, file, reason=None)[source]
This function is a coroutine.

Creates a Sticker for the guild.

You must have manage_emojis_and_stickers permission to do this.

New in version 2.0.

PARAMETERS:
name (str) – The sticker name. Must be 2 to 30 characters.

description (Optional[str]) – The sticker’s description. If used, must be 2 to 100 characters.

emoji (str) – The name of a unicode emoji that represents the sticker’s expression.

file (File) – The file of the sticker to upload.

reason (str) – The reason for creating this sticker. Shows up on the audit log.

RETURNS:
The created sticker.

RETURN TYPE:
GuildSticker

RAISES:
Forbidden – You are not allowed to create stickers.

HTTPException – An error occurred creating a sticker.

TypeError – The parameters for the sticker are not correctly formatted.

await delete_sticker(sticker, *, reason=None)[source]
This function is a coroutine.

Deletes the custom Sticker from the guild.

You must have manage_emojis_and_stickers permission to do this.

New in version 2.0.

PARAMETERS:
sticker (abc.Snowflake) – The sticker you are deleting.

reason (Optional[str]) – The reason for deleting this sticker. Shows up on the audit log.

RAISES:
Forbidden – You are not allowed to delete stickers.

HTTPException – An error occurred deleting the sticker.

RETURN TYPE:
None

await fetch_emojis()[source]
This function is a coroutine.

Retrieves all custom Emojis from the guild.

Note

This method is an API call. For general usage, consider emojis instead.

RAISES:
HTTPException – An error occurred fetching the emojis.

RETURNS:
The retrieved emojis.

RETURN TYPE:
List[Emoji]

await fetch_emoji(emoji_id, /)[source]
This function is a coroutine.

Retrieves a custom Emoji from the guild.

Note

This method is an API call. For general usage, consider iterating over emojis instead.

PARAMETERS:
emoji_id (int) – The emoji’s ID.

RETURNS:
The retrieved emoji.

RETURN TYPE:
Emoji

RAISES:
NotFound – The emoji requested could not be found.

HTTPException – An error occurred fetching the emoji.

await create_custom_emoji(*, name, image, roles=..., reason=None)[source]
This function is a coroutine.

Creates a custom Emoji for the guild.

There is currently a limit of 50 static and animated emojis respectively per guild, unless the guild has the MORE_EMOJI feature which extends the limit to 200.

You must have the manage_emojis permission to do this.

PARAMETERS:
name (str) – The emoji name. Must be at least 2 characters.

image (bytes) – The bytes-like object representing the image data to use. Only JPG, PNG and GIF images are supported.

roles (List[Role]) – A list of Roles that can use this emoji. Leave empty to make it available to everyone.

reason (Optional[str]) – The reason for creating this emoji. Shows up on the audit log.

RAISES:
Forbidden – You are not allowed to create emojis.

HTTPException – An error occurred creating an emoji.

RETURNS:
The created emoji.

RETURN TYPE:
Emoji

await delete_emoji(emoji, *, reason=None)[source]
This function is a coroutine.

Deletes the custom Emoji from the guild.

You must have manage_emojis permission to do this.

PARAMETERS:
emoji (abc.Snowflake) – The emoji you are deleting.

reason (Optional[str]) – The reason for deleting this emoji. Shows up on the audit log.

RAISES:
Forbidden – You are not allowed to delete emojis.

HTTPException – An error occurred deleting the emoji.

RETURN TYPE:
None

await fetch_roles()[source]
This function is a coroutine.

Retrieves all Role that the guild has.

Note

This method is an API call. For general usage, consider roles instead.

New in version 1.3.

RETURNS:
All roles in the guild.

RETURN TYPE:
List[Role]

RAISES:
HTTPException – Retrieving the roles failed.

await create_role(*, name=..., permissions=..., color=..., colour=..., hoist=..., mentionable=..., reason=None)[source]
This function is a coroutine.

Creates a Role for the guild.

All fields are optional.

You must have the manage_roles permission to do this.

Changed in version 1.6: Can now pass int to colour keyword-only parameter.

PARAMETERS:
name (str) – The role name. Defaults to ‘new role’.

permissions (Permissions) – The permissions to have. Defaults to no permissions.

colour (Union[Colour, int]) – The colour for the role. Defaults to Colour.default(). This is aliased to color as well.

hoist (bool) – Indicates if the role should be shown separately in the member list. Defaults to False.

mentionable (bool) – Indicates if the role should be mentionable by others. Defaults to False.

reason (Optional[str]) – The reason for creating this role. Shows up on the audit log.

color (Colour | int) –

RETURNS:
The newly created role.

RETURN TYPE:
Role

RAISES:
Forbidden – You do not have permissions to create the role.

HTTPException – Creating the role failed.

InvalidArgument – An invalid keyword argument was given.

await edit_role_positions(positions, *, reason=None)[source]
This function is a coroutine.

Bulk edits a list of Role in the guild.

You must have the manage_roles permission to do this.

New in version 1.4.

Example:

positions = {
    bots_role: 1, # penultimate role
    tester_role: 2,
    admin_role: 6
}

await guild.edit_role_positions(positions=positions)
PARAMETERS:
positions (Dict[Role, int]) – A dict of Role to int to change the positions of each given role.

reason (Optional[str]) – The reason for editing the role positions. Shows up on the audit log.

RETURNS:
A list of all the roles in the guild.

RETURN TYPE:
List[Role]

RAISES:
Forbidden – You do not have permissions to move the roles.

HTTPException – Moving the roles failed.

InvalidArgument – An invalid keyword argument was given.

await kick(user, *, reason=None)[source]
This function is a coroutine.

Kicks a user from the guild.

The user must meet the abc.Snowflake abc.

You must have the kick_members permission to do this.

PARAMETERS:
user (abc.Snowflake) – The user to kick from their guild.

reason (Optional[str]) – The reason the user got kicked.

RAISES:
Forbidden – You do not have the proper permissions to kick.

HTTPException – Kicking failed.

RETURN TYPE:
None

await ban(user, *, delete_message_seconds=None, delete_message_days=None, reason=None)[source]
This function is a coroutine.

Bans a user from the guild.

The user must meet the abc.Snowflake abc.

You must have the ban_members permission to do this.

PARAMETERS:
user (abc.Snowflake) – The user to ban from their guild.

delete_message_seconds (Optional[int]) – The number of seconds worth of messages to delete from the user in the guild. The minimum is 0 and the maximum is 604800 (i.e. 7 days). The default is 0.

delete_message_days (Optional[int]) – *Deprecated parameter*, same as delete_message_seconds but is used for days instead.

reason (Optional[str]) – The reason the user got banned.

RAISES:
Forbidden – You do not have the proper permissions to ban.

HTTPException – Banning failed.

RETURN TYPE:
None

await unban(user, *, reason=None)[source]
This function is a coroutine.

Unbans a user from the guild.

The user must meet the abc.Snowflake abc.

You must have the ban_members permission to do this.

PARAMETERS:
user (abc.Snowflake) – The user to unban.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have the proper permissions to unban.

HTTPException – Unbanning failed.

RETURN TYPE:
None

await vanity_invite()[source]
This function is a coroutine.

Returns the guild’s special vanity invite.

The guild must have VANITY_URL in features.

You must have the manage_guild permission to use this as well.

RETURNS:
The special vanity invite. If None then the guild does not have a vanity invite set.

RETURN TYPE:
Optional[Invite]

RAISES:
Forbidden – You do not have the proper permissions to get this.

HTTPException – Retrieving the vanity invite failed.

await widget()[source]
This function is a coroutine.

Returns the widget of the guild.

Note

The guild must have the widget enabled to get this information.

RETURNS:
The guild’s widget.

RETURN TYPE:
Widget

RAISES:
Forbidden – The widget for this guild is disabled.

HTTPException – Retrieving the widget failed.

await edit_widget(*, enabled=..., channel=...)[source]
This function is a coroutine.

Edits the widget of the guild.

You must have the manage_guild permission to use this

New in version 2.0.

PARAMETERS:
enabled (bool) – Whether to enable the widget for the guild.

channel (Optional[Snowflake]) – The new widget channel. None removes the widget channel.

RAISES:
Forbidden – You do not have permission to edit the widget.

HTTPException – Editing the widget failed.

RETURN TYPE:
None

await chunk(*, cache=True)[source]
This function is a coroutine.

Requests all members that belong to this guild. In order to use this, Intents.members() must be enabled.

This is a websocket operation and can be slow.

New in version 1.5.

PARAMETERS:
cache (bool) – Whether to cache the members as well.

RAISES:
ClientException – The members intent is not enabled.

RETURN TYPE:
None

await query_members(query=None, *, limit=5, user_ids=None, presences=False, cache=True)[source]
This function is a coroutine.

Request members that belong to this guild whose username starts with the query given.

This is a websocket operation and can be slow.

New in version 1.3.

PARAMETERS:
query (Optional[str]) – The string that the username’s start with.

limit (int) – The maximum number of members to send back. This must be a number between 5 and 100.

presences (bool) –

Whether to request for presences to be provided. This defaults to False.

New in version 1.6.

cache (bool) – Whether to cache the members internally. This makes operations such as get_member() work for those that matched.

user_ids (Optional[List[int]]) –

List of user IDs to search for. If the user ID is not in the guild then it won’t be returned.

New in version 1.4.

RETURNS:
The list of members that have matched the query.

RETURN TYPE:
List[Member]

RAISES:
asyncio.TimeoutError – The query timed out waiting for the members.

ValueError – Invalid parameters were passed to the function

ClientException – The presences intent is not enabled.

await change_voice_state(*, channel, self_mute=False, self_deaf=False)[source]
This function is a coroutine.

Changes client’s voice state in the guild.

New in version 1.4.

PARAMETERS:
channel (Optional[VoiceChannel]) – Channel the client wants to join. Use None to disconnect.

self_mute (bool) – Indicates if the client should be self-muted.

self_deaf (bool) – Indicates if the client should be self-deafened.

await welcome_screen()[source]
This function is a coroutine.

Returns the WelcomeScreen of the guild.

The guild must have COMMUNITY in features.

You must have the manage_guild permission in order to get this.

New in version 2.0.

RETURNS:
The welcome screen of guild.

RETURN TYPE:
WelcomeScreen

RAISES:
Forbidden – You do not have the proper permissions to get this.

HTTPException – Retrieving the welcome screen failed somehow.

NotFound – The guild doesn’t have a welcome screen or community feature is disabled.

await edit_welcome_screen(**options)[source]
This function is a coroutine.

A shorthand for WelcomeScreen.edit without fetching the welcome screen.

You must have the manage_guild permission in the guild to do this.

The guild must have COMMUNITY in Guild.features

PARAMETERS:
description (Optional[str]) – The new description of welcome screen.

welcome_channels (Optional[List[WelcomeScreenChannel]]) – The welcome channels. The order of the channels would be same as the passed list order.

enabled (Optional[bool]) – Whether the welcome screen should be displayed.

reason (Optional[str]) – The reason that shows up on audit log.

RETURNS:
The edited welcome screen.

RETURN TYPE:
WelcomeScreen

RAISES:
HTTPException – Editing the welcome screen failed somehow.

Forbidden – You don’t have permissions to edit the welcome screen.

NotFound – This welcome screen does not exist.

await fetch_scheduled_events(*, with_user_count=True)[source]
This function is a coroutine.

Returns a list of ScheduledEvent in the guild.

Note

This method is an API call. For general usage, consider scheduled_events instead.

PARAMETERS:
with_user_count (Optional[bool]) – If the scheduled event should be fetched with the number of users that are interested in the events. Defaults to True.

RETURNS:
The fetched scheduled events.

RETURN TYPE:
List[ScheduledEvent]

RAISES:
ClientException – The scheduled events intent is not enabled.

HTTPException – Getting the scheduled events failed.

await fetch_scheduled_event(event_id, /, *, with_user_count=True)[source]
This function is a coroutine.

Retrieves a ScheduledEvent from event ID.

Note

This method is an API call. If you have Intents.scheduled_events, consider get_scheduled_event() instead.

PARAMETERS:
event_id (int) – The event’s ID to fetch with.

with_user_count (Optional[bool]) – If the scheduled vent should be fetched with the number of users that are interested in the event. Defaults to True.

RETURNS:
The scheduled event from the event ID.

RETURN TYPE:
Optional[ScheduledEvent]

RAISES:
HTTPException – Fetching the event failed.

NotFound – Event not found.

get_scheduled_event(event_id, /)[source]
Returns a Scheduled Event with the given ID.

PARAMETERS:
event_id (int) – The ID to search for.

RETURNS:
The scheduled event or None if not found.

RETURN TYPE:
Optional[ScheduledEvent]

await create_scheduled_event(*, name, description=..., start_time, end_time=..., location, privacy_level=<ScheduledEventPrivacyLevel.guild_only: 2>, reason=None)[source]
This function is a coroutine. Creates a scheduled event.

PARAMETERS:
name (str) – The name of the scheduled event.

description (Optional[str]) – The description of the scheduled event.

start_time (datetime.datetime) – A datetime object of when the scheduled event is supposed to start.

end_time (Optional[datetime.datetime]) – A datetime object of when the scheduled event is supposed to end.

location (ScheduledEventLocation) – The location of where the event is happening.

privacy_level (ScheduledEventPrivacyLevel) – The privacy level of the event. Currently, the only possible value is ScheduledEventPrivacyLevel.guild_only, which is default, so there is no need to change this parameter.

reason (Optional[str]) – The reason to show in the audit log.

RETURNS:
The created scheduled event.

RETURN TYPE:
Optional[ScheduledEvent]

RAISES:
Forbidden – You do not have the Manage Events permission.

HTTPException – The operation failed.

property scheduled_events
A list of scheduled events in this guild.

await fetch_auto_moderation_rules()[source]
This function is a coroutine.

Retrieves a list of auto moderation rules for this guild.

RETURNS:
The auto moderation rules for this guild.

RETURN TYPE:
List[AutoModRule]

RAISES:
HTTPException – Getting the auto moderation rules failed.

Forbidden – You do not have the Manage Guild permission.

await fetch_auto_moderation_rule(id)[source]
This function is a coroutine.

Retrieves a AutoModRule from rule ID.

RETURNS:
The requested auto moderation rule.

RETURN TYPE:
AutoModRule

RAISES:
HTTPException – Getting the auto moderation rule failed.

Forbidden – You do not have the Manage Guild permission.

PARAMETERS:
id (int) –

await create_auto_moderation_rule(*, name, event_type, trigger_type, trigger_metadata, actions, enabled=False, exempt_roles=None, exempt_channels=None, reason=None)[source]
Creates an auto moderation rule.

PARAMETERS:
name (str) – The name of the auto moderation rule.

event_type (AutoModEventType) – The type of event that triggers the rule.

trigger_type (AutoModTriggerType) – The rule’s trigger type.

trigger_metadata (AutoModTriggerMetadata) – The rule’s trigger metadata.

actions (List[AutoModAction]) – The actions to take when the rule is triggered.

enabled (bool) – Whether the rule is enabled.

exempt_roles (List[abc.Snowflake]) – A list of roles that are exempt from the rule.

exempt_channels (List[abc.Snowflake]) – A list of channels that are exempt from the rule.

reason (Optional[str]) – The reason for creating the rule. Shows up in the audit log.

RETURNS:
The new auto moderation rule.

RETURN TYPE:
AutoModRule

RAISES:
HTTPException – Creating the auto moderation rule failed.

Forbidden – You do not have the Manage Guild permission.

class discord.BanEntry
A namedtuple which represents a ban returned from bans().

reason
The reason this user was banned.

TYPE:
Optional[str]

user
The User that was banned.

TYPE:
User

class discord.Member(*, data, guild, state)[source]
Attributes
accent_color
accent_colour
activities
activity
avatar
banner
bot
color
colour
communication_disabled_until
created_at
default_avatar
desktop_status
discriminator
display_avatar
display_name
dm_channel
guild
guild_avatar
guild_permissions
id
joined_at
jump_url
mention
mobile_status
mutual_guilds
name
nick
pending
premium_since
public_flags
raw_status
roles
status
system
timed_out
top_role
voice
web_status
Methods
add_roles
ban
can_send
create_dm
edit
fetch_message
get_role
history
is_on_mobile
kick
mentioned_in
move_to
pins
remove_roles
remove_timeout
request_to_speak
send
timeout
timeout_for
trigger_typing
typing
unban
Represents a Discord member to a Guild.

This implements a lot of the functionality of User.

x == y
Checks if two members are equal. Note that this works with User instances too.

x != y
Checks if two members are not equal. Note that this works with User instances too.

hash(x)
Returns the member’s hash.

str(x)
Returns the member’s name with the discriminator.

joined_at
An aware datetime object that specifies the date and time in UTC that the member joined the guild. If the member left and rejoined the guild, this will be the latest date. In certain cases, this can be None.

TYPE:
Optional[datetime.datetime]

activities
The activities that the user is currently doing.

Note

Due to a Discord API limitation, a user’s Spotify activity may not appear if they are listening to a song with a title longer than 128 characters.

TYPE:
Tuple[Union[BaseActivity, Spotify]]

guild
The guild that the member belongs to.

TYPE:
Guild

nick
The guild specific nickname of the user.

TYPE:
Optional[str]

pending
Whether the member is pending member verification.

New in version 1.6.

TYPE:
bool

premium_since
An aware datetime object that specifies the date and time in UTC when the member used their “Nitro boost” on the guild, if available. This could be None.

TYPE:
Optional[datetime.datetime]

communication_disabled_until
An aware datetime object that specifies the date and time in UTC when the member will be removed from timeout.

New in version 2.0.

TYPE:
Optional[datetime.datetime]

PARAMETERS:
data (MemberWithUser) –

guild (Guild) –

state (ConnectionState) –

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

property name
Equivalent to User.name

property id
Equivalent to User.id

property discriminator
Equivalent to User.discriminator

property bot
Equivalent to User.bot

property system
Equivalent to User.system

property created_at
Equivalent to User.created_at

property default_avatar
Equivalent to User.default_avatar

property avatar
Equivalent to User.avatar

property dm_channel
Equivalent to User.dm_channel

await create_dm()
This function is a coroutine.

Creates a DMChannel with this user.

This should be rarely called, as this is done transparently for most people.

RETURNS:
The channel that was created.

RETURN TYPE:
DMChannel

property mutual_guilds
Equivalent to User.mutual_guilds

property public_flags
Equivalent to User.public_flags

property banner
Equivalent to User.banner

property accent_color
Equivalent to User.accent_color

property accent_colour
Equivalent to User.accent_colour

property raw_status
The member’s overall status as a string value.

New in version 1.5.

RETURN TYPE:
str

property status
The member’s overall status. If the value is unknown, then it will be a str instead.

RETURN TYPE:
Status

property mobile_status
The member’s status on a mobile device, if applicable.

RETURN TYPE:
Status

property desktop_status
The member’s status on the desktop client, if applicable.

RETURN TYPE:
Status

property web_status
The member’s status on the web client, if applicable.

RETURN TYPE:
Status

is_on_mobile()[source]
A helper function that determines if a member is active on a mobile device.

RETURN TYPE:
bool

property colour
A property that returns a colour denoting the rendered colour for the member. If the default colour is the one rendered then an instance of Colour.default() is returned.

There is an alias for this named color.

RETURN TYPE:
Colour

property color
A property that returns a color denoting the rendered color for the member. If the default color is the one rendered then an instance of Colour.default() is returned.

There is an alias for this named colour.

RETURN TYPE:
Colour

property roles
A list of Role that the member belongs to. Note that the first element of this list is always the default ‘@everyone’ role.

These roles are sorted by their position in the role hierarchy.

property mention
Returns a string that allows you to mention the member.

RETURN TYPE:
str

property display_name
Returns the user’s display name.

For regular users this is just their username, but if they have a guild specific nickname then that is returned instead.

RETURN TYPE:
str

property display_avatar
Returns the member’s display avatar.

For regular members this is just their avatar, but if they have a guild specific avatar then that is returned instead.

New in version 2.0.

RETURN TYPE:
Asset

property guild_avatar
Returns an Asset for the guild avatar the member has. If unavailable, None is returned.

New in version 2.0.

RETURN TYPE:
Asset | None

property activity
Returns the primary activity the user is currently doing. Could be None if no activity is being done.

Note

Due to a Discord API limitation, this may be None if the user is listening to a song on Spotify with a title longer than 128 characters.

Note

A user may have multiple activities, these can be accessed under activities.

RETURN TYPE:
ActivityTypes | None

mentioned_in(message)[source]
Checks if the member is mentioned in the specified message.

PARAMETERS:
message (Message) – The message to check if you’re mentioned in.

RETURNS:
Indicates if the member is mentioned in the message.

RETURN TYPE:
bool

property top_role
Returns the member’s highest role.

This is useful for figuring where a member stands in the role hierarchy chain.

RETURN TYPE:
Role

property guild_permissions
Returns the member’s guild permissions.

This only takes into consideration the guild permissions and not most of the implied permissions or any of the channel permission overwrites. For 100% accurate permission calculation, please use abc.GuildChannel.permissions_for().

This does take into consideration guild ownership and the administrator implication.

RETURN TYPE:
Permissions

property voice
Returns the member’s current voice state.

RETURN TYPE:
VoiceState | None

property timed_out
Returns whether the member is timed out.

New in version 2.0.

RETURN TYPE:
bool

await ban(*, delete_message_seconds=None, delete_message_days=None, reason=None)[source]
This function is a coroutine.

Bans this member. Equivalent to Guild.ban().

PARAMETERS:
delete_message_seconds (int | None) –

delete_message_days (Literal[(0, 1, 2, 3, 4, 5, 6, 7)] | None) –

reason (str | None) –

RETURN TYPE:
None

await unban(*, reason=None)[source]
This function is a coroutine.

Unbans this member. Equivalent to Guild.unban().

PARAMETERS:
reason (str | None) –

RETURN TYPE:
None

await kick(*, reason=None)[source]
This function is a coroutine.

Kicks this member. Equivalent to Guild.kick().

PARAMETERS:
reason (str | None) –

RETURN TYPE:
None

await edit(*, nick=..., mute=..., deafen=..., suppress=..., roles=..., voice_channel=..., reason=None, communication_disabled_until=...)[source]
This function is a coroutine.

Edits the member’s data.

Depending on the parameter passed, this requires different permissions listed below:

Parameter

Permission

nick

Permissions.manage_nicknames

mute

Permissions.mute_members

deafen

Permissions.deafen_members

roles

Permissions.manage_roles

voice_channel

Permissions.move_members

communication_disabled_until

Permissions.moderate_members

All parameters are optional.

Changed in version 1.1: Can now pass None to voice_channel to kick a member from voice.

Changed in version 2.0: The newly member is now optionally returned, if applicable.

PARAMETERS:
nick (Optional[str]) – The member’s new nickname. Use None to remove the nickname.

mute (bool) – Indicates if the member should be guild muted or un-muted.

deafen (bool) – Indicates if the member should be guild deafened or un-deafened.

suppress (bool) –

Indicates if the member should be suppressed in stage channels.

New in version 1.7.

roles (List[Role]) – The member’s new list of roles. This replaces the roles.

voice_channel (Optional[VoiceChannel]) – The voice channel to move the member to. Pass None to kick them from voice.

reason (Optional[str]) – The reason for editing this member. Shows up on the audit log.

communication_disabled_until (Optional[datetime.datetime]) –

Temporarily puts the member in timeout until this time. If the value is None, then the user is removed from timeout.

New in version 2.0.

RETURNS:
The newly updated member, if applicable. This is only returned when certain fields are updated.

RETURN TYPE:
Optional[Member]

RAISES:
Forbidden – You do not have the proper permissions to the action requested.

HTTPException – The operation failed.

await timeout(until, *, reason=None)[source]
This function is a coroutine.

Applies a timeout to a member in the guild until a set datetime.

You must have the moderate_members permission to timeout a member.

PARAMETERS:
until (datetime.datetime) – The date and time to timeout the member for. If this is None then the member is removed from timeout.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to timeout members.

HTTPException – An error occurred doing the request.

RETURN TYPE:
None

await timeout_for(duration, *, reason=None)[source]
This function is a coroutine.

Applies a timeout to a member in the guild for a set duration. A shortcut method for timeout(), and equivalent to timeout(until=datetime.utcnow() + duration, reason=reason).

You must have the moderate_members permission to timeout a member.

PARAMETERS:
duration (datetime.timedelta) – The duration to timeout the member for.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to timeout members.

HTTPException – An error occurred doing the request.

RETURN TYPE:
None

await remove_timeout(*, reason=None)[source]
This function is a coroutine.

Removes the timeout from a member.

You must have the moderate_members permission to remove the timeout.

This is equivalent to calling timeout() and passing None to the until parameter.

PARAMETERS:
reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to remove the timeout.

HTTPException – An error occurred doing the request.

RETURN TYPE:
None

await request_to_speak()[source]
This function is a coroutine.

Request to speak in the connected channel.

Only applies to stage channels.

Note

Requesting members that are not the client is equivalent to edit providing suppress as False.

New in version 1.7.

RAISES:
Forbidden – You do not have the proper permissions to the action requested.

HTTPException – The operation failed.

RETURN TYPE:
None

await move_to(channel, *, reason=None)[source]
This function is a coroutine.

Moves a member to a new voice channel (they must be connected first).

You must have the move_members permission to use this.

This raises the same exceptions as edit().

Changed in version 1.1: Can now pass None to kick a member from voice.

PARAMETERS:
channel (Optional[VoiceChannel]) – The new voice channel to move the member to. Pass None to kick them from voice.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RETURN TYPE:
None

await add_roles(*roles, reason=None, atomic=True)[source]
This function is a coroutine.

Gives the member a number of Roles.

You must have the manage_roles permission to use this, and the added Roles must appear lower in the list of roles than the highest role of the member.

PARAMETERS:
*roles (abc.Snowflake) – An argument list of abc.Snowflake representing a Role to give to the member.

reason (Optional[str]) – The reason for adding these roles. Shows up on the audit log.

atomic (bool) – Whether to atomically add roles. This will ensure that multiple operations will always be applied regardless of the current state of the cache.

RAISES:
Forbidden – You do not have permissions to add these roles.

HTTPException – Adding roles failed.

RETURN TYPE:
None

can_send(*objects)
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

await fetch_message(id, /)
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

property jump_url
Equivalent to User.jump_url

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

await remove_roles(*roles, reason=None, atomic=True)[source]
This function is a coroutine.

Removes Roles from this member.

You must have the manage_roles permission to use this, and the removed Roles must appear lower in the list of roles than the highest role of the member.

PARAMETERS:
*roles (abc.Snowflake) – An argument list of abc.Snowflake representing a Role to remove from the member.

reason (Optional[str]) – The reason for removing these roles. Shows up on the audit log.

atomic (bool) – Whether to atomically remove roles. This will ensure that multiple operations will always be applied regardless of the current state of the cache.

RAISES:
Forbidden – You do not have permissions to remove these roles.

HTTPException – Removing the roles failed.

RETURN TYPE:
None

await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

get_role(role_id, /)[source]
Returns a role with the given ID from roles which the member has.

New in version 2.0.

PARAMETERS:
role_id (int) – The ID to search for.

RETURNS:
The role or None if not found in the member’s roles.

RETURN TYPE:
Optional[Role]

class discord.Template(*, state, data)[source]
Attributes
code
created_at
creator
description
is_dirty
name
source_guild
updated_at
url
uses
Methods
create_guild
delete
edit
sync
Represents a Discord template.

New in version 1.4.

code
The template code.

TYPE:
str

uses
How many times the template has been used.

TYPE:
int

name
The name of the template.

TYPE:
str

description
The description of the template.

TYPE:
str

creator
The creator of the template.

TYPE:
User

created_at
An aware datetime in UTC representing when the template was created.

TYPE:
datetime.datetime

updated_at
An aware datetime in UTC representing when the template was last updated. This is referred to as “last synced” in the official Discord client.

TYPE:
datetime.datetime

source_guild
The source guild.

TYPE:
Guild

is_dirty
Whether the template has unsynced changes.

New in version 2.0.

TYPE:
Optional[bool]

PARAMETERS:
state (ConnectionState) –

data (Template) –

await create_guild(name, icon=None)[source]
This function is a coroutine.

Creates a Guild using the template.

Bot accounts in more than 10 guilds are not allowed to create guilds.

PARAMETERS:
name (str) – The name of the guild.

icon (bytes) – The bytes-like object representing the icon. See ClientUser.edit() for more details on what is expected.

RETURNS:
The guild created. This is not the same guild that is added to cache.

RETURN TYPE:
Guild

RAISES:
HTTPException – Guild creation failed.

InvalidArgument – Invalid icon image format given. Must be PNG or JPG.

await sync()[source]
This function is a coroutine.

Sync the template to the guild’s current state.

You must have the manage_guild permission in the source guild to do this.

New in version 1.7.

Changed in version 2.0: The template is no longer synced in-place, instead it is returned.

RETURNS:
The newly synced template.

RETURN TYPE:
Template

RAISES:
HTTPException – Syncing the template failed.

Forbidden – You don’t have permissions to sync the template.

NotFound – This template does not exist.

await edit(*, name=..., description=...)[source]
This function is a coroutine.

Edit the template metadata.

You must have the manage_guild permission in the source guild to do this.

New in version 1.7.

Changed in version 2.0: The template is no longer edited in-place, instead it is returned.

PARAMETERS:
name (str) – The template’s new name.

description (Optional[str]) – The template’s new description.

RETURNS:
The newly edited template.

RETURN TYPE:
Template

RAISES:
HTTPException – Editing the template failed.

Forbidden – You don’t have permissions to edit the template.

NotFound – This template does not exist.

await delete()[source]
This function is a coroutine.

Delete the template.

You must have the manage_guild permission in the source guild to do this.

New in version 1.7.

RAISES:
HTTPException – Deleting the template failed.

Forbidden – You don’t have permissions to delete the template.

NotFound – This template does not exist.

RETURN TYPE:
None

property url
The template url.

New in version 2.0.

RETURN TYPE:
str

class discord.AutoModRule(*, state, data)[source]
Attributes
actions
creator
creator_id
enabled
event_type
exempt_channel_ids
exempt_channels
exempt_role_ids
exempt_roles
guild
id
name
trigger_metadata
trigger_type
Methods
delete
edit
Represents a guild’s auto moderation rule.

New in version 2.0.

x == y
Checks if two rules are equal.

x != y
Checks if two rules are not equal.

hash(x)
Returns the rule’s hash.

str(x)
Returns the rule’s name.

id
The rule’s ID.

TYPE:
int

name
The rule’s name.

TYPE:
str

creator_id
The ID of the user who created this rule.

TYPE:
int

event_type
Indicates in what context the rule is checked.

TYPE:
AutoModEventType

trigger_type
Indicates what type of information is checked to determine whether the rule is triggered.

TYPE:
AutoModTriggerType

trigger_metadata
The rule’s trigger metadata.

TYPE:
AutoModTriggerMetadata

actions
The actions to perform when the rule is triggered.

TYPE:
List[AutoModAction]

enabled
Whether this rule is enabled.

TYPE:
bool

exempt_role_ids
The IDs of the roles that are exempt from this rule.

TYPE:
List[int]

exempt_channel_ids
The IDs of the channels that are exempt from this rule.

TYPE:
List[int]

PARAMETERS:
state (ConnectionState) –

data (AutoModRule) –

property guild
The guild this rule belongs to.

property creator
The member who created this rule.

property exempt_roles
The roles that are exempt from this rule.

If a role is not found in the guild’s cache, then it will be returned as an Object.

property exempt_channels
The channels that are exempt from this rule.

If a channel is not found in the guild’s cache, then it will be returned as an Object.

await delete(reason=None)[source]
This function is a coroutine.

Deletes this rule.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this rule. Shows up in the audit log.

RAISES:
Forbidden – You do not have the Manage Guild permission.

HTTPException – The operation failed.

RETURN TYPE:
None

await edit(*, name=..., event_type=..., trigger_metadata=..., actions=..., enabled=..., exempt_roles=..., exempt_channels=..., reason=None)[source]
This function is a coroutine.

Edits this rule.

PARAMETERS:
name (str) – The rule’s new name.

event_type (AutoModEventType) – The new context in which the rule is checked.

trigger_metadata (AutoModTriggerMetadata) – The new trigger metadata.

actions (List[AutoModAction]) – The new actions to perform when the rule is triggered.

enabled (bool) – Whether this rule is enabled.

exempt_roles (List[Snowflake]) – The roles that will be exempt from this rule.

exempt_channels (List[Snowflake]) – The channels that will be exempt from this rule.

reason (Optional[str]) – The reason for editing this rule. Shows up in the audit log.

RETURNS:
The newly updated rule, if applicable. This is only returned when fields are updated.

RETURN TYPE:
Optional[AutoModRule]

RAISES:
Forbidden – You do not have the Manage Guild permission.

HTTPException – The operation failed.

Invites
class discord.PartialInviteGuild(state, data, id)[source]
Attributes
banner
created_at
description
features
icon
id
name
splash
verification_level
Represents a “partial” invite guild.

This model will be given when the user is not part of the guild the Invite resolves to.

x == y
Checks if two partial guilds are the same.

x != y
Checks if two partial guilds are not the same.

hash(x)
Return the partial guild’s hash.

str(x)
Returns the partial guild’s name.

name
The partial guild’s name.

TYPE:
str

id
The partial guild’s ID.

TYPE:
int

verification_level
The partial guild’s verification level.

TYPE:
VerificationLevel

features
A list of features the guild has. See Guild.features for more information.

TYPE:
List[str]

description
The partial guild’s description.

TYPE:
Optional[str]

PARAMETERS:
state (ConnectionState) –

data (InviteGuild) –

id (int) –

property created_at
Returns the guild’s creation time in UTC.

RETURN TYPE:
datetime

property icon
Returns the guild’s icon asset, if available.

RETURN TYPE:
Asset | None

property banner
Returns the guild’s banner asset, if available.

RETURN TYPE:
Asset | None

property splash
Returns the guild’s invite splash asset, if available.

RETURN TYPE:
Asset | None

class discord.PartialInviteChannel(data)[source]
Attributes
created_at
id
mention
name
type
Represents a “partial” invite channel.

This model will be given when the user is not part of the guild the Invite resolves to.

x == y
Checks if two partial channels are the same.

x != y
Checks if two partial channels are not the same.

hash(x)
Return the partial channel’s hash.

str(x)
Returns the partial channel’s name.

name
The partial channel’s name.

TYPE:
str

id
The partial channel’s ID.

TYPE:
int

type
The partial channel’s type.

TYPE:
ChannelType

PARAMETERS:
data (PartialChannel) –

property mention
The string that allows you to mention the channel.

RETURN TYPE:
str

property created_at
Returns the channel’s creation time in UTC.

RETURN TYPE:
datetime

class discord.Invite(*, state, data, guild=None, channel=None)[source]
Attributes
approximate_member_count
approximate_presence_count
channel
code
created_at
expires_at
guild
id
inviter
max_age
max_uses
revoked
scheduled_event
target_application
target_type
target_user
temporary
url
uses
Methods
delete
set_scheduled_event
Represents a Discord Guild or abc.GuildChannel invite.

Depending on the way this object was created, some of the attributes can have a value of None.

x == y
Checks if two invites are equal.

x != y
Checks if two invites are not equal.

hash(x)
Returns the invite hash.

str(x)
Returns the invite URL.

The following table illustrates what methods will obtain the attributes:

Attribute

Method

max_age

abc.GuildChannel.invites(), Guild.invites()

max_uses

abc.GuildChannel.invites(), Guild.invites()

created_at

abc.GuildChannel.invites(), Guild.invites()

temporary

abc.GuildChannel.invites(), Guild.invites()

uses

abc.GuildChannel.invites(), Guild.invites()

approximate_member_count

Client.fetch_invite() with with_counts enabled

approximate_presence_count

Client.fetch_invite() with with_counts enabled

expires_at

Client.fetch_invite() with with_expiration enabled

If it’s not in the table above then it is available by all methods.

max_age
How long before the invite expires in seconds. A value of 0 indicates that it doesn’t expire.

TYPE:
int

code
The URL fragment used for the invite.

TYPE:
str

guild
The guild the invite is for. Can be None if it’s from a group direct message.

TYPE:
Optional[Union[Guild, Object, PartialInviteGuild]]

revoked
Indicates if the invite has been revoked.

TYPE:
bool

created_at
An aware UTC datetime object denoting the time the invite was created.

TYPE:
datetime.datetime

temporary
Indicates that the invite grants temporary membership. If True, members who joined via this invite will be kicked upon disconnect.

TYPE:
bool

uses
How many times the invite has been used.

TYPE:
int

max_uses
How many times the invite can be used. A value of 0 indicates that it has unlimited uses.

TYPE:
int

inviter
The user who created the invite.

TYPE:
Optional[User]

approximate_member_count
The approximate number of members in the guild.

TYPE:
Optional[int]

approximate_presence_count
The approximate number of members currently active in the guild. This includes idle, dnd, online, and invisible members. Offline members are excluded.

TYPE:
Optional[int]

expires_at
The expiration date of the invite. If the value is None when received through Client.fetch_invite with with_expiration enabled, the invite will never expire.

New in version 2.0.

TYPE:
Optional[datetime.datetime]

channel
The channel the invite is for.

TYPE:
Union[abc.GuildChannel, Object, PartialInviteChannel]

target_type
The type of target for the voice channel invite.

New in version 2.0.

TYPE:
InviteTarget

target_user
The user whose stream to display for this invite, if any.

New in version 2.0.

TYPE:
Optional[User]

target_application
The embedded application the invite targets, if any.

New in version 2.0.

TYPE:
Optional[PartialAppInfo]

scheduled_event
The scheduled event linked with the invite.

TYPE:
Optional[ScheduledEvent]

PARAMETERS:
state (ConnectionState) –

data (InvitePayload) –

guild (PartialInviteGuild | Guild | None) –

channel (PartialInviteChannel | GuildChannel | None) –

property id
Returns the proper code portion of the invite.

RETURN TYPE:
str

property url
A property that retrieves the invite URL.

RETURN TYPE:
str

await delete(*, reason=None)[source]
This function is a coroutine.

Revokes the instant invite.

You must have the manage_channels permission to do this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this invite. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to revoke invites.

NotFound – The invite is invalid or expired.

HTTPException – Revoking the invite failed.

set_scheduled_event(event)[source]
Links the given scheduled event to this invite.

Note

Scheduled events aren’t actually associated with invites on the API. Any guild channel invite can have an event attached to it. Using abc.GuildChannel.create_invite(), Client.fetch_invite(), or this method, you can link scheduled events.

New in version 2.0.

PARAMETERS:
event (ScheduledEvent) – The scheduled event object to link.

RETURN TYPE:
None

Role
class discord.Role(*, guild, state, data)[source]
Attributes
color
colour
created_at
guild
hoist
icon
id
managed
members
mention
mentionable
name
permissions
position
tags
unicode_emoji
Methods
delete
edit
is_assignable
is_bot_managed
is_default
is_integration
is_premium_subscriber
Represents a Discord role in a Guild.

x == y
Checks if two roles are equal.

x != y
Checks if two roles are not equal.

x > y
Checks if a role is higher than another in the hierarchy.

x < y
Checks if a role is lower than another in the hierarchy.

x >= y
Checks if a role is higher or equal to another in the hierarchy.

x <= y
Checks if a role is lower or equal to another in the hierarchy.

hash(x)
Return the role’s hash.

str(x)
Returns the role’s name.

id
The ID for the role.

TYPE:
int

name
The name of the role.

TYPE:
str

guild
The guild the role belongs to.

TYPE:
Guild

hoist
Indicates if the role will be displayed separately from other members.

TYPE:
bool

position
The position of the role. This number is usually positive. The bottom role has a position of 0.

Warning

Multiple roles can have the same position number. As a consequence of this, comparing via role position is prone to subtle bugs if checking for role hierarchy. The recommended and correct way to compare for roles in the hierarchy is using the comparison operators on the role objects themselves.

TYPE:
int

managed
Indicates if the role is managed by the guild through some form of integrations such as Twitch.

TYPE:
bool

mentionable
Indicates if the role can be mentioned by users.

TYPE:
bool

tags
The role tags associated with this role.

TYPE:
Optional[RoleTags]

unicode_emoji
The role’s unicode emoji. Only available to guilds that contain ROLE_ICONS in Guild.features.

New in version 2.0.

TYPE:
Optional[str]

PARAMETERS:
guild (Guild) –

state (ConnectionState) –

data (Role) –

is_default()[source]
Checks if the role is the default role.

RETURN TYPE:
bool

is_bot_managed()[source]
Whether the role is associated with a bot.

New in version 1.6.

RETURN TYPE:
bool

is_premium_subscriber()[source]
Whether the role is the premium subscriber, AKA “boost”, role for the guild.

New in version 1.6.

RETURN TYPE:
bool

is_integration()[source]
Whether the role is managed by an integration.

New in version 1.6.

RETURN TYPE:
bool

is_assignable()[source]
Whether the role is able to be assigned or removed by the bot.

New in version 2.0.

RETURN TYPE:
bool

property permissions
Returns the role’s permissions.

RETURN TYPE:
Permissions

property colour
Returns the role colour. An alias exists under color.

RETURN TYPE:
Colour

property color
Returns the role color. An alias exists under colour.

RETURN TYPE:
Colour

property created_at
Returns the role’s creation time in UTC.

RETURN TYPE:
datetime

property mention
Returns a string that allows you to mention a role.

RETURN TYPE:
str

property members
Returns all the members with this role.

property icon
Returns the role’s icon asset, if available.

New in version 2.0.

RETURN TYPE:
Asset | None

await edit(*, name=..., permissions=..., colour=..., color=..., hoist=..., mentionable=..., position=..., reason=..., icon=..., unicode_emoji=...)[source]
This function is a coroutine.

Edits the role.

You must have the manage_roles permission to use this.

All fields are optional.

Changed in version 1.4: Can now pass int to colour keyword-only parameter.

Changed in version 2.0: Edits are no longer in-place, the newly edited role is returned instead. Added icon and unicode_emoji.

PARAMETERS:
name (str) – The new role name to change to.

permissions (Permissions) – The new permissions to change to.

colour (Union[Colour, int]) – The new colour to change to. (aliased to color as well)

hoist (bool) – Indicates if the role should be shown separately in the member list.

mentionable (bool) – Indicates if the role should be mentionable by others.

position (int) – The new role’s position. This must be below your top role’s position, or it will fail.

reason (Optional[str]) – The reason for editing this role. Shows up on the audit log.

icon (Optional[bytes]) – A bytes-like object representing the icon. Only PNG/JPEG/WebP is supported. If this argument is passed, unicode_emoji is set to None. Only available to guilds that contain ROLE_ICONS in Guild.features. Could be None to denote removal of the icon.

unicode_emoji (Optional[str]) – The role’s unicode emoji. If this argument is passed, icon is set to None. Only available to guilds that contain ROLE_ICONS in Guild.features.

color (Colour | int) –

RETURNS:
The newly edited role.

RETURN TYPE:
Role

RAISES:
Forbidden – You do not have permissions to change the role.

HTTPException – Editing the role failed.

InvalidArgument – An invalid position was given or the default role was asked to be moved.

await delete(*, reason=None)[source]
This function is a coroutine.

Deletes the role.

You must have the manage_roles permission to use this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this role. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to delete the role.

HTTPException – Deleting the role failed.

RETURN TYPE:
None

class discord.RoleTags(data)[source]
Attributes
bot_id
integration_id
Methods
is_bot_managed
is_integration
is_premium_subscriber
Represents tags on a role.

A role tag is a piece of extra information attached to a managed role that gives it context for the reason the role is managed.

While this can be accessed, a useful interface is also provided in the Role and Guild classes as well.

New in version 1.6.

bot_id
The bot’s user ID that manages this role.

TYPE:
Optional[int]

integration_id
The integration ID that manages the role.

TYPE:
Optional[int]

PARAMETERS:
data (RoleTags) –

is_bot_managed()[source]
Whether the role is associated with a bot.

RETURN TYPE:
bool

is_premium_subscriber()[source]
Whether the role is the premium subscriber, AKA “boost”, role for the guild.

RETURN TYPE:
bool

is_integration()[source]
Whether the role is managed by an integration.

RETURN TYPE:
bool

Scheduled Event
class discord.ScheduledEvent(*, state, guild, creator, data)[source]
Attributes
cover
created_at
creator
creator_id
description
end_time
guild
interested
location
name
privacy_level
start_time
status
subscriber_count
url
Methods
cancel
complete
delete
edit
start
subscribers
Represents a Discord Guild Scheduled Event.

x == y
Checks if two scheduled events are equal.

x != y
Checks if two scheduled events are not equal.

hash(x)
Returns the scheduled event’s hash.

str(x)
Returns the scheduled event’s name.

New in version 2.0.

guild
The guild where the scheduled event is happening.

TYPE:
Guild

name
The name of the scheduled event.

TYPE:
str

description
The description of the scheduled event.

TYPE:
Optional[str]

start_time
The time when the event will start

TYPE:
datetime.datetime

end_time
The time when the event is supposed to end.

TYPE:
Optional[datetime.datetime]

status
The status of the scheduled event.

TYPE:
ScheduledEventStatus

location
The location of the event. See ScheduledEventLocation for more information.

TYPE:
ScheduledEventLocation

subscriber_count
The number of users that have marked themselves as interested in the event.

TYPE:
Optional[int]

creator_id
The ID of the user who created the event. It may be None because events created before October 25th, 2021, haven’t had their creators tracked.

TYPE:
Optional[int]

creator
The resolved user object of who created the event.

TYPE:
Optional[User]

privacy_level
The privacy level of the event. Currently, the only possible value is ScheduledEventPrivacyLevel.guild_only, which is default, so there is no need to use this attribute.

TYPE:
ScheduledEventPrivacyLevel

PARAMETERS:
state (ConnectionState) –

guild (Guild) –

creator (Member | None) –

data (ScheduledEventPayload) –

property created_at
Returns the scheduled event’s creation time in UTC.

RETURN TYPE:
datetime

property interested
An alias to subscriber_count

RETURN TYPE:
int | None

property url
The url to reference the scheduled event.

RETURN TYPE:
str

property cover
Returns the scheduled event cover image asset, if available.

RETURN TYPE:
Asset | None

await edit(*, reason=None, name=..., description=..., status=..., location=..., start_time=..., end_time=..., cover=..., privacy_level=<ScheduledEventPrivacyLevel.guild_only: 2>)[source]
This function is a coroutine.

Edits the Scheduled Event’s data

All parameters are optional unless location.type is ScheduledEventLocationType.external, then end_time is required.

Will return a new ScheduledEvent object if applicable.

PARAMETERS:
name (str) – The new name of the event.

description (str) – The new description of the event.

location (ScheduledEventLocation) – The location of the event.

status (ScheduledEventStatus) – The status of the event. It is recommended, however, to use start(), complete(), and cancel() to edit statuses instead.

start_time (datetime.datetime) – The new starting time for the event.

end_time (datetime.datetime) – The new ending time of the event.

privacy_level (ScheduledEventPrivacyLevel) – The privacy level of the event. Currently, the only possible value is ScheduledEventPrivacyLevel.guild_only, which is default, so there is no need to change this parameter.

reason (Optional[str]) – The reason to show in the audit log.

cover (Optional[bytes]) – The cover image of the scheduled event.

RETURNS:
The newly updated scheduled event object. This is only returned when certain fields are updated.

RETURN TYPE:
Optional[ScheduledEvent]

RAISES:
Forbidden – You do not have the Manage Events permission.

HTTPException – The operation failed.

await delete()[source]
This function is a coroutine.

Deletes the scheduled event.

RAISES:
Forbidden – You do not have the Manage Events permission.

HTTPException – The operation failed.

RETURN TYPE:
None

await start(*, reason=None)[source]
This function is a coroutine.

Starts the scheduled event. Shortcut from edit().

Note

This method can only be used if status is ScheduledEventStatus.scheduled.

PARAMETERS:
reason (Optional[str]) – The reason to show in the audit log.

RETURNS:
The newly updated scheduled event object.

RETURN TYPE:
Optional[ScheduledEvent]

RAISES:
Forbidden – You do not have the Manage Events permission.

HTTPException – The operation failed.

await complete(*, reason=None)[source]
This function is a coroutine.

Ends/completes the scheduled event. Shortcut from edit().

Note

This method can only be used if status is ScheduledEventStatus.active.

PARAMETERS:
reason (Optional[str]) – The reason to show in the audit log.

RETURNS:
The newly updated scheduled event object.

RETURN TYPE:
Optional[ScheduledEvent]

RAISES:
Forbidden – You do not have the Manage Events permission.

HTTPException – The operation failed.

await cancel(*, reason=None)[source]
This function is a coroutine.

Cancels the scheduled event. Shortcut from edit().

Note

This method can only be used if status is ScheduledEventStatus.scheduled.

PARAMETERS:
reason (Optional[str]) – The reason to show in the audit log.

RETURNS:
The newly updated scheduled event object.

RETURN TYPE:
Optional[ScheduledEvent]

RAISES:
Forbidden – You do not have the Manage Events permission.

HTTPException – The operation failed.

subscribers(*, limit=100, as_member=False, before=None, after=None)[source]
Returns an AsyncIterator representing the users or members subscribed to the event.

The after and before parameters must represent member or user objects and meet the abc.Snowflake abc.

Note

Even is as_member is set to True, if the user is outside the guild, it will be a User object.

PARAMETERS:
limit (Optional[int]) – The maximum number of results to return.

as_member (Optional[bool]) – Whether to fetch Member objects instead of user objects. There may still be User objects if the user is outside the guild.

before (Optional[Union[abc.Snowflake, datetime.datetime]]) – Retrieves users before this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[abc.Snowflake, datetime.datetime]]) – Retrieves users after this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

YIELDS:
Union[User, Member] – The subscribed Member. If as_member is set to False or the user is outside the guild, it will be a User object.

RAISES:
HTTPException – Fetching the subscribed users failed.

EXAMPLES

Usage

async for user in event.subscribers(limit=100):
    print(user.name)
Flattening into a list:

users = await event.subscribers(limit=100).flatten()
# users is now a list of User...
Getting members instead of user objects:

async for member in event.subscribers(limit=100, as_member=True):
    print(member.display_name)
RETURN TYPE:
AsyncIterator

class discord.ScheduledEventLocation(*, state, value)[source]
Represents a scheduled event’s location.

Setting the value to its corresponding type will set the location type automatically:

Type of Input

Location Type

StageChannel VoiceChannel str

ScheduledEventLocationType.stage_instance ScheduledEventLocationType.voice ScheduledEventLocationType.external

New in version 2.0.

value
The actual location of the scheduled event.

TYPE:
Union[str, StageChannel, VoiceChannel, Object]

type
The type of location.

TYPE:
ScheduledEventLocationType

PARAMETERS:
state (ConnectionState) –

value (str | int | StageChannel | VoiceChannel) –

Welcome Screen
class discord.WelcomeScreen(data, guild)[source]
Attributes
description
enabled
guild
welcome_channels
Methods
edit
Represents the welcome screen of a guild.

New in version 2.0.

description
The description text displayed on the welcome screen.

TYPE:
str

welcome_channels
A list of channels displayed on welcome screen.

TYPE:
List[WelcomeScreenChannel]

PARAMETERS:
data (WelcomeScreen) –

guild (Guild) –

property enabled
Indicates whether the welcome screen is enabled or not.

RETURN TYPE:
bool

property guild
The guild this welcome screen belongs to.

RETURN TYPE:
Guild

await edit(**options)[source]
This function is a coroutine.

Edits the welcome screen.

You must have the manage_guild permission in the guild to do this.

PARAMETERS:
description (Optional[str]) – The new description of welcome screen.

welcome_channels (Optional[List[WelcomeScreenChannel]]) – The welcome channels. The order of the channels would be same as the passed list order.

enabled (Optional[bool]) – Whether the welcome screen should be displayed.

reason (Optional[str]) – The reason that shows up on Audit log.

RAISES:
HTTPException – Editing the welcome screen failed somehow.

Forbidden – You don’t have permissions to edit the welcome screen.

NotFound – This welcome screen does not exist.

EXAMPLE

rules_channel = guild.get_channel(12345678)
announcements_channel = guild.get_channel(87654321)
custom_emoji = utils.get(guild.emojis, name='loudspeaker')
await welcome_screen.edit(
    description='This is a very cool community server!',
    welcome_channels=[
        WelcomeChannel(channel=rules_channel, description='Read the rules!', emoji='👨‍🏫'),
        WelcomeChannel(channel=announcements_channel, description='Watch out for announcements!',
                       emoji=custom_emoji),
    ]
)
Note

Welcome channels can only accept custom emojis if premium_tier is level 2 or above.

class discord.WelcomeScreenChannel(channel, description, emoji)[source]
Attributes
channel
description
emoji
Represents a welcome channel displayed on WelcomeScreen

New in version 2.0.

channel
The channel that is being referenced.

TYPE:
abc.Snowflake

description
The description of the channel that is shown on the welcome screen.

TYPE:
str

emoji
The emoji of the channel that is shown on welcome screen.

TYPE:
Union[Emoji, PartialEmoji, str]

PARAMETERS:
channel (Snowflake) –

description (str) –

emoji (Emoji | PartialEmoji | str) –

Integration
class discord.Integration(*, data, guild)[source]
Represents a guild integration.

New in version 1.4.

id
The integration ID.

TYPE:
int

name
The integration name.

TYPE:
str

guild
The guild of the integration.

TYPE:
Guild

type
The integration type (i.e. Twitch).

TYPE:
str

enabled
Whether the integration is currently enabled.

TYPE:
bool

account
The account linked to this integration.

TYPE:
IntegrationAccount

user
The user that added this integration.

TYPE:
User

PARAMETERS:
data (Union[BaseIntegration, StreamIntegration, BotIntegration]) –

guild (Guild) –

await delete(*, reason=None)[source]
This function is a coroutine.

Deletes the integration.

You must have the manage_guild permission to do this.

PARAMETERS:
reason (str) –

The reason the integration was deleted. Shows up on the audit log.

New in version 2.0.

RAISES:
Forbidden – You do not have permission to delete the integration.

HTTPException – Deleting the integration failed.

RETURN TYPE:
None

class discord.IntegrationAccount(data)[source]
Represents an integration account.

New in version 1.4.

id
The account ID.

TYPE:
str

name
The account name.

TYPE:
str

PARAMETERS:
data (IntegrationAccount) –

class discord.BotIntegration(*, data, guild)[source]
Represents a bot integration on discord.

New in version 2.0.

id
The integration ID.

TYPE:
int

name
The integration name.

TYPE:
str

guild
The guild of the integration.

TYPE:
Guild

type
The integration type (i.e. Twitch).

TYPE:
str

enabled
Whether the integration is currently enabled.

TYPE:
bool

user
The user that added this integration.

TYPE:
User

account
The integration account information.

TYPE:
IntegrationAccount

application
The application tied to this integration.

TYPE:
IntegrationApplication

PARAMETERS:
data (Union[BaseIntegration, StreamIntegration, BotIntegration]) –

guild (Guild) –

class discord.IntegrationApplication(*, data, state)[source]
Represents an application for a bot integration.

New in version 2.0.

id
The ID for this application.

TYPE:
int

name
The application’s name.

TYPE:
str

icon
The application’s icon hash.

TYPE:
Optional[str]

description
The application’s description. Can be an empty string.

TYPE:
str

summary
The summary of the application. Can be an empty string.

TYPE:
str

user
The bot user on this application.

TYPE:
Optional[User]

PARAMETERS:
data (IntegrationApplication) –

class discord.StreamIntegration(*, data, guild)[source]
Represents a stream integration for Twitch or YouTube.

New in version 2.0.

id
The integration ID.

TYPE:
int

name
The integration name.

TYPE:
str

guild
The guild of the integration.

TYPE:
Guild

type
The integration type (i.e. Twitch).

TYPE:
str

enabled
Whether the integration is currently enabled.

TYPE:
bool

syncing
Where the integration is currently syncing.

TYPE:
bool

enable_emoticons
Whether emoticons should be synced for this integration (currently twitch only).

TYPE:
Optional[bool]

expire_behaviour
The behaviour of expiring subscribers. Aliased to expire_behavior as well.

TYPE:
ExpireBehaviour

expire_grace_period
The grace period (in days) for expiring subscribers.

TYPE:
int

user
The user for the integration.

TYPE:
User

account
The integration account information.

TYPE:
IntegrationAccount

synced_at
An aware UTC datetime representing when the integration was last synced.

TYPE:
datetime.datetime

PARAMETERS:
data (Union[BaseIntegration, StreamIntegration, BotIntegration]) –

guild (Guild) –

property expire_behavior
An alias for expire_behaviour.

RETURN TYPE:
ExpireBehaviour

property role
The role which the integration uses for subscribers.

RETURN TYPE:
Role | None

await edit(*, expire_behaviour=..., expire_grace_period=..., enable_emoticons=...)[source]
This function is a coroutine.

Edits the integration.

You must have the manage_guild permission to do this.

PARAMETERS:
expire_behaviour (ExpireBehaviour) – The behaviour when an integration subscription lapses. Aliased to expire_behavior as well.

expire_grace_period (int) – The period (in days) where the integration will ignore lapsed subscriptions.

enable_emoticons (bool) – Where emoticons should be synced for this integration (currently twitch only).

RAISES:
Forbidden – You do not have permission to edit the integration.

HTTPException – Editing the guild failed.

InvalidArgument – expire_behaviour did not receive a ExpireBehaviour.

RETURN TYPE:
None

await sync()[source]
This function is a coroutine.

Syncs the integration.

You must have the manage_guild permission to do this.

RAISES:
Forbidden – You do not have permission to sync the integration.

HTTPException – Syncing the integration failed.

RETURN TYPE:
None

Widget
class discord.Widget(*, state, data)[source]
Attributes
channels
created_at
id
invite_url
json_url
members
name
Methods
fetch_invite
Represents a Guild widget.

x == y
Checks if two widgets are the same.

x != y
Checks if two widgets are not the same.

str(x)
Returns the widget’s JSON URL.

id
The guild’s ID.

TYPE:
int

name
The guild’s name.

TYPE:
str

channels
The accessible voice channels in the guild.

TYPE:
List[WidgetChannel]

members
The online members in the server. Offline members do not appear in the widget.

Note

Due to a Discord limitation, if this data is available the users will be “anonymized” with linear IDs and discriminator information being incorrect. Likewise, the number of members retrieved is capped.

TYPE:
List[Member]

PARAMETERS:
state (ConnectionState) –

data (Widget) –

property created_at
Returns the member’s creation time in UTC.

RETURN TYPE:
datetime

property json_url
The JSON URL of the widget.

RETURN TYPE:
str

property invite_url
The invite URL for the guild, if available.

RETURN TYPE:
str

await fetch_invite(*, with_counts=True)[source]
This function is a coroutine.

Retrieves an Invite from the widget’s invite URL. This is the same as Client.fetch_invite(); the invite code is abstracted away.

PARAMETERS:
with_counts (bool) – Whether to include count information in the invite. This fills the Invite.approximate_member_count and Invite.approximate_presence_count fields.

RETURNS:
The invite from the widget’s invite URL.

RETURN TYPE:
Invite

class discord.WidgetChannel(id, name, position)[source]
Attributes
created_at
id
mention
name
position
Represents a “partial” widget channel.

x == y
Checks if two partial channels are the same.

x != y
Checks if two partial channels are not the same.

hash(x)
Return the partial channel’s hash.

str(x)
Returns the partial channel’s name.

id
The channel’s ID.

TYPE:
int

name
The channel’s name.

TYPE:
str

position
The channel’s position

TYPE:
int

PARAMETERS:
id (int) –

name (str) –

position (int) –

property mention
The string that allows you to mention the channel.

RETURN TYPE:
str

property created_at
Returns the channel’s creation time in UTC.

RETURN TYPE:
datetime

class discord.WidgetMember(*, state, data, connected_channel=None)[source]
Attributes
accent_color
accent_colour
activity
avatar
banner
bot
color
colour
connected_channel
created_at
deafened
default_avatar
discriminator
display_avatar
display_name
id
jump_url
mention
muted
name
nick
public_flags
status
suppress
Methods
mentioned_in
Represents a “partial” member of the widget’s guild.

x == y
Checks if two widget members are the same.

x != y
Checks if two widget members are not the same.

hash(x)
Return the widget member’s hash.

str(x)
Returns the widget member’s name#discriminator.

id
The member’s ID.

TYPE:
int

name
The member’s username.

TYPE:
str

discriminator
The member’s discriminator.

TYPE:
str

bot
Whether the member is a bot.

TYPE:
bool

status
The member’s status.

TYPE:
Status

nick
The member’s nickname.

TYPE:
Optional[str]

avatar
The member’s avatar hash.

TYPE:
Optional[str]

activity
The member’s activity.

TYPE:
Optional[Union[BaseActivity, Spotify]]

deafened
Whether the member is currently deafened.

TYPE:
Optional[bool]

muted
Whether the member is currently muted.

TYPE:
Optional[bool]

suppress
Whether the member is currently being suppressed.

TYPE:
Optional[bool]

connected_channel
Which channel the member is connected to.

TYPE:
Optional[WidgetChannel]

PARAMETERS:
state (ConnectionState) –

data (WidgetMemberPayload) –

connected_channel (WidgetChannel | None) –

property display_name
Returns the member’s display name.

RETURN TYPE:
str

property accent_color
Returns the user’s accent color, if applicable.

There is an alias for this named accent_colour.

New in version 2.0.

Note

This information is only available via Client.fetch_user().

RETURN TYPE:
Colour | None

property accent_colour
Returns the user’s accent colour, if applicable.

There is an alias for this named accent_color.

New in version 2.0.

Note

This information is only available via Client.fetch_user().

RETURN TYPE:
Colour | None

property banner
Returns the user’s banner asset, if available.

New in version 2.0.

Note

This information is only available via Client.fetch_user().

RETURN TYPE:
Asset | None

property color
A property that returns a color denoting the rendered color for the user. This always returns Colour.default().

There is an alias for this named colour.

RETURN TYPE:
Colour

property colour
A property that returns a colour denoting the rendered colour for the user. This always returns Colour.default().

There is an alias for this named color.

RETURN TYPE:
Colour

property created_at
Returns the user’s creation time in UTC.

This is when the user’s Discord account was created.

RETURN TYPE:
datetime

property default_avatar
Returns the default avatar for a given user. This is calculated by the user’s discriminator.

RETURN TYPE:
Asset

property display_avatar
Returns the user’s display avatar.

For regular users this is just their default avatar or uploaded avatar.

New in version 2.0.

RETURN TYPE:
Asset

property jump_url
Returns a URL that allows the client to jump to the user.

New in version 2.0.

RETURN TYPE:
str

property mention
Returns a string that allows you to mention the given user.

RETURN TYPE:
str

mentioned_in(message)
Checks if the user is mentioned in the specified message.

PARAMETERS:
message (Message) – The message to check if you’re mentioned in.

RETURNS:
Indicates if the user is mentioned in the message.

RETURN TYPE:
bool

property public_flags
The publicly available flags the user has.

RETURN TYPE:
PublicUserFlags

Threads
class discord.Thread(*, guild, state, data)[source]
Attributes
applied_tags
archive_timestamp
archived
auto_archive_duration
category
category_id
created_at
flags
guild
id
invitable
jump_url
last_message
last_message_id
locked
me
member_count
members
mention
message_count
name
owner
owner_id
parent
parent_id
slowmode_delay
starting_message
total_message_sent
type
Methods
add_user
archive
can_send
delete
delete_messages
edit
fetch_members
fetch_message
get_partial_message
history
is_news
is_nsfw
is_pinned
is_private
join
leave
permissions_for
pins
purge
remove_user
send
trigger_typing
typing
unarchive
Represents a Discord thread.

x == y
Checks if two threads are equal.

x != y
Checks if two threads are not equal.

hash(x)
Returns the thread’s hash.

str(x)
Returns the thread’s name.

New in version 2.0.

name
The thread name.

TYPE:
str

guild
The guild the thread belongs to.

TYPE:
Guild

id
The thread ID.

Note

This ID is the same as the thread starting message ID.

TYPE:
int

parent_id
The parent TextChannel ID this thread belongs to.

TYPE:
int

owner_id
The user’s ID that created this thread.

TYPE:
int

last_message_id
The last message ID of the message sent to this thread. It may not point to an existing or valid message.

TYPE:
Optional[int]

slowmode_delay
The number of seconds a member must wait between sending messages in this thread. A value of 0 denotes that it is disabled. Bots and users with manage_channels or manage_messages bypass slowmode.

TYPE:
int

message_count
An approximate number of messages in this thread. This caps at 50.

TYPE:
int

member_count
An approximate number of members in this thread. This caps at 50.

TYPE:
int

me
A thread member representing yourself, if you’ve joined the thread. This could not be available.

TYPE:
Optional[ThreadMember]

archived
Whether the thread is archived.

TYPE:
bool

locked
Whether the thread is locked.

TYPE:
bool

invitable
Whether non-moderators can add other non-moderators to this thread. This is always True for public threads.

TYPE:
bool

auto_archive_duration
The duration in minutes until the thread is automatically archived due to inactivity. Usually a value of 60, 1440, 4320 and 10080.

TYPE:
int

archive_timestamp
An aware timestamp of when the thread’s archived status was last updated in UTC.

TYPE:
datetime.datetime

created_at
An aware timestamp of when the thread was created. Only available for threads created after 2022-01-09.

TYPE:
Optional[datetime.datetime]

flags
Extra features of the thread.

New in version 2.0.

TYPE:
ChannelFlags

total_message_sent
Number of messages ever sent in a thread. It’s similar to message_count on message creation, but will not decrement the number when a message is deleted.

New in version 2.3.

TYPE:
int

PARAMETERS:
guild (Guild) –

state (ConnectionState) –

data (Thread) –

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

property type
The channel’s Discord type.

RETURN TYPE:
ChannelType

property parent
The parent channel this thread belongs to.

RETURN TYPE:
TextChannel | ForumChannel | None

property owner
The member this thread belongs to.

RETURN TYPE:
Member | None

property mention
The string that allows you to mention the thread.

RETURN TYPE:
str

property jump_url
Returns a URL that allows the client to jump to the thread.

New in version 2.0.

RETURN TYPE:
str

property members
A list of thread members in this thread.

This requires Intents.members to be properly filled. Most of the time however, this data is not provided by the gateway and a call to fetch_members() is needed.

property applied_tags
A list of tags applied to this thread.

This is only available for threads in forum channels.

TYPE:
List[ForumTag]

property last_message
Returns the last message from this thread in cache.

The message might not be valid or point to an existing message.

Reliable Fetching

For a slightly more reliable method of fetching the last message, consider using either history() or fetch_message() with the last_message_id attribute.

RETURNS:
The last message in this channel or None if not found.

RETURN TYPE:
Optional[Message]

property category
The category channel the parent channel belongs to, if applicable.

RETURNS:
The parent channel’s category.

RETURN TYPE:
Optional[CategoryChannel]

RAISES:
ClientException – The parent channel was not cached and returned None.

property category_id
The category channel ID the parent channel belongs to, if applicable.

RETURNS:
The parent channel’s category ID.

RETURN TYPE:
Optional[int]

RAISES:
ClientException – The parent channel was not cached and returned None.

property starting_message
Returns the message that started this thread.

The message might not be valid or point to an existing message.

Note

The ID for this message is the same as the thread ID.

RETURNS:
The message that started this thread or None if not found in the cache.

RETURN TYPE:
Optional[Message]

is_pinned()[source]
Whether the thread is pinned to the top of its parent forum channel.

New in version 2.3.

RETURN TYPE:
bool

is_private()[source]
Whether the thread is a private thread.

A private thread is only viewable by those that have been explicitly invited or have manage_threads.

RETURN TYPE:
bool

is_news()[source]
Whether the thread is a news thread.

A news thread is a thread that has a parent that is a news channel, i.e. TextChannel.is_news() is True.

RETURN TYPE:
bool

is_nsfw()[source]
Whether the thread is NSFW or not.

An NSFW thread is a thread that has a parent that is an NSFW channel, i.e. TextChannel.is_nsfw() is True.

RETURN TYPE:
bool

permissions_for(obj, /)[source]
Handles permission resolution for the Member or Role.

Since threads do not have their own permissions, they inherit them from the parent channel. This is a convenience method for calling permissions_for() on the parent channel.

PARAMETERS:
obj (Union[Member, Role]) – The object to resolve permissions for. This could be either a member or a role. If it’s a role then member overwrites are not computed.

RETURNS:
The resolved permissions for the member or role.

RETURN TYPE:
Permissions

RAISES:
ClientException – The parent channel was not cached and returned None

await delete_messages(messages, *, reason=None)[source]
This function is a coroutine.

Deletes a list of messages. This is similar to Message.delete() except it bulk deletes multiple messages.

As a special case, if the number of messages is 0, then nothing is done. If the number of messages is 1 then single message delete is done. If it’s more than two, then bulk delete is used.

You cannot bulk delete more than 100 messages or messages that are older than 14 days old.

You must have the manage_messages permission to use this.

Usable only by bot accounts.

PARAMETERS:
messages (Iterable[abc.Snowflake]) – An iterable of messages denoting which ones to bulk delete.

reason (Optional[str]) – The reason for deleting the messages. Shows up on the audit log.

RAISES:
ClientException – The number of messages to delete was more than 100.

Forbidden – You do not have proper permissions to delete the messages, or you’re not using a bot account.

NotFound – If single delete, then the message was already deleted.

HTTPException – Deleting the messages failed.

RETURN TYPE:
None

await purge(*, limit=100, check=..., before=None, after=None, around=None, oldest_first=False, bulk=True, reason=None)[source]
This function is a coroutine.

Purges a list of messages that meet the criteria given by the predicate check. If a check is not provided then all messages are deleted without discrimination.

You must have the manage_messages permission to delete messages even if they are your own (unless you are a user account). The read_message_history permission is also needed to retrieve message history.

PARAMETERS:
limit (Optional[int]) – The number of messages to search through. This is not the number of messages that will be deleted, though it can be.

check (Callable[[Message], bool]) – The function used to check if a message should be deleted. It must take a Message as its sole parameter.

before (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as before in history().

after (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as after in history().

around (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as around in history().

oldest_first (Optional[bool]) – Same as oldest_first in history().

bulk (bool) – If True, use bulk delete. Setting this to False is useful for mass-deleting a bot’s own messages without Permissions.manage_messages. When True, will fall back to single delete if messages are older than two weeks.

reason (Optional[str]) – The reason for deleting the messages. Shows up on the audit log.

RETURNS:
The list of messages that were deleted.

RETURN TYPE:
List[Message]

RAISES:
Forbidden – You do not have proper permissions to do the actions required.

HTTPException – Purging the messages failed.

EXAMPLES

Deleting bot’s messages

def is_me(m):
    return m.author == client.user

deleted = await thread.purge(limit=100, check=is_me)
await thread.send(f'Deleted {len(deleted)} message(s)')
await edit(*, name=..., archived=..., locked=..., invitable=..., slowmode_delay=..., auto_archive_duration=..., pinned=..., applied_tags=..., reason=None)[source]
This function is a coroutine.

Edits the thread.

Editing the thread requires Permissions.manage_threads. The thread creator can also edit name, archived or auto_archive_duration. Note that if the thread is locked then only those with Permissions.manage_threads can unarchive a thread.

The thread must be unarchived to be edited.

PARAMETERS:
name (str) – The new name of the thread.

archived (bool) – Whether to archive the thread or not.

locked (bool) – Whether to lock the thread or not.

invitable (bool) – Whether non-moderators can add other non-moderators to this thread. Only available for private threads.

auto_archive_duration (int) – The new duration in minutes before a thread is automatically archived for inactivity. Must be one of 60, 1440, 4320, or 10080.

slowmode_delay (int) – Specifies the slowmode rate limit for user in this thread, in seconds. A value of 0 disables slowmode. The maximum value possible is 21600.

reason (Optional[str]) – The reason for editing this thread. Shows up on the audit log.

pinned (bool) – Whether to pin the thread or not. This only works if the thread is part of a forum.

applied_tags (List[ForumTag]) –

The set of tags to apply to the thread. Each tag object should have an ID set.

New in version 2.3.

RETURNS:
The newly edited thread.

RETURN TYPE:
Thread

RAISES:
Forbidden – You do not have permissions to edit the thread.

HTTPException – Editing the thread failed.

await archive(locked=...)[source]
This function is a coroutine.

Archives the thread. This is a shorthand of edit().

PARAMETERS:
locked (bool) – Whether to lock the thread on archive, Defaults to False.

RETURNS:
The updated thread.

RETURN TYPE:
Thread

await unarchive()[source]
This function is a coroutine.

Unarchives the thread. This is a shorthand of edit().

RETURNS:
The updated thread.

RETURN TYPE:
Thread

await join()[source]
This function is a coroutine.

Joins this thread.

You must have send_messages_in_threads to join a thread. If the thread is private, manage_threads is also needed.

RAISES:
Forbidden – You do not have permissions to join the thread.

HTTPException – Joining the thread failed.

await leave()[source]
This function is a coroutine.

Leaves this thread.

RAISES:
HTTPException – Leaving the thread failed.

await add_user(user)[source]
This function is a coroutine.

Adds a user to this thread.

You must have send_messages_in_threads to add a user to a public thread. If the thread is private and invitable is False, then manage_threads is required.

PARAMETERS:
user (abc.Snowflake) – The user to add to the thread.

RAISES:
Forbidden – You do not have permissions to add the user to the thread.

HTTPException – Adding the user to the thread failed.

await remove_user(user)[source]
This function is a coroutine.

Removes a user from this thread.

You must have manage_threads or be the creator of the thread to remove a user.

PARAMETERS:
user (abc.Snowflake) – The user to remove from the thread.

RAISES:
Forbidden – You do not have permissions to remove the user from the thread.

HTTPException – Removing the user from the thread failed.

await fetch_members()[source]
This function is a coroutine.

Retrieves all ThreadMember that are in this thread.

This requires Intents.members to get information about members other than yourself.

RETURNS:
All thread members in the thread.

RETURN TYPE:
List[ThreadMember]

RAISES:
HTTPException – Retrieving the members failed.

await delete()[source]
This function is a coroutine.

Deletes this thread.

You must have manage_threads to delete threads.

RAISES:
Forbidden – You do not have permissions to delete this thread.

HTTPException – Deleting the thread failed.

get_partial_message(message_id, /)[source]
Creates a PartialMessage from the message ID.

This is useful if you want to work with a message and only have its ID without doing an unnecessary API call.

New in version 2.0.

PARAMETERS:
message_id (int) – The message ID to create a partial message for.

RETURNS:
The partial message.

RETURN TYPE:
PartialMessage

can_send(*objects)
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

await fetch_message(id, /)
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

class discord.ThreadMember(parent, data)[source]
Attributes
id
joined_at
thread
thread_id
Represents a Discord thread member.

x == y
Checks if two thread members are equal.

x != y
Checks if two thread members are not equal.

hash(x)
Returns the thread member’s hash.

str(x)
Returns the thread member’s name.

New in version 2.0.

id
The thread member’s ID.

TYPE:
int

thread_id
The thread’s ID.

TYPE:
int

joined_at
The time the member joined the thread in UTC.

TYPE:
datetime.datetime

PARAMETERS:
parent (Thread) –

data (ThreadMember) –

property thread
The thread this member belongs to.

RETURN TYPE:
Thread

Stages
class discord.StageChannel(*, state, guild, data)[source]
Attributes
bitrate
category
category_id
changed_roles
created_at
flags
guild
id
instance
jump_url
listeners
members
mention
moderators
name
overwrites
permissions_synced
position
requesting_to_speak
rtc_region
speakers
topic
type
user_limit
video_quality_mode
voice_states
Methods
clone
connect
create_instance
create_invite
delete
edit
fetch_instance
invites
move
overwrites_for
permissions_for
set_permissions
Represents a Discord guild stage channel.

New in version 1.7.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns the channel’s name.

name
The channel name.

TYPE:
str

guild
The guild the channel belongs to.

TYPE:
Guild

id
The channel ID.

TYPE:
int

topic
The channel’s topic. None if it isn’t set.

TYPE:
Optional[str]

category_id
The category channel ID this channel belongs to, if applicable.

TYPE:
Optional[int]

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0. Can be None if the channel was received in an interaction.

TYPE:
Optional[int]

bitrate
The channel’s preferred audio bitrate in bits per second.

TYPE:
int

user_limit
The channel’s limit for number of members that can be in a stage channel.

TYPE:
int

rtc_region
The region for the stage channel’s voice communication. A value of None indicates automatic voice region detection.

TYPE:
Optional[VoiceRegion]

video_quality_mode
The camera video quality for the stage channel’s participants.

New in version 2.0.

TYPE:
VideoQualityMode

flags
Extra features of the channel.

New in version 2.0.

TYPE:
ChannelFlags

PARAMETERS:
state (ConnectionState) –

guild (Guild) –

data (VoiceChannelPayload | StageChannelPayload) –

property requesting_to_speak
A list of members who are requesting to speak in the stage channel.

RETURN TYPE:
list[Member]

property speakers
A list of members who have been permitted to speak in the stage channel.

New in version 2.0.

RETURN TYPE:
list[Member]

property listeners
A list of members who are listening in the stage channel.

New in version 2.0.

RETURN TYPE:
list[Member]

property moderators
A list of members who are moderating the stage channel.

New in version 2.0.

RETURN TYPE:
list[Member]

property type
The channel’s Discord type.

RETURN TYPE:
ChannelType

await clone(*, name=None, reason=None)[source]
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

PARAMETERS:
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

RETURNS:
The channel that was created.

RETURN TYPE:
abc.GuildChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

property instance
The running stage instance of the stage channel.

New in version 2.0.

RETURN TYPE:
StageInstance | None

await create_instance(*, topic, privacy_level=..., reason=None, send_notification=False)[source]
This function is a coroutine.

Create a stage instance.

You must have the manage_channels permission to use this.

New in version 2.0.

PARAMETERS:
topic (str) – The stage instance’s topic.

privacy_level (StagePrivacyLevel) – The stage instance’s privacy level. Defaults to StagePrivacyLevel.guild_only.

reason (str) – The reason the stage instance was created. Shows up on the audit log.

send_notification (bool) – Send a notification to everyone in the server that the stage instance has started. Defaults to False. Requires the mention_everyone permission.

RETURNS:
The newly created stage instance.

RETURN TYPE:
StageInstance

RAISES:
InvalidArgument – If the privacy_level parameter is not the proper type.

Forbidden – You do not have permissions to create a stage instance.

HTTPException – Creating a stage instance failed.

await fetch_instance()[source]
This function is a coroutine.

Gets the running StageInstance.

New in version 2.0.

RETURNS:
The stage instance.

RETURN TYPE:
StageInstance

RAISES:
NotFound – The stage instance or channel could not be found.

HTTPException – Getting the stage instance failed.

await edit(*, reason=None, **options)[source]
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

Changed in version 2.0: The topic parameter must now be set via create_instance.

Changed in version 2.0: Edits are no longer in-place, the newly edited channel is returned instead.

PARAMETERS:
name (str) – The new channel’s name.

position (int) – The new channel’s position.

sync_permissions (bool) – Whether to sync permissions with the channel’s new or pre-existing category. Defaults to False.

category (Optional[CategoryChannel]) – The new category for this channel. Can be None to remove the category.

reason (Optional[str]) – The reason for editing this channel. Shows up on the audit log.

overwrites (Dict[Union[Role, Member, Snowflake], PermissionOverwrite]) – The overwrites to apply to channel permissions. Useful for creating secret channels.

rtc_region (Optional[VoiceRegion]) – The new region for the stage channel’s voice communication. A value of None indicates automatic voice region detection.

video_quality_mode (VideoQualityMode) –

The camera video quality for the stage channel’s participants.

New in version 2.0.

RETURNS:
The newly edited stage channel. If the edit was only positional then None is returned instead.

RETURN TYPE:
Optional[StageChannel]

RAISES:
InvalidArgument – If the permission overwrite information is not in proper form.

Forbidden – You do not have permissions to edit the channel.

HTTPException – Editing the channel failed.

property category
The category this channel belongs to.

If there is no category then this is None.

RETURN TYPE:
CategoryChannel | None

property changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

await connect(*, timeout=60.0, reconnect=True, cls=<class 'discord.voice_client.VoiceClient'>)
This function is a coroutine.

Connects to voice and creates a VoiceClient to establish your connection to the voice server.

This requires Intents.voice_states.

PARAMETERS:
timeout (float) – The timeout in seconds to wait for the voice endpoint.

reconnect (bool) – Whether the bot should automatically attempt a reconnect if a part of the handshake fails or the gateway goes down.

cls (Type[VoiceProtocol]) – A type that subclasses VoiceProtocol to connect with. Defaults to VoiceClient.

RETURNS:
A voice client that is fully connected to the voice server.

RETURN TYPE:
VoiceProtocol

RAISES:
asyncio.TimeoutError – Could not connect to the voice channel in time.

ClientException – You are already connected to a voice channel.

OpusNotLoaded – The opus library has not been loaded.

await create_invite(*, reason=None, max_age=0, max_uses=0, temporary=False, unique=True, target_event=None, target_type=None, target_user=None, target_application_id=None)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

PARAMETERS:
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

target_type (Optional[InviteTarget]) –

The type of target for the voice channel invite, if any.

New in version 2.0.

target_user (Optional[User]) –

The user whose stream to display for this invite, required if target_type is TargetType.stream. The user must be streaming in the channel.

New in version 2.0.

target_application_id (Optional[int]) –

The id of the embedded application for the invite, required if target_type is TargetType.embedded_application.

New in version 2.0.

target_event (Optional[ScheduledEvent]) –

The scheduled event object to link to the event. Shortcut to Invite.set_scheduled_event()

See Invite.set_scheduled_event() for more info on event invite linking.

New in version 2.0.

RETURNS:
The invite that was created.

RETURN TYPE:
Invite

RAISES:
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

property created_at
Returns the channel’s creation time in UTC.

RETURN TYPE:
datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

RAISES:
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

RETURN TYPE:
None

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

RETURNS:
The list of invites that are currently active.

RETURN TYPE:
List[Invite]

RAISES:
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

property jump_url
Returns a URL that allows the client to jump to the channel.

New in version 2.0.

RETURN TYPE:
str

property members
Returns all members that are currently inside this voice channel.

RETURN TYPE:
list[Member]

property mention
The string that allows you to mention the channel.

RETURN TYPE:
str

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit should be used instead.

You must have the manage_channels permission to do this.

Note

Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

PARAMETERS:
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

RAISES:
InvalidArgument – An invalid position was given or a bad mix of arguments was passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

RETURN TYPE:
None

property overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

RETURNS:
The channel’s permission overwrites.

RETURN TYPE:
Dict[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

PARAMETERS:
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

RETURNS:
The permission overwrites for this object.

RETURN TYPE:
PermissionOverwrite

permissions_for(obj, /)
Handles permission resolution for the Member or Role.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

If a Role is passed, then it checks the permissions someone with that role would have, which is essentially:

The default role permissions

The permissions of the role used as a parameter

The default role permission overwrites

The permission overwrites of the role used as a parameter

Changed in version 2.0: The object passed in can now be a role object.

PARAMETERS:
obj (Union[Member, Role]) – The object to resolve permissions for. This could be either a member or a role. If it’s a role then member overwrites are not computed.

RETURNS:
The resolved permissions for the member or role.

RETURN TYPE:
Permissions

property permissions_synced
Whether the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

RETURN TYPE:
bool

await set_permissions(target, *, overwrite=..., reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Note

This method replaces the old overwrites with the ones given.

EXAMPLES

Setting allow and deny:

await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
PARAMETERS:
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

property voice_states
Returns a mapping of member IDs who have voice states in this channel.

New in version 1.3.

Note

This function is intentionally low level to replace members when the member cache is unavailable.

RETURNS:
The mapping of member ID to a voice state.

RETURN TYPE:
Mapping[int, VoiceState]

class discord.StageInstance(*, state, guild, data)[source]
Attributes
channel
channel_id
discoverable_disabled
guild
id
privacy_level
scheduled_event
topic
Methods
delete
edit
Represents a stage instance of a stage channel in a guild.

New in version 2.0.

x == y
Checks if two stage instances are equal.

x != y
Checks if two stage instances are not equal.

hash(x)
Returns the stage instance’s hash.

id
The stage instance’s ID.

TYPE:
int

guild
The guild that the stage instance is running in.

TYPE:
Guild

channel_id
The ID of the channel that the stage instance is running in.

TYPE:
int

topic
The topic of the stage instance.

TYPE:
str

privacy_level
The privacy level of the stage instance.

TYPE:
StagePrivacyLevel

discoverable_disabled
Whether discoverability for the stage instance is disabled.

TYPE:
bool

scheduled_event
The scheduled event linked with the stage instance, if any.

TYPE:
Optional[ScheduledEvent]

PARAMETERS:
state (ConnectionState) –

guild (Guild) –

data (StageInstance) –

channel
The channel that stage instance is running in.

await edit(*, topic=..., privacy_level=..., reason=None)[source]
This function is a coroutine.

Edits the stage instance.

You must have the manage_channels permission to use this.

PARAMETERS:
topic (str) – The stage instance’s new topic.

privacy_level (StagePrivacyLevel) – The stage instance’s new privacy level.

reason (str) – The reason the stage instance was edited. Shows up on the audit log.

RAISES:
InvalidArgument – If the privacy_level parameter is not the proper type.

Forbidden – You do not have permissions to edit the stage instance.

HTTPException – Editing a stage instance failed.

RETURN TYPE:
None

await delete(*, reason=None)[source]
This function is a coroutine.

Deletes the stage instance.

You must have the manage_channels permission to use this.

PARAMETERS:
reason (str) – The reason the stage instance was deleted. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to delete the stage instance.

HTTPException – Deleting the stage instance failed.

RETURN TYPE:
None

Interactions
class discord.Interaction(*, data, state)[source]
Attributes
app_permissions
application_id
channel
channel_id
client
custom_id
data
followup
guild
guild_id
guild_locale
id
locale
message
permissions
response
token
type
user
Methods
delete_original_message
delete_original_response
edit_original_message
edit_original_response
is_command
is_component
original_message
original_response
to_dict
Represents a Discord interaction.

An interaction happens when a user does an action that needs to be notified. Current examples are slash commands and components.

New in version 2.0.

id
The interaction’s ID.

TYPE:
int

type
The interaction type.

TYPE:
InteractionType

guild_id
The guild ID the interaction was sent from.

TYPE:
Optional[int]

channel_id
The channel ID the interaction was sent from.

TYPE:
Optional[int]

application_id
The application ID that the interaction was for.

TYPE:
int

user
The user or member that sent the interaction. Will be None in PING interactions.

TYPE:
Optional[Union[User, Member]]

message
The message that sent this interaction.

TYPE:
Optional[Message]

token
The token to continue the interaction. These are valid for 15 minutes.

TYPE:
str

data
The raw interaction data.

TYPE:
dict

locale
The user’s locale.

TYPE:
str

guild_locale
The guilds preferred locale, if invoked in a guild.

TYPE:
str

custom_id
The custom ID for the interaction.

TYPE:
Optional[str]

PARAMETERS:
data (Interaction) –

state (ConnectionState) –

property client
Returns the client that sent the interaction.

RETURN TYPE:
Client

property guild
The guild the interaction was sent from.

RETURN TYPE:
Guild | None

is_command()[source]
Indicates whether the interaction is an application command.

RETURN TYPE:
bool

is_component()[source]
Indicates whether the interaction is a message component.

RETURN TYPE:
bool

channel
The channel the interaction was sent from.

Note that due to a Discord limitation, DM channels are not resolved since there is no data to complete them. These are PartialMessageable instead.

property permissions
The resolved permissions of the member in the channel, including overwrites.

In a non-guild context where this doesn’t apply, an empty permissions object is returned.

RETURN TYPE:
Permissions

app_permissions
The resolved permissions of the application in the channel, including overwrites.

response
Returns an object responsible for handling responding to the interaction.

A response can only be done once. If secondary messages need to be sent, consider using followup instead.

followup
Returns the followup webhook for followup interactions.

await original_response()[source]
This function is a coroutine.

Fetches the original interaction response message associated with the interaction.

If the interaction response was InteractionResponse.send_message() then this would return the message that was sent using that response. Otherwise, this would return the message that triggered the interaction.

Repeated calls to this will return a cached value.

RETURNS:
The original interaction response message.

RETURN TYPE:
InteractionMessage

RAISES:
HTTPException – Fetching the original response message failed.

ClientException – The channel for the message could not be resolved.

await original_message()[source]
An alias for original_response().

RETURNS:
The original interaction response message.

RETURN TYPE:
InteractionMessage

RAISES:
HTTPException – Fetching the original response message failed.

ClientException – The channel for the message could not be resolved.

await edit_original_response(*, content=..., embeds=..., embed=..., file=..., files=..., attachments=..., view=..., allowed_mentions=None, delete_after=None)[source]
This function is a coroutine.

Edits the original interaction response message.

This is a lower level interface to InteractionMessage.edit() in case you do not want to fetch the message and save an HTTP request.

This method is also the only way to edit the original message if the message sent was ephemeral.

PARAMETERS:
content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

attachments (List[Attachment]) – A list of attachments to keep in the message. If [] is passed then all attachments are removed.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

view (Optional[View]) – The updated view to update this message with. If None is passed then the view is removed.

delete_after (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message we just edited. If the deletion fails, then it is silently ignored.

RETURNS:
The newly edited message.

RETURN TYPE:
InteractionMessage

RAISES:
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid.

await edit_original_message(**kwargs)[source]
An alias for edit_original_response().

RETURNS:
The newly edited message.

RETURN TYPE:
InteractionMessage

RAISES:
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid.

await delete_original_response(*, delay=None)[source]
This function is a coroutine.

Deletes the original interaction response message.

This is a lower level interface to InteractionMessage.delete() in case you do not want to fetch the message and save an HTTP request.

PARAMETERS:
delay (Optional[float]) – If provided, the number of seconds to wait before deleting the message. The waiting is done in the background and deletion failures are ignored.

RAISES:
HTTPException – Deleting the message failed.

Forbidden – Deleted a message that is not yours.

RETURN TYPE:
None

await delete_original_message(**kwargs)[source]
An alias for delete_original_response().

RAISES:
HTTPException – Deleting the message failed.

Forbidden – Deleted a message that is not yours.

to_dict()[source]
Converts this interaction object into a dict.

RETURNS:
A dictionary of str interaction keys bound to the respective value.

RETURN TYPE:
Dict[str, Any]

class discord.InteractionResponse(parent)[source]
Methods
defer
edit_message
is_done
pong
send_autocomplete_result
send_message
send_modal
Represents a Discord interaction response.

This type can be accessed through Interaction.response.

New in version 2.0.

PARAMETERS:
parent (Interaction) –

is_done()[source]
Indicates whether an interaction response has been done before.

An interaction can only be responded to once.

RETURN TYPE:
bool

await defer(*, ephemeral=False, invisible=True)[source]
This function is a coroutine.

Defers the interaction response.

This is typically used when the interaction is acknowledged and a secondary action will be done later.

This can only be used with the following interaction types:

InteractionType.application_command

InteractionType.component

InteractionType.modal_submit

PARAMETERS:
ephemeral (bool) – Indicates whether the deferred message will eventually be ephemeral. This only applies to InteractionType.application_command interactions, or if invisible is False.

invisible (bool) – Indicates whether the deferred type should be ‘invisible’ (InteractionResponseType.deferred_message_update) instead of ‘thinking’ (InteractionResponseType.deferred_channel_message). In the Discord UI, this is represented as the bot thinking of a response. You must eventually send a followup message via Interaction.followup to make this thinking state go away. This parameter does not apply to interactions of type InteractionType.application_command.

RAISES:
HTTPException – Deferring the interaction failed.

InteractionResponded – This interaction has already been responded to before.

RETURN TYPE:
None

await pong()[source]
This function is a coroutine.

Pongs the ping interaction.

This should rarely be used.

RAISES:
HTTPException – Ponging the interaction failed.

InteractionResponded – This interaction has already been responded to before.

RETURN TYPE:
None

await send_message(content=None, *, embed=None, embeds=None, view=None, tts=False, ephemeral=False, allowed_mentions=None, file=None, files=None, delete_after=None)[source]
This function is a coroutine.

Responds to this interaction by sending a message.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

embeds (List[Embed]) – A list of embeds to send with the content. Maximum of 10. This cannot be mixed with the embed parameter.

embed (Embed) – The rich embed for the content to send. This cannot be mixed with embeds parameter.

tts (bool) – Indicates if the message should be sent using text-to-speech.

view (discord.ui.View) – The view to send with the message.

ephemeral (bool) – Indicates if the message should only be visible to the user who started the interaction. If a view is sent with an ephemeral message, and it has no timeout set then the timeout is set to 15 minutes.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

RETURNS:
The interaction object associated with the sent message.

RETURN TYPE:
Interaction

RAISES:
HTTPException – Sending the message failed.

TypeError – You specified both embed and embeds.

ValueError – The length of embeds was invalid.

InteractionResponded – This interaction has already been responded to before.

await edit_message(*, content=..., embed=..., embeds=..., file=..., files=..., attachments=..., view=..., delete_after=None)[source]
This function is a coroutine.

Responds to this interaction by editing the original message of a component or modal interaction.

PARAMETERS:
content (Optional[str]) – The new content to replace the message with. None removes the content.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

file (File) – A new file to add to the message. This cannot be mixed with files parameter.

files (List[File]) – A list of new files to add to the message. Must be a maximum of 10. This cannot be mixed with the file parameter.

attachments (List[Attachment]) – A list of attachments to keep in the message. If [] is passed then all attachments are removed.

view (Optional[View]) – The updated view to update this message with. If None is passed then the view is removed.

delete_after (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message we just edited. If the deletion fails, then it is silently ignored.

RAISES:
HTTPException – Editing the message failed.

TypeError – You specified both embed and embeds.

InteractionResponded – This interaction has already been responded to before.

RETURN TYPE:
None

await send_autocomplete_result(*, choices)[source]
This function is a coroutine. Responds to this interaction by sending the autocomplete choices.

PARAMETERS:
choices (List[OptionChoice]) – A list of choices.

RAISES:
HTTPException – Sending the result failed.

InteractionResponded – This interaction has already been responded to before.

await send_modal(modal)[source]
This function is a coroutine. Responds to this interaction by sending a modal dialog. This cannot be used to respond to another modal dialog submission.

PARAMETERS:
modal (discord.ui.Modal) – The modal dialog to display to the user.

RAISES:
HTTPException – Sending the modal failed.

InteractionResponded – This interaction has already been responded to before.

RETURN TYPE:
Interaction

class discord.InteractionMessage(*, state, channel, data)[source]
Methods
delete
edit
Represents the original interaction response message.

This allows you to edit or delete the message associated with the interaction response. To retrieve this object see Interaction.original_response().

This inherits from discord.Message with changes to edit() and delete() to work.

New in version 2.0.

PARAMETERS:
state (ConnectionState) –

channel (Union[TextChannel, VoiceChannel, Thread, DMChannel, PartialMessageable, GroupChannel]) –

data (Message) –

await edit(content=..., embeds=..., embed=..., file=..., files=..., attachments=..., view=..., allowed_mentions=None, delete_after=None)[source]
This function is a coroutine.

Edits the message.

PARAMETERS:
content (Optional[str]) – The content to edit the message with or None to clear it.

embeds (List[Embed]) – A list of embeds to edit the message with.

embed (Optional[Embed]) – The embed to edit the message with. None suppresses the embeds. This should not be mixed with the embeds parameter.

file (File) – The file to upload. This cannot be mixed with files parameter.

files (List[File]) – A list of files to send with the content. This cannot be mixed with the file parameter.

attachments (List[Attachment]) – A list of attachments to keep in the message. If [] is passed then all attachments are removed.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. See abc.Messageable.send() for more information.

view (Optional[View]) – The updated view to update this message with. If None is passed then the view is removed.

delete_after (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message we just edited. If the deletion fails, then it is silently ignored.

RETURNS:
The newly edited message.

RETURN TYPE:
InteractionMessage

RAISES:
HTTPException – Editing the message failed.

Forbidden – Edited a message that is not yours.

TypeError – You specified both embed and embeds or file and files

ValueError – The length of embeds was invalid.

await delete(*, delay=None)[source]
This function is a coroutine.

Deletes the message.

PARAMETERS:
delay (Optional[float]) – If provided, the number of seconds to wait before deleting the message. The waiting is done in the background and deletion failures are ignored.

RAISES:
Forbidden – You do not have proper permissions to delete the message.

NotFound – The message was deleted already.

HTTPException – Deleting the message failed.

RETURN TYPE:
None

class discord.MessageInteraction(*, data, state)[source]
Attributes
data
id
name
type
user
Represents a Discord message interaction.

This is sent on the message object when the message is a response to an interaction without an existing message e.g. application command.

New in version 2.0.

Note

Responses to message components do not include this property.

id
The interaction’s ID.

TYPE:
int

type
The interaction type.

TYPE:
InteractionType

name
The name of the invoked application command.

TYPE:
str

user
The user that sent the interaction.

TYPE:
User

data
The raw interaction data.

TYPE:
dict

PARAMETERS:
data (MessageInteraction) –

state (ConnectionState) –

class discord.Component[source]
Attributes
type
Represents a Discord Bot UI Kit Component.

Currently, the only components supported by Discord are:

ActionRow

Button

SelectMenu

This class is abstract and cannot be instantiated.

New in version 2.0.

type
The type of component.

TYPE:
ComponentType

class discord.ActionRow(data)[source]
Attributes
children
type
Represents a Discord Bot UI Kit Action Row.

This is a component that holds up to 5 children components in a row.

This inherits from Component.

New in version 2.0.

type
The type of component.

TYPE:
ComponentType

children
The children components that this holds, if any.

TYPE:
List[Component]

PARAMETERS:
data (Union[ActionRow, ButtonComponent, SelectMenu, InputText]) –

class discord.Button(data)[source]
Attributes
custom_id
disabled
emoji
label
style
url
Represents a button from the Discord Bot UI Kit.

This inherits from Component.

Note

The user constructible and usable type to create a button is discord.ui.Button not this one.

New in version 2.0.

style
The style of the button.

TYPE:
ButtonStyle

custom_id
The ID of the button that gets received during an interaction. If this button is for a URL, it does not have a custom ID.

TYPE:
Optional[str]

url
The URL this button sends you to.

TYPE:
Optional[str]

disabled
Whether the button is disabled or not.

TYPE:
bool

label
The label of the button, if any.

TYPE:
Optional[str]

emoji
The emoji of the button, if available.

TYPE:
Optional[PartialEmoji]

PARAMETERS:
data (ButtonComponent) –

class discord.SelectMenu(data)[source]
Attributes
channel_types
custom_id
disabled
max_values
min_values
options
placeholder
type
Represents a select menu from the Discord Bot UI Kit.

A select menu is functionally the same as a dropdown, however on mobile it renders a bit differently.

Note

The user constructible and usable type to create a select menu is discord.ui.Select not this one.

New in version 2.0.

Changed in version 2.3: Added support for ComponentType.user_select, ComponentType.role_select, ComponentType.mentionable_select, and ComponentType.channel_select.

type
The select menu’s type.

TYPE:
ComponentType

custom_id
The ID of the select menu that gets received during an interaction.

TYPE:
Optional[str]

placeholder
The placeholder text that is shown if nothing is selected, if any.

TYPE:
Optional[str]

min_values
The minimum number of items that must be chosen for this select menu. Defaults to 1 and must be between 0 and 25.

TYPE:
int

max_values
The maximum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25.

TYPE:
int

options
A list of options that can be selected in this menu. Will be an empty list for all component types except for ComponentType.string_select.

TYPE:
List[SelectOption]

channel_types
A list of channel types that can be selected. Will be an empty list for all component types except for ComponentType.channel_select.

TYPE:
List[ChannelType]

disabled
Whether the select is disabled or not.

TYPE:
bool

PARAMETERS:
data (SelectMenu) –

Emoji
class discord.Emoji(*, guild, state, data)[source]
Attributes
animated
available
created_at
guild
guild_id
id
managed
name
require_colons
roles
url
user
Methods
delete
edit
is_usable
read
save
Represents a custom emoji.

Depending on the way this object was created, some attributes can have a value of None.

x == y
Checks if two emoji are the same.

x != y
Checks if two emoji are not the same.

hash(x)
Return the emoji’s hash.

iter(x)
Returns an iterator of (field, value) pairs. This allows this class to be used as an iterable in list/dict/etc constructions.

str(x)
Returns the emoji rendered for discord.

name
The name of the emoji.

TYPE:
str

id
The emoji’s ID.

TYPE:
int

require_colons
If colons are required to use this emoji in the client (:PJSalt: vs PJSalt).

TYPE:
bool

animated
Whether an emoji is animated or not.

TYPE:
bool

managed
If this emoji is managed by a Twitch integration.

TYPE:
bool

guild_id
The guild ID the emoji belongs to.

TYPE:
int

available
Whether the emoji is available for use.

TYPE:
bool

user
The user that created the emoji. This can only be retrieved using Guild.fetch_emoji() and having the manage_emojis permission.

TYPE:
Optional[User]

PARAMETERS:
guild (Guild) –

state (ConnectionState) –

data (Emoji) –

property created_at
Returns the emoji’s creation time in UTC.

RETURN TYPE:
datetime

property url
Returns the URL of the emoji.

RETURN TYPE:
str

property roles
A list of roles that is allowed to use this emoji.

If roles is empty, the emoji is unrestricted.

property guild
The guild this emoji belongs to.

RETURN TYPE:
Guild

is_usable()[source]
Whether the bot can use this emoji.

New in version 1.3.

RETURN TYPE:
bool

await delete(*, reason=None)[source]
This function is a coroutine.

Deletes the custom emoji.

You must have manage_emojis permission to do this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this emoji. Shows up on the audit log.

RAISES:
Forbidden – You are not allowed to delete emojis.

HTTPException – An error occurred deleting the emoji.

RETURN TYPE:
None

await edit(*, name=..., roles=..., reason=None)[source]
This function is a coroutine.

Edits the custom emoji.

You must have manage_emojis permission to do this.

Changed in version 2.0: The newly updated emoji is returned.

PARAMETERS:
name (str) – The new emoji name.

roles (Optional[List[Snowflake]]) – A list of roles that can use this emoji. An empty list can be passed to make it available to everyone.

reason (Optional[str]) – The reason for editing this emoji. Shows up on the audit log.

RAISES:
Forbidden – You are not allowed to edit emojis.

HTTPException – An error occurred editing the emoji.

RETURNS:
The newly updated emoji.

RETURN TYPE:
Emoji

await read()
This function is a coroutine.

Retrieves the content of this asset as a bytes object.

RETURNS:
The content of the asset.

RETURN TYPE:
bytes

RAISES:
DiscordException – There was no internal connection state.

HTTPException – Downloading the asset failed.

NotFound – The asset was deleted.

await save(fp, *, seek_begin=True)
This function is a coroutine.

Saves this asset into a file-like object.

PARAMETERS:
fp (Union[io.BufferedIOBase, os.PathLike]) – The file-like object to save this attachment to or the filename to use. If a filename is passed then a file is created with that filename and used instead.

seek_begin (bool) – Whether to seek to the beginning of the file after saving is successfully done.

RETURNS:
The number of bytes written.

RETURN TYPE:
int

RAISES:
DiscordException – There was no internal connection state.

HTTPException – Downloading the asset failed.

NotFound – The asset was deleted.

class discord.PartialEmoji(*, name, animated=False, id=None)[source]
Attributes
animated
created_at
id
name
url
Methods
PartialEmoji.from_str
is_custom_emoji
is_unicode_emoji
read
save
Represents a “partial” emoji.

This model will be given in two scenarios:

“Raw” data events such as on_raw_reaction_add()

Custom emoji that the bot cannot see from e.g. Message.reactions

x == y
Checks if two emoji are the same.

x != y
Checks if two emoji are not the same.

hash(x)
Return the emoji’s hash.

str(x)
Returns the emoji rendered for discord.

name
The custom emoji name, if applicable, or the unicode codepoint of the non-custom emoji. This can be None if the emoji got deleted (e.g. removing a reaction with a deleted emoji).

TYPE:
Optional[str]

animated
Whether the emoji is animated or not.

TYPE:
bool

id
The ID of the custom emoji, if applicable.

TYPE:
Optional[int]

PARAMETERS:
name (str) –

animated (bool) –

id (int | None) –

classmethod from_str(value)[source]
Converts a Discord string representation of an emoji to a PartialEmoji.

The formats accepted are:

a:name:id

<a:name:id>

name:id

<:name:id>

If the format does not match then it is assumed to be a unicode emoji.

New in version 2.0.

PARAMETERS:
value (str) – The string representation of an emoji.

RETURNS:
The partial emoji from this string.

RETURN TYPE:
PartialEmoji

is_custom_emoji()[source]
Checks if this is a custom non-Unicode emoji.

RETURN TYPE:
bool

is_unicode_emoji()[source]
Checks if this is a Unicode emoji.

RETURN TYPE:
bool

property created_at
Returns the emoji’s creation time in UTC, or None if Unicode emoji.

New in version 1.6.

RETURN TYPE:
datetime | None

property url
Returns the URL of the emoji, if it is custom.

If this isn’t a custom emoji then an empty string is returned

RETURN TYPE:
str

await read()[source]
This function is a coroutine.

Retrieves the content of this asset as a bytes object.

RETURNS:
The content of the asset.

RETURN TYPE:
bytes

RAISES:
DiscordException – There was no internal connection state.

HTTPException – Downloading the asset failed.

NotFound – The asset was deleted.

await save(fp, *, seek_begin=True)
This function is a coroutine.

Saves this asset into a file-like object.

PARAMETERS:
fp (Union[io.BufferedIOBase, os.PathLike]) – The file-like object to save this attachment to or the filename to use. If a filename is passed then a file is created with that filename and used instead.

seek_begin (bool) – Whether to seek to the beginning of the file after saving is successfully done.

RETURNS:
The number of bytes written.

RETURN TYPE:
int

RAISES:
DiscordException – There was no internal connection state.

HTTPException – Downloading the asset failed.

NotFound – The asset was deleted.

Channels
class discord.TextChannel(*, state, guild, data)[source]
Attributes
category
category_id
changed_roles
created_at
default_auto_archive_duration
default_thread_slowmode_delay
flags
guild
id
jump_url
last_message
last_message_id
members
mention
name
news
nsfw
overwrites
permissions_synced
position
slowmode_delay
threads
topic
type
Methods
archived_threads
can_send
clone
create_invite
create_thread
create_webhook
delete
delete_messages
edit
fetch_message
follow
get_partial_message
get_thread
history
invites
is_news
is_nsfw
move
overwrites_for
permissions_for
pins
purge
send
set_permissions
trigger_typing
typing
webhooks
Represents a Discord text channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns the channel’s name.

name
The channel name.

TYPE:
str

guild
The guild the channel belongs to.

TYPE:
Guild

id
The channel ID.

TYPE:
int

category_id
The category channel ID this channel belongs to, if applicable.

TYPE:
Optional[int]

topic
The channel’s topic. None if it doesn’t exist.

TYPE:
Optional[str]

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0. Can be None if the channel was received in an interaction.

TYPE:
Optional[int]

last_message_id
The last message ID of the message sent to this channel. It may not point to an existing or valid message.

TYPE:
Optional[int]

slowmode_delay
The number of seconds a member must wait between sending messages in this channel. A value of 0 denotes that it is disabled. Bots and users with manage_channels or manage_messages bypass slowmode.

TYPE:
int

nsfw
If the channel is marked as “not safe for work”.

Note

To check if the channel or the guild of that channel are marked as NSFW, consider is_nsfw() instead.

TYPE:
bool

default_auto_archive_duration
The default auto archive duration in minutes for threads created in this channel.

New in version 2.0.

TYPE:
int

flags
Extra features of the channel.

New in version 2.0.

TYPE:
ChannelFlags

default_thread_slowmode_delay
The initial slowmode delay to set on newly created threads in this channel.

New in version 2.3.

TYPE:
Optional[int]

PARAMETERS:
state (ConnectionState) –

guild (Guild) –

data (TextChannelPayload) –

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

is_news()[source]
Checks if the channel is a news/announcements channel.

RETURN TYPE:
bool

property news
Equivalent to is_news().

RETURN TYPE:
bool

await edit(*, reason=None, **options)[source]
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

Changed in version 1.3: The overwrites keyword-only parameter was added.

Changed in version 1.4: The type keyword-only parameter was added.

Changed in version 2.0: Edits are no longer in-place, the newly edited channel is returned instead.

PARAMETERS:
name (str) – The new channel name.

topic (str) – The new channel’s topic.

position (int) – The new channel’s position.

nsfw (bool) – To mark the channel as NSFW or not.

sync_permissions (bool) – Whether to sync permissions with the channel’s new or pre-existing category. Defaults to False.

category (Optional[CategoryChannel]) – The new category for this channel. Can be None to remove the category.

slowmode_delay (int) – Specifies the slowmode rate limit for user in this channel, in seconds. A value of 0 disables slowmode. The maximum value possible is 21600.

type (ChannelType) – Change the type of this text channel. Currently, only conversion between ChannelType.text and ChannelType.news is supported. This is only available to guilds that contain NEWS in Guild.features.

reason (Optional[str]) – The reason for editing this channel. Shows up on the audit log.

overwrites (Dict[Union[Role, Member, Snowflake], PermissionOverwrite]) – The overwrites to apply to channel permissions. Useful for creating secret channels.

default_auto_archive_duration (int) – The new default auto archive duration in minutes for threads created in this channel. Must be one of 60, 1440, 4320, or 10080.

default_thread_slowmode_delay (int) –

The new default slowmode delay in seconds for threads created in this channel.

New in version 2.3.

RETURNS:
The newly edited text channel. If the edit was only positional then None is returned instead.

RETURN TYPE:
Optional[TextChannel]

RAISES:
InvalidArgument – If position is less than 0 or greater than the number of channels, or if the permission overwrite information is not in proper form.

Forbidden – You do not have permissions to edit the channel.

HTTPException – Editing the channel failed.

await create_thread(*, name, message=None, auto_archive_duration=..., type=None, reason=None)[source]
This function is a coroutine.

Creates a thread in this text channel.

To create a public thread, you must have create_public_threads. For a private thread, create_private_threads is needed instead.

New in version 2.0.

PARAMETERS:
name (str) – The name of the thread.

message (Optional[abc.Snowflake]) – A snowflake representing the message to create the thread with. If None is passed then a private thread is created. Defaults to None.

auto_archive_duration (int) – The duration in minutes before a thread is automatically archived for inactivity. If not provided, the channel’s default auto archive duration is used.

type (Optional[ChannelType]) – The type of thread to create. If a message is passed then this parameter is ignored, as a thread created with a message is always a public thread. By default, this creates a private thread if this is None.

reason (str) – The reason for creating a new thread. Shows up on the audit log.

RETURNS:
The created thread

RETURN TYPE:
Thread

RAISES:
Forbidden – You do not have permissions to create a thread.

HTTPException – Starting the thread failed.

archived_threads(*, private=False, joined=False, limit=50, before=None)
Returns an AsyncIterator that iterates over all archived threads in the guild.

You must have read_message_history to use this. If iterating over private threads then manage_threads is also required.

New in version 2.0.

PARAMETERS:
limit (Optional[bool]) – The number of threads to retrieve. If None, retrieves every archived thread in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[abc.Snowflake, datetime.datetime]]) – Retrieve archived channels before the given date or ID.

private (bool) – Whether to retrieve private archived threads.

joined (bool) – Whether to retrieve private archived threads that you’ve joined. You cannot set joined to True and private to False.

YIELDS:
Thread – The archived threads.

RAISES:
Forbidden – You do not have permissions to get archived threads.

HTTPException – The request to get the archived threads failed.

RETURN TYPE:
ArchivedThreadIterator

can_send(*objects)
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

property category
The category this channel belongs to.

If there is no category then this is None.

RETURN TYPE:
CategoryChannel | None

property changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

await clone(*, name=None, reason=None)
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

PARAMETERS:
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

RETURNS:
The channel that was created.

RETURN TYPE:
abc.GuildChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

await create_invite(*, reason=None, max_age=0, max_uses=0, temporary=False, unique=True, target_event=None, target_type=None, target_user=None, target_application_id=None)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

PARAMETERS:
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

target_type (Optional[InviteTarget]) –

The type of target for the voice channel invite, if any.

New in version 2.0.

target_user (Optional[User]) –

The user whose stream to display for this invite, required if target_type is TargetType.stream. The user must be streaming in the channel.

New in version 2.0.

target_application_id (Optional[int]) –

The id of the embedded application for the invite, required if target_type is TargetType.embedded_application.

New in version 2.0.

target_event (Optional[ScheduledEvent]) –

The scheduled event object to link to the event. Shortcut to Invite.set_scheduled_event()

See Invite.set_scheduled_event() for more info on event invite linking.

New in version 2.0.

RETURNS:
The invite that was created.

RETURN TYPE:
Invite

RAISES:
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

await create_webhook(*, name, avatar=None, reason=None)
This function is a coroutine.

Creates a webhook for this channel.

Requires manage_webhooks permissions.

Changed in version 1.1: Added the reason keyword-only parameter.

PARAMETERS:
name (str) – The webhook’s name.

avatar (Optional[bytes]) – A bytes-like object representing the webhook’s default avatar. This operates similarly to edit().

reason (Optional[str]) – The reason for creating this webhook. Shows up in the audit logs.

RETURNS:
The created webhook.

RETURN TYPE:
Webhook

RAISES:
HTTPException – Creating the webhook failed.

Forbidden – You do not have permissions to create a webhook.

property created_at
Returns the channel’s creation time in UTC.

RETURN TYPE:
datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

RAISES:
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

RETURN TYPE:
None

await delete_messages(messages, *, reason=None)
This function is a coroutine.

Deletes a list of messages. This is similar to Message.delete() except it bulk deletes multiple messages.

As a special case, if the number of messages is 0, then nothing is done. If the number of messages is 1 then single message delete is done. If it’s more than two, then bulk delete is used.

You cannot bulk delete more than 100 messages or messages that are older than 14 days old.

You must have the manage_messages permission to use this.

PARAMETERS:
messages (Iterable[abc.Snowflake]) – An iterable of messages denoting which ones to bulk delete.

reason (Optional[str]) – The reason for deleting the messages. Shows up on the audit log.

RAISES:
ClientException – The number of messages to delete was more than 100.

Forbidden – You do not have proper permissions to delete the messages.

NotFound – If single delete, then the message was already deleted.

HTTPException – Deleting the messages failed.

RETURN TYPE:
None

await fetch_message(id, /)
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

await follow(*, destination, reason=None)
Follows a channel using a webhook.

Only news channels can be followed.

Note

The webhook returned will not provide a token to do webhook actions, as Discord does not provide it.

New in version 1.3.

PARAMETERS:
destination (TextChannel) – The channel you would like to follow from.

reason (Optional[str]) –

The reason for following the channel. Shows up on the destination guild’s audit log.

New in version 1.4.

RETURNS:
The created webhook.

RETURN TYPE:
Webhook

RAISES:
HTTPException – Following the channel failed.

Forbidden – You do not have the permissions to create a webhook.

get_partial_message(message_id, /)
Creates a PartialMessage from the message ID.

This is useful if you want to work with a message and only have its ID without doing an unnecessary API call.

New in version 1.6.

PARAMETERS:
message_id (int) – The message ID to create a partial message for.

RETURNS:
The partial message.

RETURN TYPE:
PartialMessage

get_thread(thread_id, /)
Returns a thread with the given ID.

New in version 2.0.

PARAMETERS:
thread_id (int) – The ID to search for.

RETURNS:
The returned thread or None if not found.

RETURN TYPE:
Optional[Thread]

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

RETURNS:
The list of invites that are currently active.

RETURN TYPE:
List[Invite]

RAISES:
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

is_nsfw()
Checks if the channel is NSFW.

RETURN TYPE:
bool

property jump_url
Returns a URL that allows the client to jump to the channel.

New in version 2.0.

RETURN TYPE:
str

property last_message
Fetches the last message from this channel in cache.

The message might not be valid or point to an existing message.

Reliable Fetching

For a slightly more reliable method of fetching the last message, consider using either history() or fetch_message() with the last_message_id attribute.

RETURNS:
The last message in this channel or None if not found.

RETURN TYPE:
Optional[Message]

property members
Returns all members that can see this channel.

RETURN TYPE:
list[Member]

property mention
The string that allows you to mention the channel.

RETURN TYPE:
str

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit should be used instead.

You must have the manage_channels permission to do this.

Note

Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

PARAMETERS:
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

RAISES:
InvalidArgument – An invalid position was given or a bad mix of arguments was passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

RETURN TYPE:
None

property overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

RETURNS:
The channel’s permission overwrites.

RETURN TYPE:
Dict[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

PARAMETERS:
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

RETURNS:
The permission overwrites for this object.

RETURN TYPE:
PermissionOverwrite

permissions_for(obj, /)
Handles permission resolution for the Member or Role.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

If a Role is passed, then it checks the permissions someone with that role would have, which is essentially:

The default role permissions

The permissions of the role used as a parameter

The default role permission overwrites

The permission overwrites of the role used as a parameter

Changed in version 2.0: The object passed in can now be a role object.

PARAMETERS:
obj (Union[Member, Role]) – The object to resolve permissions for. This could be either a member or a role. If it’s a role then member overwrites are not computed.

RETURNS:
The resolved permissions for the member or role.

RETURN TYPE:
Permissions

property permissions_synced
Whether the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

RETURN TYPE:
bool

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

await purge(*, limit=100, check=..., before=None, after=None, around=None, oldest_first=False, bulk=True, reason=None)
This function is a coroutine.

Purges a list of messages that meet the criteria given by the predicate check. If a check is not provided then all messages are deleted without discrimination.

You must have the manage_messages permission to delete messages even if they are your own. The read_message_history permission is also needed to retrieve message history.

PARAMETERS:
limit (Optional[int]) – The number of messages to search through. This is not the number of messages that will be deleted, though it can be.

check (Callable[[Message], bool]) – The function used to check if a message should be deleted. It must take a Message as its sole parameter.

before (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as before in history().

after (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as after in history().

around (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as around in history().

oldest_first (Optional[bool]) – Same as oldest_first in history().

bulk (bool) – If True, use bulk delete. Setting this to False is useful for mass-deleting a bot’s own messages without Permissions.manage_messages. When True, will fall back to single delete if messages are older than two weeks.

reason (Optional[str]) – The reason for deleting the messages. Shows up on the audit log.

RETURNS:
The list of messages that were deleted.

RETURN TYPE:
List[Message]

RAISES:
Forbidden – You do not have proper permissions to do the actions required.

HTTPException – Purging the messages failed.

EXAMPLES

Deleting bot’s messages

def is_me(m):
    return m.author == client.user

deleted = await channel.purge(limit=100, check=is_me)
await channel.send(f'Deleted {len(deleted)} message(s)')
await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await set_permissions(target, *, overwrite=..., reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Note

This method replaces the old overwrites with the ones given.

EXAMPLES

Setting allow and deny:

await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
PARAMETERS:
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

property threads
Returns all the threads that you can see.

New in version 2.0.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

property type
The channel’s Discord type.

RETURN TYPE:
ChannelType

await webhooks()
This function is a coroutine.

Gets the list of webhooks from this channel.

Requires manage_webhooks permissions.

RETURNS:
The webhooks for this channel.

RETURN TYPE:
List[Webhook]

RAISES:
Forbidden – You don’t have permissions to get the webhooks.

class discord.ForumChannel(*, state, guild, data)[source]
Attributes
available_tags
category
category_id
changed_roles
created_at
default_auto_archive_duration
default_sort_order
default_thread_slowmode_delay
flags
guidelines
guild
id
jump_url
last_message
last_message_id
members
mention
name
nsfw
overwrites
permissions_synced
position
requires_tag
slowmode_delay
threads
topic
type
Methods
archived_threads
clone
create_invite
create_thread
create_webhook
delete
delete_messages
edit
follow
get_partial_message
get_tag
get_thread
invites
is_nsfw
move
overwrites_for
permissions_for
purge
set_permissions
webhooks
Represents a Discord forum channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns the channel’s name.

name
The channel name.

TYPE:
str

guild
The guild the channel belongs to.

TYPE:
Guild

id
The channel ID.

TYPE:
int

category_id
The category channel ID this channel belongs to, if applicable.

TYPE:
Optional[int]

topic
The channel’s topic. None if it doesn’t exist.

Note

guidelines exists as an alternative to this attribute.

TYPE:
Optional[str]

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0. Can be None if the channel was received in an interaction.

TYPE:
Optional[int]

last_message_id
The last message ID of the message sent to this channel. It may not point to an existing or valid message.

TYPE:
Optional[int]

slowmode_delay
The number of seconds a member must wait between sending messages in this channel. A value of 0 denotes that it is disabled. Bots and users with manage_channels or manage_messages bypass slowmode.

TYPE:
int

nsfw
If the channel is marked as “not safe for work”.

Note

To check if the channel or the guild of that channel are marked as NSFW, consider is_nsfw() instead.

TYPE:
bool

default_auto_archive_duration
The default auto archive duration in minutes for threads created in this channel.

New in version 2.0.

TYPE:
int

flags
Extra features of the channel.

New in version 2.0.

TYPE:
ChannelFlags

available_tags
The set of tags that can be used in a forum channel.

New in version 2.3.

TYPE:
List[ForumTag]

default_sort_order
The default sort order type used to order posts in this channel.

New in version 2.3.

TYPE:
Optional[SortOrder]

default_thread_slowmode_delay
The initial slowmode delay to set on newly created threads in this channel.

New in version 2.3.

TYPE:
Optional[int]

PARAMETERS:
state (ConnectionState) –

guild (Guild) –

data (ForumChannelPayload) –

property guidelines
The channel’s guidelines. An alias of topic.

RETURN TYPE:
str | None

property requires_tag
Whether a tag is required to be specified when creating a thread in this forum channel.

Tags are specified in applied_tags.

New in version 2.3.

RETURN TYPE:
bool

get_tag(id, /)[source]
Returns the ForumTag from this forum channel with the given ID, if any.

New in version 2.3.

PARAMETERS:
id (int) –

RETURN TYPE:
ForumTag | None

await edit(*, reason=None, **options)[source]
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

PARAMETERS:
name (str) – The new channel name.

topic (str) – The new channel’s topic.

position (int) – The new channel’s position.

nsfw (bool) – To mark the channel as NSFW or not.

sync_permissions (bool) – Whether to sync permissions with the channel’s new or pre-existing category. Defaults to False.

category (Optional[CategoryChannel]) – The new category for this channel. Can be None to remove the category.

slowmode_delay (int) – Specifies the slowmode rate limit for user in this channel, in seconds. A value of 0 disables slowmode. The maximum value possible is 21600.

reason (Optional[str]) – The reason for editing this channel. Shows up on the audit log.

overwrites (Dict[Union[Role, Member, Snowflake], PermissionOverwrite]) – The overwrites to apply to channel permissions. Useful for creating secret channels.

default_auto_archive_duration (int) – The new default auto archive duration in minutes for threads created in this channel. Must be one of 60, 1440, 4320, or 10080.

default_thread_slowmode_delay (int) –

The new default slowmode delay in seconds for threads created in this channel.

New in version 2.3.

default_sort_order (Optional[SortOrder]) –

The default sort order type to use to order posts in this channel.

New in version 2.3.

available_tags (List[ForumTag]) –

The set of tags that can be used in this channel. Must be less than 20.

New in version 2.3.

require_tag (bool) –

Whether a tag should be required to be specified when creating a thread in this channel.

New in version 2.3.

RETURNS:
The newly edited forum channel. If the edit was only positional then None is returned instead.

RETURN TYPE:
Optional[ForumChannel]

RAISES:
InvalidArgument – If position is less than 0 or greater than the number of channels, or if the permission overwrite information is not in proper form.

Forbidden – You do not have permissions to edit the channel.

HTTPException – Editing the channel failed.

await create_thread(name, content=None, *, embed=None, embeds=None, file=None, files=None, stickers=None, delete_message_after=None, nonce=None, allowed_mentions=None, view=None, applied_tags=None, auto_archive_duration=..., slowmode_delay=..., reason=None)[source]
This function is a coroutine.

Creates a thread in this forum channel.

To create a public thread, you must have create_public_threads. For a private thread, create_private_threads is needed instead.

New in version 2.0.

PARAMETERS:
name (str) – The name of the thread.

content (str) – The content of the message to send.

embed (Embed) – The rich embed for the content.

embeds (List[Embed]) – A list of embeds to upload. Must be a maximum of 10.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

stickers (Sequence[Union[GuildSticker, StickerItem]]) – A list of stickers to upload. Must be a maximum of 3.

delete_message_after (int) – The time to wait before deleting the thread.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

allowed_mentions (AllowedMentions) – Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

view (discord.ui.View) – A Discord UI View to add to the message.

applied_tags (List[discord.ForumTag]) – A list of tags to apply to the new thread.

auto_archive_duration (int) – The duration in minutes before a thread is automatically archived for inactivity. If not provided, the channel’s default auto archive duration is used.

slowmode_delay (int) – The number of seconds a member must wait between sending messages in the new thread. A value of 0 denotes that it is disabled. Bots and users with manage_channels or manage_messages bypass slowmode. If not provided, the forum channel’s default slowmode is used.

reason (str) – The reason for creating a new thread. Shows up on the audit log.

RETURNS:
The created thread

RETURN TYPE:
Thread

RAISES:
Forbidden – You do not have permissions to create a thread.

HTTPException – Starting the thread failed.

archived_threads(*, private=False, joined=False, limit=50, before=None)
Returns an AsyncIterator that iterates over all archived threads in the guild.

You must have read_message_history to use this. If iterating over private threads then manage_threads is also required.

New in version 2.0.

PARAMETERS:
limit (Optional[bool]) – The number of threads to retrieve. If None, retrieves every archived thread in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[abc.Snowflake, datetime.datetime]]) – Retrieve archived channels before the given date or ID.

private (bool) – Whether to retrieve private archived threads.

joined (bool) – Whether to retrieve private archived threads that you’ve joined. You cannot set joined to True and private to False.

YIELDS:
Thread – The archived threads.

RAISES:
Forbidden – You do not have permissions to get archived threads.

HTTPException – The request to get the archived threads failed.

RETURN TYPE:
ArchivedThreadIterator

property category
The category this channel belongs to.

If there is no category then this is None.

RETURN TYPE:
CategoryChannel | None

property changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

await clone(*, name=None, reason=None)
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

PARAMETERS:
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

RETURNS:
The channel that was created.

RETURN TYPE:
abc.GuildChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

await create_invite(*, reason=None, max_age=0, max_uses=0, temporary=False, unique=True, target_event=None, target_type=None, target_user=None, target_application_id=None)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

PARAMETERS:
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

target_type (Optional[InviteTarget]) –

The type of target for the voice channel invite, if any.

New in version 2.0.

target_user (Optional[User]) –

The user whose stream to display for this invite, required if target_type is TargetType.stream. The user must be streaming in the channel.

New in version 2.0.

target_application_id (Optional[int]) –

The id of the embedded application for the invite, required if target_type is TargetType.embedded_application.

New in version 2.0.

target_event (Optional[ScheduledEvent]) –

The scheduled event object to link to the event. Shortcut to Invite.set_scheduled_event()

See Invite.set_scheduled_event() for more info on event invite linking.

New in version 2.0.

RETURNS:
The invite that was created.

RETURN TYPE:
Invite

RAISES:
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

await create_webhook(*, name, avatar=None, reason=None)
This function is a coroutine.

Creates a webhook for this channel.

Requires manage_webhooks permissions.

Changed in version 1.1: Added the reason keyword-only parameter.

PARAMETERS:
name (str) – The webhook’s name.

avatar (Optional[bytes]) – A bytes-like object representing the webhook’s default avatar. This operates similarly to edit().

reason (Optional[str]) – The reason for creating this webhook. Shows up in the audit logs.

RETURNS:
The created webhook.

RETURN TYPE:
Webhook

RAISES:
HTTPException – Creating the webhook failed.

Forbidden – You do not have permissions to create a webhook.

property created_at
Returns the channel’s creation time in UTC.

RETURN TYPE:
datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

RAISES:
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

RETURN TYPE:
None

await delete_messages(messages, *, reason=None)
This function is a coroutine.

Deletes a list of messages. This is similar to Message.delete() except it bulk deletes multiple messages.

As a special case, if the number of messages is 0, then nothing is done. If the number of messages is 1 then single message delete is done. If it’s more than two, then bulk delete is used.

You cannot bulk delete more than 100 messages or messages that are older than 14 days old.

You must have the manage_messages permission to use this.

PARAMETERS:
messages (Iterable[abc.Snowflake]) – An iterable of messages denoting which ones to bulk delete.

reason (Optional[str]) – The reason for deleting the messages. Shows up on the audit log.

RAISES:
ClientException – The number of messages to delete was more than 100.

Forbidden – You do not have proper permissions to delete the messages.

NotFound – If single delete, then the message was already deleted.

HTTPException – Deleting the messages failed.

RETURN TYPE:
None

await follow(*, destination, reason=None)
Follows a channel using a webhook.

Only news channels can be followed.

Note

The webhook returned will not provide a token to do webhook actions, as Discord does not provide it.

New in version 1.3.

PARAMETERS:
destination (TextChannel) – The channel you would like to follow from.

reason (Optional[str]) –

The reason for following the channel. Shows up on the destination guild’s audit log.

New in version 1.4.

RETURNS:
The created webhook.

RETURN TYPE:
Webhook

RAISES:
HTTPException – Following the channel failed.

Forbidden – You do not have the permissions to create a webhook.

get_partial_message(message_id, /)
Creates a PartialMessage from the message ID.

This is useful if you want to work with a message and only have its ID without doing an unnecessary API call.

New in version 1.6.

PARAMETERS:
message_id (int) – The message ID to create a partial message for.

RETURNS:
The partial message.

RETURN TYPE:
PartialMessage

get_thread(thread_id, /)
Returns a thread with the given ID.

New in version 2.0.

PARAMETERS:
thread_id (int) – The ID to search for.

RETURNS:
The returned thread or None if not found.

RETURN TYPE:
Optional[Thread]

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

RETURNS:
The list of invites that are currently active.

RETURN TYPE:
List[Invite]

RAISES:
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

is_nsfw()
Checks if the channel is NSFW.

RETURN TYPE:
bool

property jump_url
Returns a URL that allows the client to jump to the channel.

New in version 2.0.

RETURN TYPE:
str

property last_message
Fetches the last message from this channel in cache.

The message might not be valid or point to an existing message.

Reliable Fetching

For a slightly more reliable method of fetching the last message, consider using either history() or fetch_message() with the last_message_id attribute.

RETURNS:
The last message in this channel or None if not found.

RETURN TYPE:
Optional[Message]

property members
Returns all members that can see this channel.

RETURN TYPE:
list[Member]

property mention
The string that allows you to mention the channel.

RETURN TYPE:
str

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit should be used instead.

You must have the manage_channels permission to do this.

Note

Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

PARAMETERS:
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

RAISES:
InvalidArgument – An invalid position was given or a bad mix of arguments was passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

RETURN TYPE:
None

property overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

RETURNS:
The channel’s permission overwrites.

RETURN TYPE:
Dict[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

PARAMETERS:
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

RETURNS:
The permission overwrites for this object.

RETURN TYPE:
PermissionOverwrite

permissions_for(obj, /)
Handles permission resolution for the Member or Role.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

If a Role is passed, then it checks the permissions someone with that role would have, which is essentially:

The default role permissions

The permissions of the role used as a parameter

The default role permission overwrites

The permission overwrites of the role used as a parameter

Changed in version 2.0: The object passed in can now be a role object.

PARAMETERS:
obj (Union[Member, Role]) – The object to resolve permissions for. This could be either a member or a role. If it’s a role then member overwrites are not computed.

RETURNS:
The resolved permissions for the member or role.

RETURN TYPE:
Permissions

property permissions_synced
Whether the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

RETURN TYPE:
bool

await purge(*, limit=100, check=..., before=None, after=None, around=None, oldest_first=False, bulk=True, reason=None)
This function is a coroutine.

Purges a list of messages that meet the criteria given by the predicate check. If a check is not provided then all messages are deleted without discrimination.

You must have the manage_messages permission to delete messages even if they are your own. The read_message_history permission is also needed to retrieve message history.

PARAMETERS:
limit (Optional[int]) – The number of messages to search through. This is not the number of messages that will be deleted, though it can be.

check (Callable[[Message], bool]) – The function used to check if a message should be deleted. It must take a Message as its sole parameter.

before (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as before in history().

after (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as after in history().

around (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as around in history().

oldest_first (Optional[bool]) – Same as oldest_first in history().

bulk (bool) – If True, use bulk delete. Setting this to False is useful for mass-deleting a bot’s own messages without Permissions.manage_messages. When True, will fall back to single delete if messages are older than two weeks.

reason (Optional[str]) – The reason for deleting the messages. Shows up on the audit log.

RETURNS:
The list of messages that were deleted.

RETURN TYPE:
List[Message]

RAISES:
Forbidden – You do not have proper permissions to do the actions required.

HTTPException – Purging the messages failed.

EXAMPLES

Deleting bot’s messages

def is_me(m):
    return m.author == client.user

deleted = await channel.purge(limit=100, check=is_me)
await channel.send(f'Deleted {len(deleted)} message(s)')
await set_permissions(target, *, overwrite=..., reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Note

This method replaces the old overwrites with the ones given.

EXAMPLES

Setting allow and deny:

await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
PARAMETERS:
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

property threads
Returns all the threads that you can see.

New in version 2.0.

property type
The channel’s Discord type.

RETURN TYPE:
ChannelType

await webhooks()
This function is a coroutine.

Gets the list of webhooks from this channel.

Requires manage_webhooks permissions.

RETURNS:
The webhooks for this channel.

RETURN TYPE:
List[Webhook]

RAISES:
Forbidden – You don’t have permissions to get the webhooks.

class discord.VoiceChannel(*, state, guild, data)[source]
Attributes
bitrate
category
category_id
changed_roles
created_at
flags
guild
id
jump_url
last_message
last_message_id
members
mention
name
overwrites
permissions_synced
position
rtc_region
type
user_limit
video_quality_mode
voice_states
Methods
can_send
clone
connect
create_activity_invite
create_invite
create_webhook
delete
delete_messages
edit
fetch_message
get_partial_message
history
invites
is_nsfw
move
overwrites_for
permissions_for
pins
purge
send
set_permissions
trigger_typing
typing
webhooks
Represents a Discord guild voice channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns the channel’s name.

name
The channel name.

TYPE:
str

guild
The guild the channel belongs to.

TYPE:
Guild

id
The channel ID.

TYPE:
int

category_id
The category channel ID this channel belongs to, if applicable.

TYPE:
Optional[int]

position
The position in the channel list. This is a number that starts at 0. e.g. the top channel is position 0. Can be None if the channel was received in an interaction.

TYPE:
Optional[int]

bitrate
The channel’s preferred audio bitrate in bits per second.

TYPE:
int

user_limit
The channel’s limit for number of members that can be in a voice channel.

TYPE:
int

rtc_region
The region for the voice channel’s voice communication. A value of None indicates automatic voice region detection.

New in version 1.7.

TYPE:
Optional[VoiceRegion]

video_quality_mode
The camera video quality for the voice channel’s participants.

New in version 2.0.

TYPE:
VideoQualityMode

last_message_id
The ID of the last message sent to this channel. It may not always point to an existing or valid message.

New in version 2.0.

TYPE:
Optional[int]

flags
Extra features of the channel.

New in version 2.0.

TYPE:
ChannelFlags

PARAMETERS:
state (ConnectionState) –

guild (Guild) –

data (VoiceChannelPayload | StageChannelPayload) –

is_nsfw()[source]
Checks if the channel is NSFW.

RETURN TYPE:
bool

property last_message
Fetches the last message from this channel in cache.

The message might not be valid or point to an existing message.

Reliable Fetching

For a slightly more reliable method of fetching the last message, consider using either history() or fetch_message() with the last_message_id attribute.

RETURNS:
The last message in this channel or None if not found.

RETURN TYPE:
Optional[Message]

get_partial_message(message_id, /)[source]
Creates a PartialMessage from the message ID.

This is useful if you want to work with a message and only have its ID without doing an unnecessary API call.

New in version 1.6.

PARAMETERS:
message_id (int) – The message ID to create a partial message for.

RETURNS:
The partial message.

RETURN TYPE:
PartialMessage

await delete_messages(messages, *, reason=None)[source]
This function is a coroutine.

Deletes a list of messages. This is similar to Message.delete() except it bulk deletes multiple messages.

As a special case, if the number of messages is 0, then nothing is done. If the number of messages is 1 then single message delete is done. If it’s more than two, then bulk delete is used.

You cannot bulk delete more than 100 messages or messages that are older than 14 days old.

You must have the manage_messages permission to use this.

PARAMETERS:
messages (Iterable[abc.Snowflake]) – An iterable of messages denoting which ones to bulk delete.

reason (Optional[str]) – The reason for deleting the messages. Shows up on the audit log.

RAISES:
ClientException – The number of messages to delete was more than 100.

Forbidden – You do not have proper permissions to delete the messages.

NotFound – If single delete, then the message was already deleted.

HTTPException – Deleting the messages failed.

RETURN TYPE:
None

await purge(*, limit=100, check=..., before=None, after=None, around=None, oldest_first=False, bulk=True, reason=None)[source]
This function is a coroutine.

Purges a list of messages that meet the criteria given by the predicate check. If a check is not provided then all messages are deleted without discrimination.

You must have the manage_messages permission to delete messages even if they are your own. The read_message_history permission is also needed to retrieve message history.

PARAMETERS:
limit (Optional[int]) – The number of messages to search through. This is not the number of messages that will be deleted, though it can be.

check (Callable[[Message], bool]) – The function used to check if a message should be deleted. It must take a Message as its sole parameter.

before (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as before in history().

after (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as after in history().

around (Optional[Union[abc.Snowflake, datetime.datetime]]) – Same as around in history().

oldest_first (Optional[bool]) – Same as oldest_first in history().

bulk (bool) – If True, use bulk delete. Setting this to False is useful for mass-deleting a bot’s own messages without Permissions.manage_messages. When True, will fall back to single delete if messages are older than two weeks.

reason (Optional[str]) – The reason for deleting the messages. Shows up on the audit log.

RETURNS:
The list of messages that were deleted.

RETURN TYPE:
List[Message]

RAISES:
Forbidden – You do not have proper permissions to do the actions required.

HTTPException – Purging the messages failed.

EXAMPLES

Deleting bot’s messages

def is_me(m):
    return m.author == client.user

deleted = await channel.purge(limit=100, check=is_me)
await channel.send(f'Deleted {len(deleted)} message(s)')
await webhooks()[source]
This function is a coroutine.

Gets the list of webhooks from this channel.

Requires manage_webhooks permissions.

RETURNS:
The webhooks for this channel.

RETURN TYPE:
List[Webhook]

RAISES:
Forbidden – You don’t have permissions to get the webhooks.

await create_webhook(*, name, avatar=None, reason=None)[source]
This function is a coroutine.

Creates a webhook for this channel.

Requires manage_webhooks permissions.

Changed in version 1.1: Added the reason keyword-only parameter.

PARAMETERS:
name (str) – The webhook’s name.

avatar (Optional[bytes]) – A bytes-like object representing the webhook’s default avatar. This operates similarly to edit().

reason (Optional[str]) – The reason for creating this webhook. Shows up in the audit logs.

RETURNS:
The created webhook.

RETURN TYPE:
Webhook

RAISES:
HTTPException – Creating the webhook failed.

Forbidden – You do not have permissions to create a webhook.

property type
The channel’s Discord type.

RETURN TYPE:
ChannelType

await clone(*, name=None, reason=None)[source]
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

PARAMETERS:
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

RETURNS:
The channel that was created.

RETURN TYPE:
abc.GuildChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

await edit(*, reason=None, **options)[source]
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

Changed in version 1.3: The overwrites keyword-only parameter was added.

Changed in version 2.0: Edits are no longer in-place, the newly edited channel is returned instead.

PARAMETERS:
name (str) – The new channel’s name.

bitrate (int) – The new channel’s bitrate.

user_limit (int) – The new channel’s user limit.

position (int) – The new channel’s position.

sync_permissions (bool) – Whether to sync permissions with the channel’s new or pre-existing category. Defaults to False.

category (Optional[CategoryChannel]) – The new category for this channel. Can be None to remove the category.

reason (Optional[str]) – The reason for editing this channel. Shows up on the audit log.

overwrites (Dict[Union[Role, Member, Snowflake], PermissionOverwrite]) – The overwrites to apply to channel permissions. Useful for creating secret channels.

rtc_region (Optional[VoiceRegion]) –

The new region for the voice channel’s voice communication. A value of None indicates automatic voice region detection.

New in version 1.7.

video_quality_mode (VideoQualityMode) –

The camera video quality for the voice channel’s participants.

New in version 2.0.

RETURNS:
The newly edited voice channel. If the edit was only positional then None is returned instead.

RETURN TYPE:
Optional[VoiceChannel]

RAISES:
InvalidArgument – If the permission overwrite information is not in proper form.

Forbidden – You do not have permissions to edit the channel.

HTTPException – Editing the channel failed.

await create_activity_invite(activity, **kwargs)[source]
This function is a coroutine.

A shortcut method that creates an instant activity invite.

You must have the start_embedded_activities permission to do this.

PARAMETERS:
activity (Union[discord.EmbeddedActivity, int]) – The activity to create an invite for which can be an application id as well.

max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

RETURNS:
The invite that was created.

RETURN TYPE:
Invite

RAISES:
TypeError – If the activity is not a valid activity or application id.

HTTPException – Invite creation failed.

can_send(*objects)
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

property category
The category this channel belongs to.

If there is no category then this is None.

RETURN TYPE:
CategoryChannel | None

property changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

await connect(*, timeout=60.0, reconnect=True, cls=<class 'discord.voice_client.VoiceClient'>)
This function is a coroutine.

Connects to voice and creates a VoiceClient to establish your connection to the voice server.

This requires Intents.voice_states.

PARAMETERS:
timeout (float) – The timeout in seconds to wait for the voice endpoint.

reconnect (bool) – Whether the bot should automatically attempt a reconnect if a part of the handshake fails or the gateway goes down.

cls (Type[VoiceProtocol]) – A type that subclasses VoiceProtocol to connect with. Defaults to VoiceClient.

RETURNS:
A voice client that is fully connected to the voice server.

RETURN TYPE:
VoiceProtocol

RAISES:
asyncio.TimeoutError – Could not connect to the voice channel in time.

ClientException – You are already connected to a voice channel.

OpusNotLoaded – The opus library has not been loaded.

await create_invite(*, reason=None, max_age=0, max_uses=0, temporary=False, unique=True, target_event=None, target_type=None, target_user=None, target_application_id=None)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

PARAMETERS:
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

target_type (Optional[InviteTarget]) –

The type of target for the voice channel invite, if any.

New in version 2.0.

target_user (Optional[User]) –

The user whose stream to display for this invite, required if target_type is TargetType.stream. The user must be streaming in the channel.

New in version 2.0.

target_application_id (Optional[int]) –

The id of the embedded application for the invite, required if target_type is TargetType.embedded_application.

New in version 2.0.

target_event (Optional[ScheduledEvent]) –

The scheduled event object to link to the event. Shortcut to Invite.set_scheduled_event()

See Invite.set_scheduled_event() for more info on event invite linking.

New in version 2.0.

RETURNS:
The invite that was created.

RETURN TYPE:
Invite

RAISES:
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

property created_at
Returns the channel’s creation time in UTC.

RETURN TYPE:
datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

RAISES:
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

RETURN TYPE:
None

await fetch_message(id, /)
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

RETURNS:
The list of invites that are currently active.

RETURN TYPE:
List[Invite]

RAISES:
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

property jump_url
Returns a URL that allows the client to jump to the channel.

New in version 2.0.

RETURN TYPE:
str

property members
Returns all members that are currently inside this voice channel.

RETURN TYPE:
list[Member]

property mention
The string that allows you to mention the channel.

RETURN TYPE:
str

await move(**kwargs)
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit should be used instead.

You must have the manage_channels permission to do this.

Note

Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

PARAMETERS:
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

RAISES:
InvalidArgument – An invalid position was given or a bad mix of arguments was passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

RETURN TYPE:
None

property overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

RETURNS:
The channel’s permission overwrites.

RETURN TYPE:
Dict[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

PARAMETERS:
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

RETURNS:
The permission overwrites for this object.

RETURN TYPE:
PermissionOverwrite

permissions_for(obj, /)
Handles permission resolution for the Member or Role.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

If a Role is passed, then it checks the permissions someone with that role would have, which is essentially:

The default role permissions

The permissions of the role used as a parameter

The default role permission overwrites

The permission overwrites of the role used as a parameter

Changed in version 2.0: The object passed in can now be a role object.

PARAMETERS:
obj (Union[Member, Role]) – The object to resolve permissions for. This could be either a member or a role. If it’s a role then member overwrites are not computed.

RETURNS:
The resolved permissions for the member or role.

RETURN TYPE:
Permissions

property permissions_synced
Whether the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

RETURN TYPE:
bool

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await set_permissions(target, *, overwrite=..., reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Note

This method replaces the old overwrites with the ones given.

EXAMPLES

Setting allow and deny:

await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
PARAMETERS:
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

property voice_states
Returns a mapping of member IDs who have voice states in this channel.

New in version 1.3.

Note

This function is intentionally low level to replace members when the member cache is unavailable.

RETURNS:
The mapping of member ID to a voice state.

RETURN TYPE:
Mapping[int, VoiceState]

class discord.CategoryChannel(*, state, guild, data)[source]
Attributes
category
changed_roles
channels
created_at
flags
forum_channels
guild
id
jump_url
mention
name
nsfw
overwrites
permissions_synced
position
stage_channels
text_channels
type
voice_channels
Methods
clone
create_forum_channel
create_invite
create_stage_channel
create_text_channel
create_voice_channel
delete
edit
invites
is_nsfw
move
overwrites_for
permissions_for
set_permissions
Represents a Discord channel category.

These are useful to group channels to logical compartments.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the category’s hash.

str(x)
Returns the category’s name.

name
The category name.

TYPE:
str

guild
The guild the category belongs to.

TYPE:
Guild

id
The category channel ID.

TYPE:
int

position
The position in the category list. This is a number that starts at 0. e.g. the top category is position 0. Can be None if the channel was received in an interaction.

TYPE:
Optional[int]

nsfw
If the channel is marked as “not safe for work”.

Note

To check if the channel or the guild of that channel are marked as NSFW, consider is_nsfw() instead.

TYPE:
bool

flags
Extra features of the channel.

New in version 2.0.

TYPE:
ChannelFlags

PARAMETERS:
state (ConnectionState) –

guild (Guild) –

data (CategoryChannelPayload) –

property type
The channel’s Discord type.

RETURN TYPE:
ChannelType

is_nsfw()[source]
Checks if the category is NSFW.

RETURN TYPE:
bool

await clone(*, name=None, reason=None)[source]
This function is a coroutine.

Clones this channel. This creates a channel with the same properties as this channel.

You must have the manage_channels permission to do this.

New in version 1.1.

PARAMETERS:
name (Optional[str]) – The name of the new channel. If not provided, defaults to this channel name.

reason (Optional[str]) – The reason for cloning this channel. Shows up on the audit log.

RETURNS:
The channel that was created.

RETURN TYPE:
abc.GuildChannel

RAISES:
Forbidden – You do not have the proper permissions to create this channel.

HTTPException – Creating the channel failed.

await edit(*, reason=None, **options)[source]
This function is a coroutine.

Edits the channel.

You must have the manage_channels permission to use this.

Changed in version 1.3: The overwrites keyword-only parameter was added.

Changed in version 2.0: Edits are no longer in-place, the newly edited channel is returned instead.

PARAMETERS:
name (str) – The new category’s name.

position (int) – The new category’s position.

nsfw (bool) – To mark the category as NSFW or not.

reason (Optional[str]) – The reason for editing this category. Shows up on the audit log.

overwrites (Dict[Union[Role, Member, Snowflake], PermissionOverwrite]) – The overwrites to apply to channel permissions. Useful for creating secret channels.

RETURNS:
The newly edited category channel. If the edit was only positional then None is returned instead.

RETURN TYPE:
Optional[CategoryChannel]

RAISES:
InvalidArgument – If position is less than 0 or greater than the number of categories.

Forbidden – You do not have permissions to edit the category.

HTTPException – Editing the category failed.

await move(**kwargs)[source]
This function is a coroutine.

A rich interface to help move a channel relative to other channels.

If exact position movement is required, edit should be used instead.

You must have the manage_channels permission to do this.

Note

Voice channels will always be sorted below text channels. This is a Discord limitation.

New in version 1.7.

PARAMETERS:
beginning (bool) – Whether to move the channel to the beginning of the channel list (or category if given). This is mutually exclusive with end, before, and after.

end (bool) – Whether to move the channel to the end of the channel list (or category if given). This is mutually exclusive with beginning, before, and after.

before (Snowflake) – The channel that should be before our current channel. This is mutually exclusive with beginning, end, and after.

after (Snowflake) – The channel that should be after our current channel. This is mutually exclusive with beginning, end, and before.

offset (int) – The number of channels to offset the move by. For example, an offset of 2 with beginning=True would move it 2 after the beginning. A positive number moves it below while a negative number moves it above. Note that this number is relative and computed after the beginning, end, before, and after parameters.

category (Optional[Snowflake]) – The category to move this channel under. If None is given then it moves it out of the category. This parameter is ignored if moving a category channel.

sync_permissions (bool) – Whether to sync the permissions with the category (if given).

reason (str) – The reason for the move.

RAISES:
InvalidArgument – An invalid position was given or a bad mix of arguments was passed.

Forbidden – You do not have permissions to move the channel.

HTTPException – Moving the channel failed.

property channels
Returns the channels that are under this category.

These are sorted by the official Discord UI, which places voice channels below the text channels.

RETURN TYPE:
list[GuildChannelType]

property text_channels
Returns the text channels that are under this category.

property voice_channels
Returns the voice channels that are under this category.

property stage_channels
Returns the stage channels that are under this category.

New in version 1.7.

property forum_channels
Returns the forum channels that are under this category.

New in version 2.0.

await create_text_channel(name, **options)[source]
This function is a coroutine.

A shortcut method to Guild.create_text_channel() to create a TextChannel in the category.

RETURNS:
The channel that was just created.

RETURN TYPE:
TextChannel

PARAMETERS:
name (str) –

options (Any) –

await create_voice_channel(name, **options)[source]
This function is a coroutine.

A shortcut method to Guild.create_voice_channel() to create a VoiceChannel in the category.

RETURNS:
The channel that was just created.

RETURN TYPE:
VoiceChannel

PARAMETERS:
name (str) –

options (Any) –

await create_stage_channel(name, **options)[source]
This function is a coroutine.

A shortcut method to Guild.create_stage_channel() to create a StageChannel in the category.

New in version 1.7.

RETURNS:
The channel that was just created.

RETURN TYPE:
StageChannel

PARAMETERS:
name (str) –

options (Any) –

await create_forum_channel(name, **options)[source]
This function is a coroutine.

A shortcut method to Guild.create_forum_channel() to create a ForumChannel in the category.

New in version 2.0.

RETURNS:
The channel that was just created.

RETURN TYPE:
ForumChannel

PARAMETERS:
name (str) –

options (Any) –

property category
The category this channel belongs to.

If there is no category then this is None.

RETURN TYPE:
CategoryChannel | None

property changed_roles
Returns a list of roles that have been overridden from their default values in the roles attribute.

await create_invite(*, reason=None, max_age=0, max_uses=0, temporary=False, unique=True, target_event=None, target_type=None, target_user=None, target_application_id=None)
This function is a coroutine.

Creates an instant invite from a text or voice channel.

You must have the create_instant_invite permission to do this.

PARAMETERS:
max_age (int) – How long the invite should last in seconds. If it’s 0 then the invite doesn’t expire. Defaults to 0.

max_uses (int) – How many uses the invite could be used for. If it’s 0 then there are unlimited uses. Defaults to 0.

temporary (bool) – Denotes that the invite grants temporary membership (i.e. they get kicked after they disconnect). Defaults to False.

unique (bool) – Indicates if a unique invite URL should be created. Defaults to True. If this is set to False then it will return a previously created invite.

reason (Optional[str]) – The reason for creating this invite. Shows up on the audit log.

target_type (Optional[InviteTarget]) –

The type of target for the voice channel invite, if any.

New in version 2.0.

target_user (Optional[User]) –

The user whose stream to display for this invite, required if target_type is TargetType.stream. The user must be streaming in the channel.

New in version 2.0.

target_application_id (Optional[int]) –

The id of the embedded application for the invite, required if target_type is TargetType.embedded_application.

New in version 2.0.

target_event (Optional[ScheduledEvent]) –

The scheduled event object to link to the event. Shortcut to Invite.set_scheduled_event()

See Invite.set_scheduled_event() for more info on event invite linking.

New in version 2.0.

RETURNS:
The invite that was created.

RETURN TYPE:
Invite

RAISES:
HTTPException – Invite creation failed.

NotFound – The channel that was passed is a category or an invalid channel.

property created_at
Returns the channel’s creation time in UTC.

RETURN TYPE:
datetime

await delete(*, reason=None)
This function is a coroutine.

Deletes the channel.

You must have manage_channels permission to use this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this channel. Shows up on the audit log.

RAISES:
Forbidden – You do not have proper permissions to delete the channel.

NotFound – The channel was not found or was already deleted.

HTTPException – Deleting the channel failed.

RETURN TYPE:
None

await invites()
This function is a coroutine.

Returns a list of all active instant invites from this channel.

You must have manage_channels to get this information.

RETURNS:
The list of invites that are currently active.

RETURN TYPE:
List[Invite]

RAISES:
Forbidden – You do not have proper permissions to get the information.

HTTPException – An error occurred while fetching the information.

property jump_url
Returns a URL that allows the client to jump to the channel.

New in version 2.0.

RETURN TYPE:
str

property mention
The string that allows you to mention the channel.

RETURN TYPE:
str

property overwrites
Returns all of the channel’s overwrites.

This is returned as a dictionary where the key contains the target which can be either a Role or a Member and the value is the overwrite as a PermissionOverwrite.

RETURNS:
The channel’s permission overwrites.

RETURN TYPE:
Dict[Union[Role, Member], PermissionOverwrite]

overwrites_for(obj)
Returns the channel-specific overwrites for a member or a role.

PARAMETERS:
obj (Union[Role, User]) – The role or user denoting whose overwrite to get.

RETURNS:
The permission overwrites for this object.

RETURN TYPE:
PermissionOverwrite

permissions_for(obj, /)
Handles permission resolution for the Member or Role.

This function takes into consideration the following cases:

Guild owner

Guild roles

Channel overrides

Member overrides

If a Role is passed, then it checks the permissions someone with that role would have, which is essentially:

The default role permissions

The permissions of the role used as a parameter

The default role permission overwrites

The permission overwrites of the role used as a parameter

Changed in version 2.0: The object passed in can now be a role object.

PARAMETERS:
obj (Union[Member, Role]) – The object to resolve permissions for. This could be either a member or a role. If it’s a role then member overwrites are not computed.

RETURNS:
The resolved permissions for the member or role.

RETURN TYPE:
Permissions

property permissions_synced
Whether the permissions for this channel are synced with the category it belongs to.

If there is no category then this is False.

New in version 1.3.

RETURN TYPE:
bool

await set_permissions(target, *, overwrite=..., reason=None, **permissions)
This function is a coroutine.

Sets the channel specific permission overwrites for a target in the channel.

The target parameter should either be a Member or a Role that belongs to guild.

The overwrite parameter, if given, must either be None or PermissionOverwrite. For convenience, you can pass in keyword arguments denoting Permissions attributes. If this is done, then you cannot mix the keyword arguments with the overwrite parameter.

If the overwrite parameter is None, then the permission overwrites are deleted.

You must have the manage_roles permission to use this.

Note

This method replaces the old overwrites with the ones given.

EXAMPLES

Setting allow and deny:

await message.channel.set_permissions(message.author, read_messages=True,
                                                      send_messages=False)
Deleting overwrites

await channel.set_permissions(member, overwrite=None)
Using PermissionOverwrite

overwrite = discord.PermissionOverwrite()
overwrite.send_messages = False
overwrite.read_messages = True
await channel.set_permissions(member, overwrite=overwrite)
PARAMETERS:
target (Union[Member, Role]) – The member or role to overwrite permissions for.

overwrite (Optional[PermissionOverwrite]) – The permissions to allow and deny to the target, or None to delete the overwrite.

**permissions – A keyword argument list of permissions to set for ease of use. Cannot be mixed with overwrite.

reason (Optional[str]) – The reason for doing this action. Shows up on the audit log.

RAISES:
Forbidden – You do not have permissions to edit channel specific permissions.

HTTPException – Editing channel specific permissions failed.

NotFound – The role or member being edited is not part of the guild.

InvalidArgument – The overwrite parameter invalid or the target type was not Role or Member.

class discord.DMChannel(*, me, state, data)[source]
Attributes
created_at
id
jump_url
me
recipient
type
Methods
can_send
fetch_message
get_partial_message
history
permissions_for
pins
send
trigger_typing
typing
Represents a Discord direct message channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns a string representation of the channel

recipient
The user you are participating with in the direct message channel. If this channel is received through the gateway, the recipient information may not be always available.

TYPE:
Optional[User]

me
The user presenting yourself.

TYPE:
ClientUser

id
The direct message channel ID.

TYPE:
int

PARAMETERS:
me (ClientUser) –

state (ConnectionState) –

data (DMChannelPayload) –

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

property type
The channel’s Discord type.

RETURN TYPE:
ChannelType

property jump_url
Returns a URL that allows the client to jump to the channel.

New in version 2.0.

RETURN TYPE:
str

property created_at
Returns the direct message channel’s creation time in UTC.

RETURN TYPE:
datetime

permissions_for(obj=None, /)[source]
Handles permission resolution for a User.

This function is there for compatibility with other channel types.

Actual direct messages do not really have the concept of permissions.

This returns all the Text related permissions set to True except:

send_tts_messages: You cannot send TTS messages in a DM.

manage_messages: You cannot delete others messages in a DM.

PARAMETERS:
obj (User) – The user to check permissions for. This parameter is ignored but kept for compatibility with other permissions_for methods.

RETURNS:
The resolved permissions.

RETURN TYPE:
Permissions

get_partial_message(message_id, /)[source]
Creates a PartialMessage from the message ID.

This is useful if you want to work with a message and only have its ID without doing an unnecessary API call.

New in version 1.6.

PARAMETERS:
message_id (int) – The message ID to create a partial message for.

RETURNS:
The partial message.

RETURN TYPE:
PartialMessage

can_send(*objects)
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

await fetch_message(id, /)
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

class discord.GroupChannel(*, me, state, data)[source]
Attributes
created_at
icon
id
jump_url
me
name
owner
owner_id
recipients
type
Methods
can_send
fetch_message
history
leave
permissions_for
pins
send
trigger_typing
typing
Represents a Discord group channel.

x == y
Checks if two channels are equal.

x != y
Checks if two channels are not equal.

hash(x)
Returns the channel’s hash.

str(x)
Returns a string representation of the channel

recipients
The users you are participating with in the group channel.

TYPE:
List[User]

me
The user presenting yourself.

TYPE:
ClientUser

id
The group channel ID.

TYPE:
int

owner
The user that owns the group channel.

TYPE:
Optional[User]

owner_id
The owner ID that owns the group channel.

New in version 2.0.

TYPE:
int

name
The group channel’s name if provided.

TYPE:
Optional[str]

PARAMETERS:
me (ClientUser) –

state (ConnectionState) –

data (GroupChannelPayload) –

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

property type
The channel’s Discord type.

RETURN TYPE:
ChannelType

property icon
Returns the channel’s icon asset if available.

RETURN TYPE:
Asset | None

property created_at
Returns the channel’s creation time in UTC.

RETURN TYPE:
datetime

property jump_url
Returns a URL that allows the client to jump to the channel.

New in version 2.0.

RETURN TYPE:
str

permissions_for(obj, /)[source]
Handles permission resolution for a User.

This function is there for compatibility with other channel types.

Actual direct messages do not really have the concept of permissions.

This returns all the Text related permissions set to True except:

send_tts_messages: You cannot send TTS messages in a DM.

manage_messages: You cannot delete others messages in a DM.

This also checks the kick_members permission if the user is the owner.

PARAMETERS:
obj (Snowflake) – The user to check permissions for.

RETURNS:
The resolved permissions for the user.

RETURN TYPE:
Permissions

await leave()[source]
This function is a coroutine.

Leave the group.

If you are the only one in the group, this deletes it as well.

RAISES:
HTTPException – Leaving the group failed.

RETURN TYPE:
None

can_send(*objects)
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

await fetch_message(id, /)
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

Stickers
class discord.Sticker(*, state, data)[source]
Attributes
created_at
description
format
id
name
pack_id
url
Represents a sticker.

New in version 1.6.

str(x)
Returns the name of the sticker.

x == y
Checks if the sticker is equal to another sticker.

x != y
Checks if the sticker is not equal to another sticker.

name
The sticker’s name.

TYPE:
str

id
The id of the sticker.

TYPE:
int

description
The description of the sticker.

TYPE:
str

pack_id
The id of the sticker’s pack.

TYPE:
int

format
The format for the sticker’s image.

TYPE:
StickerFormatType

url
The URL for the sticker’s image.

TYPE:
str

PARAMETERS:
state (ConnectionState) –

data (Union[BaseSticker, StandardSticker, GuildSticker]) –

property created_at
Returns the sticker’s creation time in UTC.

RETURN TYPE:
datetime

class discord.StickerPack(*, state, data)[source]
Attributes
banner
cover_sticker
cover_sticker_id
description
id
name
sku_id
stickers
Represents a sticker pack.

New in version 2.0.

str(x)
Returns the name of the sticker pack.

x == y
Checks if the sticker pack is equal to another sticker pack.

x != y
Checks if the sticker pack is not equal to another sticker pack.

name
The name of the sticker pack.

TYPE:
str

description
The description of the sticker pack.

TYPE:
str

id
The id of the sticker pack.

TYPE:
int

stickers
The stickers of this sticker pack.

TYPE:
List[StandardSticker]

sku_id
The SKU ID of the sticker pack.

TYPE:
int

cover_sticker_id
The ID of the sticker used for the cover of the sticker pack.

TYPE:
int

cover_sticker
The sticker used for the cover of the sticker pack.

TYPE:
StandardSticker

PARAMETERS:
state (ConnectionState) –

data (StickerPack) –

property banner
The banner asset of the sticker pack.

RETURN TYPE:
Asset

class discord.StickerItem(*, state, data)[source]
Attributes
format
id
name
url
Methods
fetch
Represents a sticker item.

New in version 2.0.

str(x)
Returns the name of the sticker item.

x == y
Checks if the sticker item is equal to another sticker item.

x != y
Checks if the sticker item is not equal to another sticker item.

name
The sticker’s name.

TYPE:
str

id
The id of the sticker.

TYPE:
int

format
The format for the sticker’s image.

TYPE:
StickerFormatType

url
The URL for the sticker’s image.

TYPE:
str

PARAMETERS:
state (ConnectionState) –

data (StickerItem) –

await fetch()[source]
This function is a coroutine.

Attempts to retrieve the full sticker data of the sticker item.

RETURNS:
The retrieved sticker.

RETURN TYPE:
Union[StandardSticker, GuildSticker]

RAISES:
HTTPException – Retrieving the sticker failed.

class discord.StandardSticker(*, state, data)[source]
Attributes
description
format
id
name
pack_id
sort_value
tags
Methods
pack
Represents a sticker that is found in a standard sticker pack.

New in version 2.0.

str(x)
Returns the name of the sticker.

x == y
Checks if the sticker is equal to another sticker.

x != y
Checks if the sticker is not equal to another sticker.

name
The sticker’s name.

TYPE:
str

id
The id of the sticker.

TYPE:
int

description
The description of the sticker.

TYPE:
str

pack_id
The id of the sticker’s pack.

TYPE:
int

format
The format for the sticker’s image.

TYPE:
StickerFormatType

tags
A list of tags for the sticker.

TYPE:
List[str]

sort_value
The sticker’s sort order within its pack.

TYPE:
int

PARAMETERS:
state (ConnectionState) –

data (Union[BaseSticker, StandardSticker, GuildSticker]) –

await pack()[source]
This function is a coroutine.

Retrieves the sticker pack that this sticker belongs to.

RETURNS:
The retrieved sticker pack.

RETURN TYPE:
StickerPack

RAISES:
InvalidData – The corresponding sticker pack was not found.

HTTPException – Retrieving the sticker pack failed.

class discord.GuildSticker(*, state, data)[source]
Attributes
available
description
emoji
format
guild
guild_id
id
name
user
Methods
delete
edit
Represents a sticker that belongs to a guild.

New in version 2.0.

str(x)
Returns the name of the sticker.

x == y
Checks if the sticker is equal to another sticker.

x != y
Checks if the sticker is not equal to another sticker.

name
The sticker’s name.

TYPE:
str

id
The id of the sticker.

TYPE:
int

description
The description of the sticker.

TYPE:
str

format
The format for the sticker’s image.

TYPE:
StickerFormatType

available
Whether this sticker is available for use.

TYPE:
bool

guild_id
The ID of the guild that this sticker is from.

TYPE:
int

user
The user that created this sticker. This can only be retrieved using Guild.fetch_sticker() and having the manage_emojis_and_stickers permission.

TYPE:
Optional[User]

emoji
The name of a unicode emoji that represents this sticker.

TYPE:
str

PARAMETERS:
state (ConnectionState) –

data (Union[BaseSticker, StandardSticker, GuildSticker]) –

guild
The guild that this sticker is from. Could be None if the bot is not in the guild.

New in version 2.0.

await edit(*, name=..., description=..., emoji=..., reason=None)[source]
This function is a coroutine.

Edits a GuildSticker for the guild.

PARAMETERS:
name (str) – The sticker’s new name. Must be at least 2 characters.

description (Optional[str]) – The sticker’s new description. Can be None.

emoji (str) – The name of a unicode emoji that represents the sticker’s expression.

reason (str) – The reason for editing this sticker. Shows up on the audit log.

RETURNS:
The newly modified sticker.

RETURN TYPE:
GuildSticker

RAISES:
Forbidden – You are not allowed to edit stickers.

HTTPException – An error occurred editing the sticker.

await delete(*, reason=None)[source]
This function is a coroutine.

Deletes the custom Sticker from the guild.

You must have manage_emojis_and_stickers permission to do this.

PARAMETERS:
reason (Optional[str]) – The reason for deleting this sticker. Shows up on the audit log.

RAISES:
Forbidden – You are not allowed to delete stickers.

HTTPException – An error occurred deleting the sticker.

RETURN TYPE:
None

Events
class discord.AutoModActionExecutionEvent(state, data)[source]
Attributes
action
alert_system_message
alert_system_message_id
channel
channel_id
content
guild
guild_id
matched_content
matched_keyword
member
message
message_id
rule_id
user_id
Represents the payload for an on_auto_moderation_action_execution()

New in version 2.0.

action
The action that was executed.

TYPE:
AutoModAction

rule_id
The ID of the rule that the action belongs to.

TYPE:
int

guild_id
The ID of the guild that the action was executed in.

TYPE:
int

guild
The guild that the action was executed in, if cached.

TYPE:
Optional[Guild]

user_id
The ID of the user that triggered the action.

TYPE:
int

member
The member that triggered the action, if cached.

TYPE:
Optional[Member]

channel_id
The ID of the channel in which the member’s content was posted.

TYPE:
Optional[int]

channel
The channel in which the member’s content was posted, if cached.

TYPE:
Optional[Union[TextChannel, Thread, VoiceChannel]]

message_id
The ID of the message that triggered the action. This is only available if the message was not blocked.

TYPE:
Optional[int]

message
The message that triggered the action, if cached.

TYPE:
Optional[Message]

alert_system_message_id
The ID of the system auto moderation message that was posted as a result of the action.

TYPE:
Optional[int]

alert_system_message
The system auto moderation message that was posted as a result of the action, if cached.

TYPE:
Optional[Message]

content
The content of the message that triggered the action.

TYPE:
str

matched_keyword
The word or phrase configured that was matched in the content.

TYPE:
str

matched_content
The substring in the content that was matched.

TYPE:
str

PARAMETERS:
state (ConnectionState) –

data (AutoModActionExecutionEvent) –

class discord.RawTypingEvent(data)[source]
Attributes
channel_id
guild_id
member
user_id
when
Represents the payload for a on_raw_typing() event.

New in version 2.0.

channel_id
The channel ID where the typing originated from.

TYPE:
int

user_id
The ID of the user that started typing.

TYPE:
int

when
When the typing started as an aware datetime in UTC.

TYPE:
datetime.datetime

guild_id
The guild ID where the typing originated from, if applicable.

TYPE:
Optional[int]

member
The member who started typing. Only available if the member started typing in a guild.

TYPE:
Optional[Member]

PARAMETERS:
data (TypingEvent) –

class discord.RawMessageDeleteEvent(data)[source]
Attributes
cached_message
channel_id
guild_id
message_id
Represents the event payload for a on_raw_message_delete() event.

channel_id
The channel ID where the deletion took place.

TYPE:
int

guild_id
The guild ID where the deletion took place, if applicable.

TYPE:
Optional[int]

message_id
The message ID that got deleted.

TYPE:
int

cached_message
The cached message, if found in the internal message cache.

TYPE:
Optional[Message]

PARAMETERS:
data (MessageDeleteEvent) –

class discord.RawBulkMessageDeleteEvent(data)[source]
Attributes
cached_messages
channel_id
guild_id
message_ids
Represents the event payload for a on_raw_bulk_message_delete() event.

message_ids
A set of the message IDs that were deleted.

TYPE:
Set[int]

channel_id
The channel ID where the message got deleted.

TYPE:
int

guild_id
The guild ID where the message got deleted, if applicable.

TYPE:
Optional[int]

cached_messages
The cached messages, if found in the internal message cache.

TYPE:
List[Message]

PARAMETERS:
data (BulkMessageDeleteEvent) –

class discord.RawMessageUpdateEvent(data)[source]
Attributes
cached_message
channel_id
data
guild_id
message_id
Represents the payload for a on_raw_message_edit() event.

message_id
The message ID that got updated.

TYPE:
int

channel_id
The channel ID where the update took place.

New in version 1.3.

TYPE:
int

guild_id
The guild ID where the message got updated, if applicable.

New in version 1.7.

TYPE:
Optional[int]

data
The raw data given by the gateway

TYPE:
dict

cached_message
The cached message, if found in the internal message cache. Represents the message before it is modified by the data in RawMessageUpdateEvent.data.

TYPE:
Optional[Message]

PARAMETERS:
data (MessageUpdateEvent) –

class discord.RawReactionActionEvent(data, emoji, event_type)[source]
Attributes
channel_id
emoji
event_type
guild_id
member
message_id
user_id
Represents the payload for a on_raw_reaction_add() or on_raw_reaction_remove() event.

message_id
The message ID that got or lost a reaction.

TYPE:
int

user_id
The user ID who added the reaction or whose reaction was removed.

TYPE:
int

channel_id
The channel ID where the reaction got added or removed.

TYPE:
int

guild_id
The guild ID where the reaction got added or removed, if applicable.

TYPE:
Optional[int]

emoji
The custom or unicode emoji being used.

TYPE:
PartialEmoji

member
The member who added the reaction. Only available if event_type is REACTION_ADD and the reaction is inside a guild.

New in version 1.3.

TYPE:
Optional[Member]

event_type
The event type that triggered this action. Can be REACTION_ADD for reaction addition or REACTION_REMOVE for reaction removal.

New in version 1.3.

TYPE:
str

PARAMETERS:
data (ReactionActionEvent) –

emoji (PartialEmoji) –

event_type (str) –

class discord.RawReactionClearEvent(data)[source]
Attributes
channel_id
guild_id
message_id
Represents the payload for a on_raw_reaction_clear() event.

message_id
The message ID that got its reactions cleared.

TYPE:
int

channel_id
The channel ID where the reactions got cleared.

TYPE:
int

guild_id
The guild ID where the reactions got cleared.

TYPE:
Optional[int]

PARAMETERS:
data (ReactionClearEvent) –

class discord.RawReactionClearEmojiEvent(data, emoji)[source]
Attributes
channel_id
emoji
guild_id
message_id
Represents the payload for a on_raw_reaction_clear_emoji() event.

New in version 1.3.

message_id
The message ID that got its reactions cleared.

TYPE:
int

channel_id
The channel ID where the reactions got cleared.

TYPE:
int

guild_id
The guild ID where the reactions got cleared.

TYPE:
Optional[int]

emoji
The custom or unicode emoji being removed.

TYPE:
PartialEmoji

PARAMETERS:
data (ReactionClearEmojiEvent) –

emoji (PartialEmoji) –

class discord.RawIntegrationDeleteEvent(data)[source]
Attributes
application_id
guild_id
integration_id
Represents the payload for a on_raw_integration_delete() event.

New in version 2.0.

integration_id
The ID of the integration that got deleted.

TYPE:
int

application_id
The ID of the bot/OAuth2 application for this deleted integration.

TYPE:
Optional[int]

guild_id
The guild ID where the integration got deleted.

TYPE:
int

PARAMETERS:
data (IntegrationDeleteEvent) –

class discord.RawThreadDeleteEvent(data)[source]
Attributes
guild_id
parent_id
thread
thread_id
thread_type
Represents the payload for on_raw_thread_delete() event.

New in version 2.0.

thread_id
The ID of the thread that was deleted.

TYPE:
int

thread_type
The channel type of the deleted thread.

TYPE:
discord.ChannelType

guild_id
The ID of the guild the deleted thread belonged to.

TYPE:
int

parent_id
The ID of the channel the thread belonged to.

TYPE:
int

thread
The thread that was deleted. This may be None if deleted thread is not found in internal cache.

TYPE:
Optional[discord.Thread]

PARAMETERS:
data (ThreadDeleteEvent) –

class discord.RawScheduledEventSubscription(data, event_type)[source]
Attributes
event_id
event_type
guild
user_id
Represents the payload for a raw_scheduled_event_user_add() or raw_scheduled_event_user_remove() event.

New in version 2.0.

event_id
The event ID where the typing originated from.

TYPE:
int

user_id
The ID of the user that subscribed/unsubscribed.

TYPE:
int

guild
The guild where the subscription/unsubscription happened.

TYPE:
Optional[Guild]

event_type
Can be either USER_ADD or USER_REMOVE depending on the event called.

TYPE:
str

PARAMETERS:
data (ScheduledEventSubscription) –

event_type (str) –

Webhooks
class discord.PartialWebhookGuild[source]
Attributes
icon
id
name
Represents a partial guild for webhooks.

These are typically given for channel follower webhooks.

New in version 2.0.

id
The partial guild’s ID.

TYPE:
int

name
The partial guild’s name.

TYPE:
str

property icon
Returns the guild’s icon asset, if available.

RETURN TYPE:
Asset | None

class discord.PartialWebhookChannel[source]
Attributes
id
name
Represents a partial channel for webhooks.

These are typically given for channel follower webhooks.

New in version 2.0.

id
The partial channel’s ID.

TYPE:
int

name
The partial channel’s name.

TYPE:
str




Data Classes
Some classes are just there to be data containers, this lists them.

Unlike models you are allowed to create most of these yourself, even if they can also be used to hold attributes.

Nearly all classes here have __slots__ defined which means that it is impossible to have dynamic attributes to the data classes.

The only exception to this rule is Object, which is made with dynamic attributes in mind.

class discord.Object(id)[source]
Attributes
created_at
id
increment_id
process_id
worker_id
Represents a generic Discord object.

The purpose of this class is to allow you to create ‘miniature’ versions of data classes if you want to pass in just an ID. Most functions that take in a specific data class with an ID can also take in this class as a substitute instead. Note that even though this is the case, not all objects (if any) actually inherit from this class.

There are also some cases where some WebSocket events are received in strange order and when such events happened you would receive this class rather than the actual data class. These cases are extremely rare.

x == y
Checks if two objects are equal.

x != y
Checks if two objects are not equal.

hash(x)
Returns the object’s hash.

id
The ID of the object.

TYPE:
int

PARAMETERS:
id (Union[SupportsInt, str, bytes, bytearray]) –

property created_at
Returns the snowflake’s creation time in UTC.

RETURN TYPE:
datetime

property worker_id
Returns the worker id that made the snowflake.

RETURN TYPE:
int

property process_id
Returns the process id that made the snowflake.

RETURN TYPE:
int

property increment_id
Returns the increment id that made the snowflake.

RETURN TYPE:
int

class discord.SelectOption(*, label, value=..., description=None, emoji=None, default=False)[source]
Attributes
default
description
emoji
label
value
Represents a discord.SelectMenu’s option.

These can be created by users.

New in version 2.0.

label
The label of the option. This is displayed to users. Can only be up to 100 characters.

TYPE:
str

value
The value of the option. This is not displayed to users. If not provided when constructed then it defaults to the label. Can only be up to 100 characters.

TYPE:
str

description
An additional description of the option, if any. Can only be up to 100 characters.

TYPE:
Optional[str]

default
Whether this option is selected by default.

TYPE:
bool

PARAMETERS:
label (str) –

value (str) –

description (str | None) –

emoji (str | Emoji | PartialEmoji | None) –

default (bool) –

property emoji
The emoji of the option, if available.

RETURN TYPE:
str | Emoji | PartialEmoji | None

class discord.Intents(**kwargs)[source]
Attributes
auto_moderation_configuration
auto_moderation_execution
bans
dm_messages
dm_reactions
dm_typing
emojis
emojis_and_stickers
guild_messages
guild_reactions
guild_typing
guilds
integrations
invites
members
message_content
messages
presences
reactions
scheduled_events
typing
value
voice_states
webhooks
Methods
Intents.all
Intents.default
Intents.none
Wraps up a Discord gateway intent flag.

Similar to Permissions, the properties provided are two way. You can set and retrieve individual bits using the properties as if they were regular bools.

To construct an object you can pass keyword arguments denoting the flags to enable or disable.

This is used to disable certain gateway features that are unnecessary to run your bot. To make use of this, it is passed to the intents keyword argument of Client.

New in version 1.5.

x == y
Checks if two flags are equal.

x != y
Checks if two flags are not equal.

x + y
Adds two flags together. Equivalent to x | y.

x - y
Subtracts two flags from each other.

x | y
Returns the union of two flags. Equivalent to x + y.

x & y
Returns the intersection of two flags.

~x
Returns the inverse of a flag.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs.

value
The raw value. You should query flags via the properties rather than using this raw value.

TYPE:
int

PARAMETERS:
kwargs (bool) –

classmethod all()[source]
A factory method that creates a Intents with everything enabled.

classmethod none()[source]
A factory method that creates a Intents with everything disabled.

classmethod default()[source]
A factory method that creates a Intents with everything enabled except presences, members, and message_content.

guilds[source]
Whether guild related events are enabled.

This corresponds to the following events:

on_guild_join()

on_guild_remove()

on_guild_available()

on_guild_unavailable()

on_guild_channel_update()

on_guild_channel_create()

on_guild_channel_delete()

on_guild_channel_pins_update()

This also corresponds to the following attributes and classes in terms of cache:

Client.guilds

Guild and all its attributes.

Client.get_channel()

Client.get_all_channels()

It is highly advisable to leave this intent enabled for your bot to function.

TYPE:
bool

members[source]
Whether guild member related events are enabled.

This corresponds to the following events:

on_member_join()

on_member_remove()

on_member_update()

on_user_update()

This also corresponds to the following attributes and classes in terms of cache:

Client.get_all_members()

Client.get_user()

Guild.chunk()

Guild.fetch_members()

Guild.get_member()

Guild.members

Member.roles

Member.nick

Member.premium_since

User.name

User.avatar

User.discriminator

For more information go to the member intent documentation.

Note

This intent is privileged, meaning that bots in over 100 guilds that require this intent would need to request this intent on the Developer Portal.

TYPE:
bool

bans[source]
Whether guild ban related events are enabled.

This corresponds to the following events:

on_member_ban()

on_member_unban()

This does not correspond to any attributes or classes in the library in terms of cache.

TYPE:
bool

emojis[source]
Alias of emojis_and_stickers.

Changed in version 2.0: Changed to an alias.

TYPE:
bool

emojis_and_stickers[source]
Whether guild emoji and sticker related events are enabled.

New in version 2.0.

This corresponds to the following events:

on_guild_emojis_update()

on_guild_stickers_update()

This also corresponds to the following attributes and classes in terms of cache:

Emoji

GuildSticker

Client.get_emoji()

Client.get_sticker()

Client.emojis()

Client.stickers()

Guild.emojis

Guild.stickers

TYPE:
bool

integrations[source]
Whether guild integration related events are enabled.

This corresponds to the following events:

on_guild_integrations_update()

on_integration_create()

on_integration_update()

on_raw_integration_delete()

This does not correspond to any attributes or classes in the library in terms of cache.

TYPE:
bool

webhooks[source]
Whether guild webhook related events are enabled.

This corresponds to the following events:

on_webhooks_update()

This does not correspond to any attributes or classes in the library in terms of cache.

TYPE:
bool

invites[source]
Whether guild invite related events are enabled.

This corresponds to the following events:

on_invite_create()

on_invite_delete()

This does not correspond to any attributes or classes in the library in terms of cache.

TYPE:
bool

voice_states[source]
Whether guild voice state related events are enabled.

This corresponds to the following events:

on_voice_state_update()

This also corresponds to the following attributes and classes in terms of cache:

VoiceChannel.members

VoiceChannel.voice_states

Member.voice

Note

This intent is required to connect to voice.

TYPE:
bool

presences[source]
Whether guild presence related events are enabled.

This corresponds to the following events:

on_presence_update()

This also corresponds to the following attributes and classes in terms of cache:

Member.activities

Member.status

Member.raw_status

For more information go to the presence intent documentation.

Note

This intent is privileged, meaning that bots in over 100 guilds that require this intent would need to request this intent on the Developer Portal.

TYPE:
bool

messages[source]
Whether guild and direct message related events are enabled.

This is a shortcut to set or get both guild_messages and dm_messages.

This corresponds to the following events:

on_message() (both guilds and DMs)

on_message_edit() (both guilds and DMs)

on_message_delete() (both guilds and DMs)

on_raw_message_delete() (both guilds and DMs)

on_raw_message_edit() (both guilds and DMs)

This also corresponds to the following attributes and classes in terms of cache:

Message

Client.cached_messages

Client.get_message()

Note that due to an implicit relationship this also corresponds to the following events:

on_reaction_add() (both guilds and DMs)

on_reaction_remove() (both guilds and DMs)

on_reaction_clear() (both guilds and DMs)

Note

message_content is required to receive the actual content of guild messages.

TYPE:
bool

guild_messages[source]
Whether guild message related events are enabled.

See also dm_messages for DMs or messages for both.

This corresponds to the following events:

on_message() (only for guilds)

on_message_edit() (only for guilds)

on_message_delete() (only for guilds)

on_raw_message_delete() (only for guilds)

on_raw_message_edit() (only for guilds)

This also corresponds to the following attributes and classes in terms of cache:

Message

Client.cached_messages (only for guilds)

Client.get_message() (only for guilds)

Note that due to an implicit relationship this also corresponds to the following events:

on_reaction_add() (only for guilds)

on_reaction_remove() (only for guilds)

on_reaction_clear() (only for guilds)

Without the message_content intent enabled, the following fields are either an empty string or empty array:

Message.content

Message.embeds

Message.attachments

Message.components

For more information go to the message content intent documentation.

TYPE:
bool

dm_messages[source]
Whether direct message related events are enabled.

See also guild_messages for guilds or messages for both.

This corresponds to the following events:

on_message() (only for DMs)

on_message_edit() (only for DMs)

on_message_delete() (only for DMs)

on_raw_message_delete() (only for DMs)

on_raw_message_edit() (only for DMs)

This also corresponds to the following attributes and classes in terms of cache:

Message

Client.cached_messages (only for DMs)

Client.get_message() (only for DMs)

Note that due to an implicit relationship this also corresponds to the following events:

on_reaction_add() (only for DMs)

on_reaction_remove() (only for DMs)

on_reaction_clear() (only for DMs)

TYPE:
bool

reactions[source]
Whether guild and direct message reaction related events are enabled.

This is a shortcut to set or get both guild_reactions and dm_reactions.

This corresponds to the following events:

on_reaction_add() (both guilds and DMs)

on_reaction_remove() (both guilds and DMs)

on_reaction_clear() (both guilds and DMs)

on_raw_reaction_add() (both guilds and DMs)

on_raw_reaction_remove() (both guilds and DMs)

on_raw_reaction_clear() (both guilds and DMs)

This also corresponds to the following attributes and classes in terms of cache:

Message.reactions (both guild and DM messages)

TYPE:
bool

guild_reactions[source]
Whether guild message reaction related events are enabled.

See also dm_reactions for DMs or reactions for both.

This corresponds to the following events:

on_reaction_add() (only for guilds)

on_reaction_remove() (only for guilds)

on_reaction_clear() (only for guilds)

on_raw_reaction_add() (only for guilds)

on_raw_reaction_remove() (only for guilds)

on_raw_reaction_clear() (only for guilds)

This also corresponds to the following attributes and classes in terms of cache:

Message.reactions (only for guild messages)

TYPE:
bool

dm_reactions[source]
Whether direct message reaction related events are enabled.

See also guild_reactions for guilds or reactions for both.

This corresponds to the following events:

on_reaction_add() (only for DMs)

on_reaction_remove() (only for DMs)

on_reaction_clear() (only for DMs)

on_raw_reaction_add() (only for DMs)

on_raw_reaction_remove() (only for DMs)

on_raw_reaction_clear() (only for DMs)

This also corresponds to the following attributes and classes in terms of cache:

Message.reactions (only for DM messages)

TYPE:
bool

typing[source]
Whether guild and direct message typing related events are enabled.

This is a shortcut to set or get both guild_typing and dm_typing.

This corresponds to the following events:

on_typing() (both guilds and DMs)

This does not correspond to any attributes or classes in the library in terms of cache.

TYPE:
bool

guild_typing[source]
Whether guild and direct message typing related events are enabled.

See also dm_typing for DMs or typing for both.

This corresponds to the following events:

on_typing() (only for guilds)

This does not correspond to any attributes or classes in the library in terms of cache.

TYPE:
bool

dm_typing[source]
Whether guild and direct message typing related events are enabled.

See also guild_typing for guilds or typing for both.

This corresponds to the following events:

on_typing() (only for DMs)

This does not correspond to any attributes or classes in the library in terms of cache.

TYPE:
bool

message_content[source]
Whether the bot will receive message content in guild messages.

This corresponds to the following attributes:

Message.content

Message.embeds

Message.attachments

Message.components

These attributes will still be available for messages received from interactions, the bot’s own messages, messages the bot was mentioned in, and DMs.

New in version 2.0.

Note

As of September 2022 requires opting in explicitly via the Developer Portal to receive the actual content of the guild messages. This intent is privileged, meaning that bots in over 100 guilds that require this intent would need to request this intent on the Developer Portal. See https://support-dev.discord.com/hc/en-us/articles/4404772028055 for more information.

TYPE:
bool

scheduled_events[source]
Whether “scheduled event” related events are enabled.

This corresponds to the following events:

on_scheduled_event_create()

on_scheduled_event_update()

on_scheduled_event_delete()

on_scheduled_event_user_add()

on_raw_scheduled_event_user_add()

on_scheduled_event_user_remove()

on_raw_scheduled_event_user_remove()

This also corresponds to the following attributes and classes in terms of cache:

ScheduledEvent

Guild.get_scheduled_event()

TYPE:
bool

auto_moderation_configuration[source]
Whether guild auto moderation configuration events are enabled.

This corresponds to the following events:

on_auto_moderation_rule_create()

on_auto_moderation_rule_update()

on_auto_moderation_rule_delete()

TYPE:
bool

auto_moderation_execution[source]
Whether guild auto moderation execution events are enabled.

This corresponds to the following events:

on_auto_moderation_action_execution()

TYPE:
bool

class discord.ShardInfo(parent, shard_count)[source]
Attributes
id
latency
shard_count
Methods
connect
disconnect
is_closed
is_ws_ratelimited
reconnect
A class that gives information and control over a specific shard.

You can retrieve this object via AutoShardedClient.get_shard() or AutoShardedClient.shards.

New in version 1.4.

id
The shard ID for this shard.

TYPE:
int

shard_count
The shard count for this cluster. If this is None then the bot has not started yet.

TYPE:
Optional[int]

PARAMETERS:
parent (Shard) –

shard_count (int | None) –

is_closed()[source]
Whether the shard connection is currently closed.

RETURN TYPE:
bool

await disconnect()[source]
This function is a coroutine.

Disconnects a shard. When this is called, the shard connection will no longer be open.

If the shard is already disconnected this does nothing.

RETURN TYPE:
None

await reconnect()[source]
This function is a coroutine.

Disconnects and then connects the shard again.

RETURN TYPE:
None

await connect()[source]
This function is a coroutine.

Connects a shard. If the shard is already connected this does nothing.

RETURN TYPE:
None

property latency
Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds for this shard.

RETURN TYPE:
float

is_ws_ratelimited()[source]
Whether the websocket is currently rate limited.

This can be useful to know when deciding whether you should query members using HTTP or via the gateway.

New in version 1.6.

RETURN TYPE:
bool

Message
class discord.AllowedMentions(*, everyone=True, users=True, roles=True, replied_user=True)[source]
Attributes
everyone
replied_user
roles
users
Methods
AllowedMentions.all
AllowedMentions.none
A class that represents what mentions are allowed in a message.

This class can be set during Client initialisation to apply to every message sent. It can also be applied on a per-message basis via abc.Messageable.send() for more fine-grained control.

everyone
Whether to allow everyone and here mentions. Defaults to True.

TYPE:
bool

users
Controls the users being mentioned. If True (the default) then users are mentioned based on the message content. If False then users are not mentioned at all. If a list of abc.Snowflake is given then only the users provided will be mentioned, provided those users are in the message content.

TYPE:
Union[bool, List[abc.Snowflake]]

roles
Controls the roles being mentioned. If True (the default) then roles are mentioned based on the message content. If False then roles are not mentioned at all. If a list of abc.Snowflake is given then only the roles provided will be mentioned, provided those roles are in the message content.

TYPE:
Union[bool, List[abc.Snowflake]]

replied_user
Whether to mention the author of the message being replied to. Defaults to True.

New in version 1.6.

TYPE:
bool

classmethod all()[source]
A factory method that returns a AllowedMentions with all fields explicitly set to True

New in version 1.5.

classmethod none()[source]
A factory method that returns a AllowedMentions with all fields set to False

New in version 1.5.

class discord.MessageReference(*, message_id, channel_id, guild_id=None, fail_if_not_exists=True)[source]
Attributes
cached_message
channel_id
fail_if_not_exists
guild_id
jump_url
message_id
resolved
Methods
MessageReference.from_message
Represents a reference to a Message.

New in version 1.5.

Changed in version 1.6: This class can now be constructed by users.

message_id
The id of the message referenced.

TYPE:
Optional[int]

channel_id
The channel id of the message referenced.

TYPE:
int

guild_id
The guild id of the message referenced.

TYPE:
Optional[int]

fail_if_not_exists
Whether replying to the referenced message should raise HTTPException if the message no longer exists or Discord could not fetch the message.

New in version 1.7.

TYPE:
bool

resolved
The message that this reference resolved to. If this is None then the original message was not fetched either due to the Discord API not attempting to resolve it or it not being available at the time of creation. If the message was resolved at a prior point but has since been deleted then this will be of type DeletedReferencedMessage.

Currently, this is mainly the replied to message when a user replies to a message.

New in version 1.6.

TYPE:
Optional[Union[Message, DeletedReferencedMessage]]

PARAMETERS:
message_id (int) –

channel_id (int) –

guild_id (int | None) –

fail_if_not_exists (bool) –

classmethod from_message(message, *, fail_if_not_exists=True)[source]
Creates a MessageReference from an existing Message.

New in version 1.6.

PARAMETERS:
message (Message) – The message to be converted into a reference.

fail_if_not_exists (bool) –

Whether replying to the referenced message should raise HTTPException if the message no longer exists or Discord could not fetch the message.

New in version 1.7.

RETURNS:
A reference to the message.

RETURN TYPE:
MessageReference

property cached_message
The cached message, if found in the internal message cache.

RETURN TYPE:
Message | None

property jump_url
Returns a URL that allows the client to jump to the referenced message.

New in version 1.7.

RETURN TYPE:
str

class discord.PartialMessage(*, channel, id)[source]
Attributes
channel
created_at
guild
id
jump_url
Methods
add_reaction
clear_reaction
clear_reactions
delete
edit
fetch
pin
publish
remove_reaction
reply
to_reference
unpin
Represents a partial message to aid with working messages when only a message and channel ID are present.

There are two ways to construct this class. The first one is through the constructor itself, and the second is via the following:

TextChannel.get_partial_message()

Thread.get_partial_message()

DMChannel.get_partial_message()

Note that this class is trimmed down and has no rich attributes.

New in version 1.6.

x == y
Checks if two partial messages are equal.

x != y
Checks if two partial messages are not equal.

hash(x)
Returns the partial message’s hash.

channel
The channel associated with this partial message.

TYPE:
Union[TextChannel, Thread, DMChannel]

id
The message ID.

TYPE:
int

PARAMETERS:
channel (Union[TextChannel, VoiceChannel, Thread, DMChannel, PartialMessageable]) –

id (int) –

property jump_url
Returns a URL that allows the client to jump to this message.

RETURN TYPE:
str

await delete(*, delay=None, reason=None)
This function is a coroutine.

Deletes the message.

Your own messages could be deleted without any proper permissions. However, to delete other people’s messages, you need the manage_messages permission.

Changed in version 1.1: Added the new delay keyword-only parameter.

PARAMETERS:
delay (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message. If the deletion fails then it is silently ignored.

reason (Optional[str]) – The reason for deleting the message. Shows up on the audit log.

RAISES:
Forbidden – You do not have proper permissions to delete the message.

NotFound – The message was deleted already

HTTPException – Deleting the message failed.

RETURN TYPE:
None

await publish()
This function is a coroutine.

Publishes this message to your announcement channel.

You must have the send_messages permission to do this.

If the message is not your own then the manage_messages permission is also needed.

RAISES:
Forbidden – You do not have the proper permissions to publish this message.

HTTPException – Publishing the message failed.

RETURN TYPE:
None

await pin(*, reason=None)
This function is a coroutine.

Pins the message.

You must have the manage_messages permission to do this in a non-private channel context.

PARAMETERS:
reason (Optional[str]) –

The reason for pinning the message. Shows up on the audit log.

New in version 1.4.

RAISES:
Forbidden – You do not have permissions to pin the message.

NotFound – The message or channel was not found or deleted.

HTTPException – Pinning the message failed, probably due to the channel having more than 50 pinned messages.

RETURN TYPE:
None

await unpin(*, reason=None)
This function is a coroutine.

Unpins the message.

You must have the manage_messages permission to do this in a non-private channel context.

PARAMETERS:
reason (Optional[str]) –

The reason for unpinning the message. Shows up on the audit log.

New in version 1.4.

RAISES:
Forbidden – You do not have permissions to unpin the message.

NotFound – The message or channel was not found or deleted.

HTTPException – Unpinning the message failed.

RETURN TYPE:
None

await add_reaction(emoji)
This function is a coroutine.

Add a reaction to the message.

The emoji may be a unicode emoji or a custom guild Emoji.

You must have the read_message_history permission to use this. If nobody else has reacted to the message using this emoji, the add_reactions permission is required.

PARAMETERS:
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to react with.

RAISES:
HTTPException – Adding the reaction failed.

Forbidden – You do not have the proper permissions to react to the message.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

RETURN TYPE:
None

await remove_reaction(emoji, member)
This function is a coroutine.

Remove a reaction by the member from the message.

The emoji may be a unicode emoji or a custom guild Emoji.

If the reaction is not your own (i.e. member parameter is not you) then the manage_messages permission is needed.

The member parameter must represent a member and meet the abc.Snowflake abc.

PARAMETERS:
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to remove.

member (abc.Snowflake) – The member for which to remove the reaction.

RAISES:
HTTPException – Removing the reaction failed.

Forbidden – You do not have the proper permissions to remove the reaction.

NotFound – The member or emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

RETURN TYPE:
None

await clear_reaction(emoji)
This function is a coroutine.

Clears a specific reaction from the message.

The emoji may be a unicode emoji or a custom guild Emoji.

You need the manage_messages permission to use this.

New in version 1.3.

PARAMETERS:
emoji (Union[Emoji, Reaction, PartialEmoji, str]) – The emoji to clear.

RAISES:
HTTPException – Clearing the reaction failed.

Forbidden – You do not have the proper permissions to clear the reaction.

NotFound – The emoji you specified was not found.

InvalidArgument – The emoji parameter is invalid.

RETURN TYPE:
None

await clear_reactions()
This function is a coroutine.

Removes all the reactions from the message.

You need the manage_messages permission to use this.

RAISES:
HTTPException – Removing the reactions failed.

Forbidden – You do not have the proper permissions to remove all the reactions.

RETURN TYPE:
None

await reply(content=None, **kwargs)
This function is a coroutine.

A shortcut method to abc.Messageable.send() to reply to the Message.

New in version 1.6.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, or you specified both file and files.

PARAMETERS:
content (str | None) –

to_reference(*, fail_if_not_exists=True)
Creates a MessageReference from the current message.

New in version 1.6.

PARAMETERS:
fail_if_not_exists (bool) –

Whether replying using the message reference should raise HTTPException if the message no longer exists or Discord could not fetch the message.

New in version 1.7.

RETURNS:
The reference to this message.

RETURN TYPE:
MessageReference

property created_at
The partial message’s creation time in UTC.

RETURN TYPE:
datetime

guild
The guild that the partial message belongs to, if applicable.

await fetch()[source]
This function is a coroutine.

Fetches the partial message to a full Message.

RETURNS:
The full message.

RETURN TYPE:
Message

RAISES:
NotFound – The message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

await edit(**fields)[source]
This function is a coroutine.

Edits the message.

Changed in version 1.7: discord.Message is returned instead of None if an edit took place.

PARAMETERS:
content (Optional[str]) – The new content to replace the message with. Could be None to remove the content.

embed (Optional[Embed]) – The new embed to replace the original with. Could be None to remove the embed.

embeds (Optional[List[Embed]]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message. This removes all the embeds if set to True. If set to False this brings the embeds back if they were suppressed. Using this parameter requires manage_messages.

delete_after (Optional[float]) – If provided, the number of seconds to wait in the background before deleting the message we just edited. If the deletion fails, then it is silently ignored.

allowed_mentions (Optional[AllowedMentions]) – Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

view (Optional[View]) –

The updated view to update this message with. If None is passed then the view is removed.

New in version 2.0.

fields (Any) –

RETURNS:
The message that was edited.

RETURN TYPE:
Optional[Message]

RAISES:
NotFound – The message was not found.

HTTPException – Editing the message failed.

Forbidden – Tried to suppress a message without permissions or edited a message’s content or embed that isn’t yours.

class discord.File(fp, filename=None, *, description=None, spoiler=False)[source]
Attributes
description
filename
fp
spoiler
A parameter object used for abc.Messageable.send() for sending file objects.

Note

File objects are single use and are not meant to be reused in multiple abc.Messageable.send()s.

fp
A file-like object opened in binary mode and read mode or a filename representing a file in the hard drive to open.

Note

If the file-like object passed is opened via open then the modes ‘rb’ should be used.

To pass binary data, consider usage of io.BytesIO.

TYPE:
Union[os.PathLike, io.BufferedIOBase]

filename
The filename to display when uploading to Discord. If this is not given then it defaults to fp.name or if fp is a string then the filename will default to the string given.

TYPE:
Optional[str]

description
The description of a file, used by Discord to display alternative text on images.

TYPE:
Optional[str]

spoiler
Whether the attachment is a spoiler.

TYPE:
bool

PARAMETERS:
fp (str | bytes | os.PathLike | io.BufferedIOBase) –

filename (str | None) –

description (str | None) –

spoiler (bool) –

Embed
class discord.Embed(*, colour=Embed.Empty, color=Embed.Empty, title=Embed.Empty, type='rich', url=Embed.Empty, description=Embed.Empty, timestamp=None, fields=None)[source]
Attributes
Empty
author
colour
description
fields
footer
image
provider
thumbnail
timestamp
title
type
url
video
Methods
Embed.from_dict
add_field
append_field
clear_fields
copy
insert_field_at
remove_author
remove_field
remove_footer
remove_image
remove_thumbnail
set_author
set_field_at
set_footer
set_image
set_thumbnail
to_dict
Represents a Discord embed.

len(x)
Returns the total size of the embed. Useful for checking if it’s within the 6000 character limit.

bool(b)
Returns whether the embed has any data set.

New in version 2.0.

Certain properties return an EmbedProxy, a type that acts similar to a regular dict except using dotted access, e.g. embed.author.icon_url. If the attribute is invalid or empty, then a special sentinel value is returned, Embed.Empty.

For ease of use, all parameters that expect a str are implicitly cast to str for you.

title
The title of the embed. This can be set during initialisation. Must be 256 characters or fewer.

TYPE:
str

type
The type of embed. Usually “rich”. This can be set during initialisation. Possible strings for embed types can be found on discord’s api docs

TYPE:
str

description
The description of the embed. This can be set during initialisation. Must be 4096 characters or fewer.

TYPE:
str

url
The URL of the embed. This can be set during initialisation.

TYPE:
str

timestamp
The timestamp of the embed content. This is an aware datetime. If a naive datetime is passed, it is converted to an aware datetime with the local timezone.

TYPE:
datetime.datetime

colour
The colour code of the embed. Aliased to color as well. This can be set during initialisation.

TYPE:
Union[Colour, int]

Empty
A special sentinel value used by EmbedProxy and this class to denote that the value or attribute is empty.

TYPE:
Final

PARAMETERS:
colour (int | Colour | _EmptyEmbed) –

color (int | Colour | _EmptyEmbed) –

title (MaybeEmpty[Any]) –

type (EmbedType) –

url (MaybeEmpty[Any]) –

description (MaybeEmpty[Any]) –

timestamp (datetime.datetime) –

fields (list[EmbedField] | None) –

classmethod from_dict(data)[source]
Converts a dict to a Embed provided it is in the format that Discord expects it to be in.

You can find out about this format in the official Discord documentation.

PARAMETERS:
data (dict) – The dictionary to convert into an embed.

RETURNS:
The converted embed object.

RETURN TYPE:
Embed

copy()[source]
Creates a shallow copy of the Embed object.

RETURNS:
The copied embed object.

RETURN TYPE:
Embed

PARAMETERS:
self (TypeVar(E, bound= Embed)) –

property footer
Returns an EmbedProxy denoting the footer contents.

See set_footer() for possible values you can access.

If the attribute has no value then Empty is returned.

RETURN TYPE:
_EmbedFooterProxy

set_footer(*, text=Embed.Empty, icon_url=Embed.Empty)[source]
Sets the footer for the embed content.

This function returns the class instance to allow for fluent-style chaining.

PARAMETERS:
text (str) – The footer text. Must be 2048 characters or fewer.

icon_url (str) – The URL of the footer icon. Only HTTP(S) is supported.

self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

remove_footer()[source]
Clears embed’s footer information.

This function returns the class instance to allow for fluent-style chaining.

New in version 2.0.

PARAMETERS:
self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

property image
Returns an EmbedProxy denoting the image contents.

Possible attributes you can access are:

url

proxy_url

width

height

If the attribute has no value then Empty is returned.

RETURN TYPE:
_EmbedMediaProxy

set_image(*, url)[source]
Sets the image for the embed content.

This function returns the class instance to allow for fluent-style chaining.

Changed in version 1.4: Passing Empty removes the image.

PARAMETERS:
url (str) – The source URL for the image. Only HTTP(S) is supported.

self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

remove_image()[source]
Removes the embed’s image.

This function returns the class instance to allow for fluent-style chaining.

New in version 2.0.

PARAMETERS:
self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

property thumbnail
Returns an EmbedProxy denoting the thumbnail contents.

Possible attributes you can access are:

url

proxy_url

width

height

If the attribute has no value then Empty is returned.

RETURN TYPE:
_EmbedMediaProxy

set_thumbnail(*, url)[source]
Sets the thumbnail for the embed content.

This function returns the class instance to allow for fluent-style chaining.

Changed in version 1.4: Passing Empty removes the thumbnail.

PARAMETERS:
url (str) – The source URL for the thumbnail. Only HTTP(S) is supported.

self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

remove_thumbnail()[source]
Removes the embed’s thumbnail.

This function returns the class instance to allow for fluent-style chaining.

New in version 2.0.

PARAMETERS:
self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

property video
Returns an EmbedProxy denoting the video contents.

Possible attributes include:

url for the video URL.

height for the video height.

width for the video width.

If the attribute has no value then Empty is returned.

RETURN TYPE:
_EmbedVideoProxy

property provider
Returns an EmbedProxy denoting the provider contents.

The only attributes that might be accessed are name and url.

If the attribute has no value then Empty is returned.

RETURN TYPE:
_EmbedProviderProxy

property author
Returns an EmbedProxy denoting the author contents.

See set_author() for possible values you can access.

If the attribute has no value then Empty is returned.

RETURN TYPE:
_EmbedAuthorProxy

set_author(*, name, url=Embed.Empty, icon_url=Embed.Empty)[source]
Sets the author for the embed content.

This function returns the class instance to allow for fluent-style chaining.

PARAMETERS:
name (str) – The name of the author. Must be 256 characters or fewer.

url (str) – The URL for the author.

icon_url (str) – The URL of the author icon. Only HTTP(S) is supported.

self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

remove_author()[source]
Clears embed’s author information.

This function returns the class instance to allow for fluent-style chaining.

New in version 1.4.

PARAMETERS:
self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

property fields
Returns a list of EmbedField objects denoting the field contents.

See add_field() for possible values you can access.

If the attribute has no value then None is returned.

append_field(field)[source]
Appends an EmbedField object to the embed.

New in version 2.0.

PARAMETERS:
field (EmbedField) – The field to add.

RETURN TYPE:
None

add_field(*, name, value, inline=True)[source]
Adds a field to the embed object.

This function returns the class instance to allow for fluent-style chaining. There must be 25 fields or fewer.

PARAMETERS:
name (str) – The name of the field. Must be 256 characters or fewer.

value (str) – The value of the field. Must be 1024 characters or fewer.

inline (bool) – Whether the field should be displayed inline.

self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

insert_field_at(index, *, name, value, inline=True)[source]
Inserts a field before a specified index to the embed.

This function returns the class instance to allow for fluent-style chaining. There must be 25 fields or fewer.

New in version 1.2.

PARAMETERS:
index (int) – The index of where to insert the field.

name (str) – The name of the field. Must be 256 characters or fewer.

value (str) – The value of the field. Must be 1024 characters or fewer.

inline (bool) – Whether the field should be displayed inline.

self (TypeVar(E, bound= Embed)) –

RETURN TYPE:
TypeVar(E, bound= Embed)

clear_fields()[source]
Removes all fields from this embed.

RETURN TYPE:
None

remove_field(index)[source]
Removes a field at a specified index.

If the index is invalid or out of bounds then the error is silently swallowed.

Note

When deleting a field by index, the index of the other fields shift to fill the gap just like a regular list.

PARAMETERS:
index (int) – The index of the field to remove.

RETURN TYPE:
None

set_field_at(index, *, name, value, inline=True)[source]
Modifies a field to the embed object.

The index must point to a valid pre-existing field. There must be 25 fields or fewer.

This function returns the class instance to allow for fluent-style chaining.

PARAMETERS:
index (int) – The index of the field to modify.

name (str) – The name of the field. Must be 256 characters or fewer.

value (str) – The value of the field. Must be 1024 characters or fewer.

inline (bool) – Whether the field should be displayed inline.

self (TypeVar(E, bound= Embed)) –

RAISES:
IndexError – An invalid index was provided.

RETURN TYPE:
TypeVar(E, bound= Embed)

to_dict()[source]
Converts this embed object into a dict.

RETURNS:
A dictionary of str embed keys bound to the respective value.

RETURN TYPE:
Dict[str, Union[str, int, bool]]

class discord.EmbedField(name, value, inline=False)[source]
Attributes
inline
name
value
Methods
EmbedField.from_dict
to_dict
Represents a field on the Embed object.

New in version 2.0.

name
The name of the field.

TYPE:
str

value
The value of the field.

TYPE:
str

inline
Whether the field should be displayed inline.

TYPE:
bool

PARAMETERS:
name (str) –

value (str) –

inline (bool | None) –

classmethod from_dict(data)[source]
Converts a dict to a EmbedField provided it is in the format that Discord expects it to be in.

You can find out about this format in the official Discord documentation.

PARAMETERS:
data (dict) – The dictionary to convert into an EmbedField object.

to_dict()[source]
Converts this EmbedField object into a dict.

RETURNS:
A dictionary of str embed field keys bound to the respective value.

RETURN TYPE:
Dict[str, Union[str, bool]]

Flags
class discord.MemberCacheFlags(**kwargs)[source]
Attributes
interaction
joined
value
voice
Methods
MemberCacheFlags.all
MemberCacheFlags.from_intents
MemberCacheFlags.none
Controls the library’s cache policy when it comes to members.

This allows for finer grained control over what members are cached. Note that the bot’s own member is always cached. This class is passed to the member_cache_flags parameter in Client.

Due to a quirk in how Discord works, in order to ensure proper cleanup of cache resources it is recommended to have Intents.members enabled. Otherwise, the library cannot know when a member leaves a guild and is thus unable to clean up after itself.

To construct an object you can pass keyword arguments denoting the flags to enable or disable.

The default value is all flags enabled.

New in version 1.5.

x == y
Checks if two flags are equal.

x != y
Checks if two flags are not equal.

x + y
Adds two flags together. Equivalent to x | y.

x - y
Subtracts two flags from each other.

x | y
Returns the union of two flags. Equivalent to x + y.

x & y
Returns the intersection of two flags.

~x
Returns the inverse of a flag.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs.

value
The raw value. You should query flags via the properties rather than using this raw value.

TYPE:
int

PARAMETERS:
kwargs (bool) –

classmethod all()[source]
A factory method that creates a MemberCacheFlags with everything enabled.

classmethod none()[source]
A factory method that creates a MemberCacheFlags with everything disabled.

voice[source]
Whether to cache members that are in voice.

This requires Intents.voice_states.

Members that leave voice are no longer cached.

TYPE:
bool

joined[source]
Whether to cache members that joined the guild or are chunked as part of the initial log in flow.

This requires Intents.members.

Members that leave the guild are no longer cached.

TYPE:
bool

interaction[source]
Whether to cache members obtained through interactions.

This includes members received through discord.Interaction and discord.Option.

TYPE:
bool

classmethod from_intents(intents)[source]
A factory method that creates a MemberCacheFlags based on the currently selected Intents.

PARAMETERS:
intents (Intents) – The intents to select from.

RETURNS:
The resulting member cache flags.

RETURN TYPE:
MemberCacheFlags

class discord.ApplicationFlags(**kwargs)[source]
Attributes
active
app_commands_badge
embedded
gateway_guild_members
gateway_guild_members_limited
gateway_message_content
gateway_message_content_limited
gateway_presence
gateway_presence_limited
group_dm_create
managed_emoji
rpc_has_connected
value
verification_pending_guild_limit
Wraps up the Discord Application flags.

x == y
Checks if two ApplicationFlags are equal.

x != y
Checks if two ApplicationFlags are not equal.

x + y
Adds two flags together. Equivalent to x | y.

x - y
Subtracts two flags from each other.

x | y
Returns the union of two flags. Equivalent to x + y.

x & y
Returns the intersection of two flags.

~x
Returns the inverse of a flag.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown.

New in version 2.0.

value
The raw value. You should query flags via the properties rather than using this raw value.

TYPE:
int

PARAMETERS:
kwargs (bool) –

managed_emoji[source]
Returns True if the application is a managed emoji.

TYPE:
bool

group_dm_create[source]
Returns True if the application can create group DMs.

TYPE:
bool

rpc_has_connected[source]
Returns True if the application has connected to RPC.

TYPE:
bool

gateway_presence[source]
Returns True if the application is verified and is allowed to receive presence information over the gateway.

TYPE:
bool

gateway_presence_limited[source]
Returns True if the application is allowed to receive limited presence information over the gateway.

TYPE:
bool

gateway_guild_members[source]
Returns True if the application is verified and is allowed to receive guild members information over the gateway.

TYPE:
bool

gateway_guild_members_limited[source]
Returns True if the application is allowed to receive limited guild members information over the gateway.

TYPE:
bool

verification_pending_guild_limit[source]
Returns True if the application is currently pending verification and has hit the guild limit.

TYPE:
bool

embedded[source]
Returns True if the application is embedded within the Discord client.

TYPE:
bool

gateway_message_content[source]
Returns True if the application is allowed to read message contents in guilds.

TYPE:
bool

gateway_message_content_limited[source]
Returns True if the application is currently pending verification and has hit the guild limit.

TYPE:
bool

app_commands_badge[source]
Returns True if the application has registered at least one global application command, and by extension has the badge.

New in version 2.1.

TYPE:
bool

active[source]
Returns True if the app is considered active. Applications are considered active if they have had any command executions in the past 30 days.

New in version 2.3.

TYPE:
bool

class discord.SystemChannelFlags(**kwargs)[source]
Attributes
guild_reminder_notifications
join_notification_replies
join_notifications
premium_subscriptions
value
Wraps up a Discord system channel flag value.

Similar to Permissions, the properties provided are two way. You can set and retrieve individual bits using the properties as if they were regular bools. This allows you to edit the system flags easily.

To construct an object you can pass keyword arguments denoting the flags to enable or disable.

x == y
Checks if two flags are equal.

x != y
Checks if two flags are not equal.

x + y
Adds two flags together. Equivalent to x | y.

x - y
Subtracts two flags from each other.

x | y
Returns the union of two flags. Equivalent to x + y.

x & y
Returns the intersection of two flags.

~x
Returns the inverse of a flag.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs.

value
The raw value. This value is a bit array field of a 53-bit integer representing the currently available flags. You should query flags via the properties rather than using this raw value.

TYPE:
int

PARAMETERS:
kwargs (bool) –

join_notifications[source]
Returns True if the system channel is used for member join notifications.

TYPE:
bool

premium_subscriptions[source]
Returns True if the system channel is used for “Nitro boosting” notifications.

TYPE:
bool

guild_reminder_notifications[source]
Returns True if the system channel is used for server setup helpful tips notifications.

New in version 2.0.

TYPE:
bool

join_notification_replies[source]
Returns True if the system channel is allowing member join sticker replies.

New in version 2.0.

TYPE:
bool

class discord.MessageFlags(**kwargs)[source]
Attributes
crossposted
ephemeral
failed_to_mention_some_roles_in_thread
has_thread
is_crossposted
loading
source_message_deleted
suppress_embeds
urgent
value
Wraps up a Discord Message flag value.

See SystemChannelFlags.

x == y
Checks if two flags are equal.

x != y
Checks if two flags are not equal.

x + y
Adds two flags together. Equivalent to x | y.

x - y
Subtracts two flags from each other.

x | y
Returns the union of two flags. Equivalent to x + y.

x & y
Returns the intersection of two flags.

~x
Returns the inverse of a flag.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs.

New in version 1.3.

value
The raw value. This value is a bit array field of a 53-bit integer representing the currently available flags. You should query flags via the properties rather than using this raw value.

TYPE:
int

PARAMETERS:
kwargs (bool) –

crossposted[source]
Returns True if the message is the original crossposted message.

TYPE:
bool

is_crossposted[source]
Returns True if the message was crossposted from another channel.

TYPE:
bool

suppress_embeds[source]
Returns True if the message’s embeds have been suppressed.

TYPE:
bool

source_message_deleted[source]
Returns True if the source message for this crosspost has been deleted.

TYPE:
bool

urgent[source]
Returns True if the source message is an urgent message.

An urgent message is one sent by Discord Trust and Safety.

TYPE:
bool

has_thread[source]
Returns True if the source message is associated with a thread.

New in version 2.0.

TYPE:
bool

ephemeral[source]
Returns True if the source message is ephemeral.

New in version 2.0.

TYPE:
bool

loading[source]
Returns True if the source message is deferred.

The user sees a ‘thinking’ state

New in version 2.0.

TYPE:
bool

failed_to_mention_some_roles_in_thread[source]
Returns True if some roles are failed to mention in a thread.

New in version 2.0.

TYPE:
bool

class discord.PublicUserFlags(**kwargs)[source]
Attributes
active_developer
bot_http_interactions
bug_hunter
bug_hunter_level_2
discord_certified_moderator
early_supporter
early_verified_bot_developer
hypesquad
hypesquad_balance
hypesquad_bravery
hypesquad_brilliance
partner
premium_promo_dismissed
staff
system
team_user
value
verified_bot
verified_bot_developer
Methods
all
Wraps up the Discord User Public flags.

x == y
Checks if two PublicUserFlags are equal.

x != y
Checks if two PublicUserFlags are not equal.

x + y
Adds two flags together. Equivalent to x | y.

x - y
Subtracts two flags from each other.

x | y
Returns the union of two flags. Equivalent to x + y.

x & y
Returns the intersection of two flags.

~x
Returns the inverse of a flag.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown.

New in version 1.4.

value
The raw value. This value is a bit array field of a 53-bit integer representing the currently available flags. You should query flags via the properties rather than using this raw value.

TYPE:
int

PARAMETERS:
kwargs (bool) –

staff[source]
Returns True if the user is a Discord Employee.

TYPE:
bool

partner[source]
Returns True if the user is a Discord Partner.

TYPE:
bool

hypesquad[source]
Returns True if the user is a HypeSquad Events member.

TYPE:
bool

bug_hunter[source]
Returns True if the user is a Bug Hunter

TYPE:
bool

premium_promo_dismissed[source]
Returns True if the user is marked as dismissed Nitro promotion

TYPE:
bool

hypesquad_bravery[source]
Returns True if the user is a HypeSquad Bravery member.

TYPE:
bool

hypesquad_brilliance[source]
Returns True if the user is a HypeSquad Brilliance member.

TYPE:
bool

hypesquad_balance[source]
Returns True if the user is a HypeSquad Balance member.

TYPE:
bool

early_supporter[source]
Returns True if the user is an Early Supporter.

TYPE:
bool

team_user[source]
Returns True if the user is a Team User.

TYPE:
bool

system[source]
Returns True if the user is a system user (i.e. represents Discord officially).

TYPE:
bool

bug_hunter_level_2[source]
Returns True if the user is a Bug Hunter Level 2

TYPE:
bool

verified_bot[source]
Returns True if the user is a Verified Bot.

TYPE:
bool

verified_bot_developer[source]
Returns True if the user is an Early Verified Bot Developer.

TYPE:
bool

early_verified_bot_developer[source]
An alias for verified_bot_developer.

New in version 1.5.

TYPE:
bool

discord_certified_moderator[source]
Returns True if the user is a Discord Certified Moderator.

New in version 2.0.

TYPE:
bool

bot_http_interactions[source]
Returns True if the bot has set an interactions endpoint url.

New in version 2.0.

TYPE:
bool

active_developer[source]
Returns True if the user is an Active Developer.

New in version 2.3.

TYPE:
bool

all()[source]
List[UserFlags]: Returns all public flags the user has.

class discord.ChannelFlags(**kwargs)[source]
Attributes
pinned
require_tag
value
Wraps up the Discord Channel flags.

x == y
Checks if two ChannelFlags are equal.

x != y
Checks if two ChannelFlags are not equal.

x + y
Adds two flags together. Equivalent to x | y.

x - y
Subtracts two flags from each other.

x | y
Returns the union of two flags. Equivalent to x + y.

x & y
Returns the intersection of two flags.

~x
Returns the inverse of a flag.

hash(x)
Return the flag’s hash.

iter(x)
Returns an iterator of (name, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown.

New in version 2.0.

value
The raw value. You should query flags via the properties rather than using this raw value.

TYPE:
int

PARAMETERS:
kwargs (bool) –

pinned[source]
Returns True if the thread is pinned to the top of its parent forum channel.

TYPE:
bool

require_tag[source]
Returns True if a tag is required to be specified when creating a thread in a ForumChannel.

New in version 2.2.

TYPE:
bool

Colour
class discord.Colour(value)[source]
Attributes
b
g
r
value
Methods
Colour.blue
Colour.blurple
Colour.brand_green
Colour.brand_red
Colour.dark_blue
Colour.dark_gold
Colour.dark_gray
Colour.dark_green
Colour.dark_grey
Colour.dark_magenta
Colour.dark_orange
Colour.dark_purple
Colour.dark_red
Colour.dark_teal
Colour.dark_theme
Colour.darker_gray
Colour.darker_grey
Colour.default
Colour.embed_background
Colour.from_hsv
Colour.from_rgb
Colour.fuchsia
Colour.gold
Colour.green
Colour.greyple
Colour.light_gray
Colour.light_grey
Colour.lighter_gray
Colour.lighter_grey
Colour.magenta
Colour.nitro_pink
Colour.og_blurple
Colour.orange
Colour.purple
Colour.random
Colour.red
Colour.teal
Colour.yellow
to_rgb
Represents a Discord role colour. This class is similar to a (red, green, blue) tuple.

There is an alias for this called Color.

x == y
Checks if two colours are equal.

x != y
Checks if two colours are not equal.

hash(x)
Return the colour’s hash.

str(x)
Returns the hex format for the colour.

int(x)
Returns the raw colour value.

value
The raw integer colour value.

TYPE:
int

PARAMETERS:
value (int) –

property r
Returns the red component of the colour.

RETURN TYPE:
int

property g
Returns the green component of the colour.

RETURN TYPE:
int

property b
Returns the blue component of the colour.

RETURN TYPE:
int

to_rgb()[source]
Returns an (r, g, b) tuple representing the colour.

classmethod from_rgb(r, g, b)[source]
Constructs a Colour from an RGB tuple.

classmethod from_hsv(h, s, v)[source]
Constructs a Colour from an HSV tuple.

classmethod default()[source]
A factory method that returns a Colour with a value of 0.

classmethod random(*, seed=None)[source]
A factory method that returns a Colour with a random hue.

Note

The random algorithm works by choosing a colour with a random hue but with maxed out saturation and value.

New in version 1.6.

PARAMETERS:
seed (Optional[Union[int, str, float, bytes, bytearray]]) –

The seed to initialize the RNG with. If None is passed the default RNG is used.

New in version 1.7.

classmethod teal()[source]
A factory method that returns a Colour with a value of 0x1abc9c.

classmethod dark_teal()[source]
A factory method that returns a Colour with a value of 0x11806a.

classmethod brand_green()[source]
A factory method that returns a Colour with a value of 0x57F287.

New in version 2.0.

classmethod green()[source]
A factory method that returns a Colour with a value of 0x2ecc71.

classmethod dark_green()[source]
A factory method that returns a Colour with a value of 0x1f8b4c.

classmethod blue()[source]
A factory method that returns a Colour with a value of 0x3498db.

classmethod dark_blue()[source]
A factory method that returns a Colour with a value of 0x206694.

classmethod purple()[source]
A factory method that returns a Colour with a value of 0x9b59b6.

classmethod dark_purple()[source]
A factory method that returns a Colour with a value of 0x71368a.

classmethod magenta()[source]
A factory method that returns a Colour with a value of 0xe91e63.

classmethod dark_magenta()[source]
A factory method that returns a Colour with a value of 0xad1457.

classmethod gold()[source]
A factory method that returns a Colour with a value of 0xf1c40f.

classmethod dark_gold()[source]
A factory method that returns a Colour with a value of 0xc27c0e.

classmethod orange()[source]
A factory method that returns a Colour with a value of 0xe67e22.

classmethod dark_orange()[source]
A factory method that returns a Colour with a value of 0xa84300.

classmethod brand_red()[source]
A factory method that returns a Colour with a value of 0xED4245.

New in version 2.0.

classmethod red()[source]
A factory method that returns a Colour with a value of 0xe74c3c.

classmethod dark_red()[source]
A factory method that returns a Colour with a value of 0x992d22.

classmethod lighter_grey()[source]
A factory method that returns a Colour with a value of 0x95a5a6.

classmethod lighter_gray()
A factory method that returns a Colour with a value of 0x95a5a6.

classmethod dark_grey()[source]
A factory method that returns a Colour with a value of 0x607d8b.

classmethod dark_gray()
A factory method that returns a Colour with a value of 0x607d8b.

classmethod light_grey()[source]
A factory method that returns a Colour with a value of 0x979c9f.

classmethod light_gray()
A factory method that returns a Colour with a value of 0x979c9f.

classmethod darker_grey()[source]
A factory method that returns a Colour with a value of 0x546e7a.

classmethod darker_gray()
A factory method that returns a Colour with a value of 0x546e7a.

classmethod og_blurple()[source]
A factory method that returns a Colour with a value of 0x7289da.

classmethod blurple()[source]
A factory method that returns a Colour with a value of 0x5865F2.

classmethod greyple()[source]
A factory method that returns a Colour with a value of 0x99aab5.

classmethod dark_theme()[source]
A factory method that returns a Colour with a value of 0x36393F. This will appear transparent on Discord’s dark theme.

New in version 1.5.

classmethod fuchsia()[source]
A factory method that returns a Colour with a value of 0xEB459E.

New in version 2.0.

classmethod yellow()[source]
A factory method that returns a Colour with a value of 0xFEE75C.

New in version 2.0.

classmethod nitro_pink()[source]
A factory method that returns a Colour with a value of 0xf47fff.

New in version 2.0.

classmethod embed_background(theme='dark')[source]
A factory method that returns a Color corresponding to the embed colors on discord clients, with a value of:

0x2F3136 (dark)

0xf2f3f5 (light)

0x000000 (amoled).

New in version 2.0.

PARAMETERS:
theme (str) – The theme color to apply, must be one of “dark”, “light”, or “amoled”.

Activity
class discord.Activity(**kwargs)[source]
Attributes
application_id
assets
buttons
details
emoji
end
large_image_text
large_image_url
name
party
small_image_text
small_image_url
start
state
timestamps
type
url
Represents an activity in Discord.

This could be an activity such as streaming, playing, listening or watching.

For memory optimisation purposes, some activities are offered in slimmed down versions:

Game

Streaming

application_id
The application ID of the game.

TYPE:
Optional[int]

name
The name of the activity.

TYPE:
Optional[str]

url
A stream URL that the activity could be doing.

TYPE:
Optional[str]

type
The type of activity currently being done.

TYPE:
ActivityType

state
The user’s current state. For example, “In Game”.

TYPE:
Optional[str]

details
The detail of the user’s current activity.

TYPE:
Optional[str]

timestamps
A dictionary of timestamps. It contains the following optional keys:

start: Corresponds to when the user started doing the activity in milliseconds since Unix epoch.

end: Corresponds to when the user will finish doing the activity in milliseconds since Unix epoch.

TYPE:
Dict[str, int]

assets
A dictionary representing the images and their hover text of an activity. It contains the following optional keys:

large_image: A string representing the ID for the large image asset.

large_text: A string representing the text when hovering over the large image asset.

small_image: A string representing the ID for the small image asset.

small_text: A string representing the text when hovering over the small image asset.

TYPE:
Dict[str, str]

party
A dictionary representing the activity party. It contains the following optional keys:

id: A string representing the party ID.

size: A list of up to two integer elements denoting (current_size, maximum_size).

TYPE:
Dict[str, Union[str, List[int]]]

buttons
A list of dictionaries representing custom buttons shown in a rich presence. Each dictionary contains the following keys:

label: A string representing the text shown on the button.

url: A string representing the URL opened upon clicking the button.

Note

Bots cannot access a user’s activity button URLs. Therefore, the type of this attribute will be List[str] when received through the gateway.

New in version 2.0.

TYPE:
Union[List[Dict[str, str]], List[str]]

emoji
The emoji that belongs to this activity.

TYPE:
Optional[PartialEmoji]

property start
When the user started doing this activity in UTC, if applicable.

RETURN TYPE:
datetime.datetime | None

property end
When the user will stop doing this activity in UTC, if applicable.

RETURN TYPE:
datetime.datetime | None

property large_image_url
Returns a URL pointing to the large image asset of this activity if applicable.

RETURN TYPE:
str | None

property small_image_url
Returns a URL pointing to the small image asset of this activity if applicable.

RETURN TYPE:
str | None

property large_image_text
Returns the large image asset hover text of this activity if applicable.

RETURN TYPE:
str | None

property small_image_text
Returns the small image asset hover text of this activity if applicable.

RETURN TYPE:
str | None

class discord.BaseActivity(**kwargs)[source]
Attributes
created_at
The base activity that all user-settable activities inherit from. A user-settable activity is one that can be used in Client.change_presence().

The following types currently count as user-settable:

Activity

Game

Streaming

CustomActivity

Note that although these types are considered user-settable by the library, Discord typically ignores certain combinations of activity depending on what is currently set. This behaviour may change in the future so there are no guarantees on whether Discord will actually let you set these types.

New in version 1.3.

property created_at
When the user started doing this activity in UTC.

New in version 1.3.

RETURN TYPE:
datetime.datetime | None

class discord.Game(name, **extra)[source]
Attributes
end
name
start
type
A slimmed down version of Activity that represents a Discord game.

This is typically displayed via Playing on the official Discord client.

x == y
Checks if two games are equal.

x != y
Checks if two games are not equal.

hash(x)
Returns the game’s hash.

str(x)
Returns the game’s name.

PARAMETERS:
name (str) – The game’s name.

name
The game’s name.

TYPE:
str

property type
Returns the game’s type. This is for compatibility with Activity.

It always returns ActivityType.playing.

RETURN TYPE:
ActivityType

property start
When the user started playing this game in UTC, if applicable.

RETURN TYPE:
datetime.datetime | None

property end
When the user will stop playing this game in UTC, if applicable.

RETURN TYPE:
datetime.datetime | None

class discord.Streaming(*, name, url, **extra)[source]
Attributes
assets
details
game
name
platform
twitch_name
type
url
A slimmed down version of Activity that represents a Discord streaming status.

This is typically displayed via Streaming on the official Discord client.

x == y
Checks if two streams are equal.

x != y
Checks if two streams are not equal.

hash(x)
Returns the stream’s hash.

str(x)
Returns the stream’s name.

platform
Where the user is streaming from (ie. YouTube, Twitch).

New in version 1.3.

TYPE:
Optional[str]

name
The stream’s name.

TYPE:
Optional[str]

details
An alias for name

TYPE:
Optional[str]

game
The game being streamed.

New in version 1.3.

TYPE:
Optional[str]

url
The stream’s URL.

TYPE:
str

assets
A dictionary comprised of similar keys than those in Activity.assets.

TYPE:
Dict[str, str]

PARAMETERS:
name (str | None) –

url (str) –

extra (Any) –

property type
Returns the game’s type. This is for compatibility with Activity.

It always returns ActivityType.streaming.

RETURN TYPE:
ActivityType

property twitch_name
If provided, the twitch name of the user streaming.

This corresponds to the large_image key of the Streaming.assets dictionary if it starts with twitch:. Typically this is set by the Discord client.

RETURN TYPE:
str | None

class discord.CustomActivity(name, *, emoji=None, **extra)[source]
Attributes
emoji
name
type
Represents a Custom activity from Discord.

x == y
Checks if two activities are equal.

x != y
Checks if two activities are not equal.

hash(x)
Returns the activity’s hash.

str(x)
Returns the custom status text.

New in version 1.3.

name
The custom activity’s name.

TYPE:
Optional[str]

emoji
The emoji to pass to the activity, if any.

TYPE:
Optional[PartialEmoji]

PARAMETERS:
name (str | None) –

emoji (PartialEmoji | None) –

extra (Any) –

property type
Returns the activity’s type. This is for compatibility with Activity.

It always returns ActivityType.custom.

RETURN TYPE:
ActivityType

Permissions
class discord.Permissions(permissions=0, **kwargs)[source]
Attributes
add_reactions
administrator
attach_files
ban_members
change_nickname
connect
create_instant_invite
create_private_threads
create_public_threads
deafen_members
embed_links
external_emojis
external_stickers
kick_members
manage_channels
manage_emojis
manage_emojis_and_stickers
manage_events
manage_guild
manage_messages
manage_nicknames
manage_permissions
manage_roles
manage_threads
manage_webhooks
mention_everyone
moderate_members
move_members
mute_members
priority_speaker
read_message_history
read_messages
request_to_speak
send_messages
send_messages_in_threads
send_tts_messages
speak
start_embedded_activities
stream
use_application_commands
use_external_emojis
use_external_stickers
use_slash_commands
use_voice_activation
value
view_audit_log
view_channel
view_guild_insights
Methods
Permissions.advanced
Permissions.all
Permissions.all_channel
Permissions.general
Permissions.membership
Permissions.none
Permissions.stage
Permissions.stage_moderator
Permissions.text
Permissions.voice
is_strict_subset
is_strict_superset
is_subset
is_superset
update
Wraps up the Discord permission value.

The properties provided are two way. You can set and retrieve individual bits using the properties as if they were regular bools. This allows you to edit permissions.

Changed in version 1.3: You can now use keyword arguments to initialize Permissions similar to update().

x == y
Checks if two permissions are equal.

x != y
Checks if two permissions are not equal.

x <= y
Checks if a permission is a subset of another permission.

x >= y
Checks if a permission is a superset of another permission.

x < y
Checks if a permission is a strict subset of another permission.

x > y
x + y
Adds two permissions together. Equivalent to x | y.

x - y
Subtracts two permissions from each other.

x | y
Returns the union of two permissions. Equivalent to x + y.

x & y
Returns the intersection of two permissions.

~x
Returns the inverse of a permission.

Checks if a permission is a strict superset of another permission.

hash(x)
Return the permission’s hash.

iter(x)
Returns an iterator of (perm, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown.

value
The raw value. This value is a bit array field of a 53-bit integer representing the currently available permissions. You should query permissions via the properties rather than using this raw value.

TYPE:
int

PARAMETERS:
permissions (int) –

kwargs (bool) –

is_subset(other)[source]
Returns True if self has the same or fewer permissions as other.

PARAMETERS:
other (Permissions) –

RETURN TYPE:
bool

is_superset(other)[source]
Returns True if self has the same or more permissions as other.

PARAMETERS:
other (Permissions) –

RETURN TYPE:
bool

is_strict_subset(other)[source]
Returns True if the permissions on other are a strict subset of those on self.

PARAMETERS:
other (Permissions) –

RETURN TYPE:
bool

is_strict_superset(other)[source]
Returns True if the permissions on other are a strict superset of those on self.

PARAMETERS:
other (Permissions) –

RETURN TYPE:
bool

classmethod none()[source]
A factory method that creates a Permissions with all permissions set to False.

classmethod all()[source]
A factory method that creates a Permissions with all permissions set to True.

classmethod all_channel()[source]
A Permissions with all channel-specific permissions set to True and the guild-specific ones set to False. The guild-specific permissions are currently:

manage_emojis

view_audit_log

view_guild_insights

manage_guild

change_nickname

manage_nicknames

kick_members

ban_members

administrator

Changed in version 1.7: Added stream, priority_speaker and use_slash_commands permissions.

Changed in version 2.0: Added create_public_threads, create_private_threads, manage_threads, use_external_stickers, send_messages_in_threads and request_to_speak permissions.

classmethod general()[source]
A factory method that creates a Permissions with all “General” permissions from the official Discord UI set to True.

Changed in version 1.7: Permission read_messages is now included in the general permissions, but permissions administrator, create_instant_invite, kick_members, ban_members, change_nickname and manage_nicknames are no longer part of the general permissions.

classmethod membership()[source]
A factory method that creates a Permissions with all “Membership” permissions from the official Discord UI set to True.

New in version 1.7.

classmethod text()[source]
A factory method that creates a Permissions with all “Text” permissions from the official Discord UI set to True.

Changed in version 1.7: Permission read_messages is no longer part of the text permissions. Added use_slash_commands permission.

Changed in version 2.0: Added create_public_threads, create_private_threads, manage_threads, send_messages_in_threads and use_external_stickers permissions.

classmethod voice()[source]
A factory method that creates a Permissions with all “Voice” permissions from the official Discord UI set to True.

classmethod stage()[source]
A factory method that creates a Permissions with all “Stage Channel” permissions from the official Discord UI set to True.

New in version 1.7.

classmethod stage_moderator()[source]
A factory method that creates a Permissions with all “Stage Moderator” permissions from the official Discord UI set to True.

New in version 1.7.

classmethod advanced()[source]
A factory method that creates a Permissions with all “Advanced” permissions from the official Discord UI set to True.

New in version 1.7.

update(**kwargs)[source]
Bulk updates this permission object.

Allows you to set multiple attributes by using keyword arguments. The names must be equivalent to the properties listed. Extraneous key/value pairs will be silently ignored.

PARAMETERS:
**kwargs (bool) – A list of key/value pairs to bulk update permissions with.

RETURN TYPE:
None

create_instant_invite
Returns True if the user can create instant invites.

TYPE:
bool

kick_members
Returns True if the user can kick users from the guild.

TYPE:
bool

ban_members
Returns True if a user can ban users from the guild.

TYPE:
bool

administrator
Returns True if a user is an administrator. This role overrides all other permissions.

This also bypasses all channel-specific overrides.

TYPE:
bool

manage_channels
Returns True if a user can edit, delete, or create channels in the guild.

This also corresponds to the “Manage Channel” channel-specific override.

TYPE:
bool

manage_guild
Returns True if a user can edit guild properties.

TYPE:
bool

add_reactions
Returns True if a user can add reactions to messages.

TYPE:
bool

view_audit_log
Returns True if a user can view the guild’s audit log.

TYPE:
bool

priority_speaker
Returns True if a user can be more easily heard while talking.

TYPE:
bool

stream
Returns True if a user can stream in a voice channel.

TYPE:
bool

view_channel
Returns True if a user can view all or specific channels.

TYPE:
bool

read_messages[source]
An alias for view_channel.

New in version 1.3.

TYPE:
bool

send_messages
Returns True if a user can send messages from all or specific text channels.

TYPE:
bool

send_tts_messages
Returns True if a user can send TTS messages from all or specific text channels.

TYPE:
bool

manage_messages
Returns True if a user can delete or pin messages in a text channel.

Note

Note that there are currently no ways to edit other people’s messages.

TYPE:
bool

embed_links
Returns True if a user’s messages will automatically be embedded by Discord.

TYPE:
bool

attach_files
Returns True if a user can send files in their messages.

TYPE:
bool

read_message_history
Returns True if a user can read a text channel’s previous messages.

TYPE:
bool

mention_everyone
Returns True if a user’s @everyone or @here will mention everyone in the text channel.

TYPE:
bool

external_emojis
Returns True if a user can use emojis from other guilds.

TYPE:
bool

use_external_emojis[source]
An alias for external_emojis.

New in version 1.3.

TYPE:
bool

view_guild_insights
Returns True if a user can view the guild’s insights.

New in version 1.3.

TYPE:
bool

connect
Returns True if a user can connect to a voice channel.

TYPE:
bool

speak
Returns True if a user can speak in a voice channel.

TYPE:
bool

mute_members
Returns True if a user can mute other users.

TYPE:
bool

deafen_members
Returns True if a user can deafen other users.

TYPE:
bool

move_members
Returns True if a user can move users between other voice channels.

TYPE:
bool

use_voice_activation
Returns True if a user can use voice activation in voice channels.

TYPE:
bool

change_nickname
Returns True if a user can change their nickname in the guild.

TYPE:
bool

manage_nicknames
Returns True if a user can change other user’s nickname in the guild.

TYPE:
bool

manage_roles
Returns True if a user can create or edit roles less than their role’s position.

This also corresponds to the “Manage Permissions” channel-specific override.

TYPE:
bool

manage_permissions[source]
An alias for manage_roles.

New in version 1.3.

TYPE:
bool

manage_webhooks
Returns True if a user can create, edit, or delete webhooks.

TYPE:
bool

manage_emojis
Returns True if a user can create, edit, or delete emojis.

TYPE:
bool

manage_emojis_and_stickers[source]
An alias for manage_emojis.

New in version 2.0.

TYPE:
bool

use_slash_commands
Returns True if a user can use slash commands.

New in version 1.7.

TYPE:
bool

use_application_commands[source]
An alias for use_slash_commands.

New in version 2.0.

TYPE:
bool

request_to_speak
Returns True if a user can request to speak in a stage channel.

New in version 1.7.

TYPE:
bool

manage_events
Returns True if a user can manage guild events.

New in version 2.0.

TYPE:
bool

manage_threads
Returns True if a user can manage threads.

New in version 2.0.

TYPE:
bool

create_public_threads
Returns True if a user can create public threads.

New in version 2.0.

TYPE:
bool

create_private_threads
Returns True if a user can create private threads.

New in version 2.0.

TYPE:
bool

external_stickers
Returns True if a user can use stickers from other guilds.

New in version 2.0.

TYPE:
bool

use_external_stickers[source]
An alias for external_stickers.

New in version 2.0.

TYPE:
bool

send_messages_in_threads
Returns True if a user can send messages in threads.

New in version 2.0.

TYPE:
bool

start_embedded_activities
Returns True if a user can launch an activity flagged ‘EMBEDDED’ in a voice channel.

New in version 2.0.

TYPE:
bool

moderate_members
Returns True if a user can moderate members (timeout).

New in version 2.0.

TYPE:
bool

class discord.PermissionOverwrite(**kwargs)[source]
Methods
PermissionOverwrite.from_pair
is_empty
pair
update
A type that is used to represent a channel specific permission.

Unlike a regular Permissions, the default value of a permission is equivalent to None and not False. Setting a value to False is explicitly denying that permission, while setting a value to True is explicitly allowing that permission.

The values supported by this are the same as Permissions with the added possibility of it being set to None.

x == y
Checks if two overwrites are equal.

x != y
Checks if two overwrites are not equal.

iter(x)
Returns an iterator of (perm, value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown.

PARAMETERS:
**kwargs (bool | None) – Set the value of permissions by their name.

pair()[source]
Returns the (allow, deny) pair from this overwrite.

classmethod from_pair(allow, deny)[source]
Creates an overwrite from an allow/deny pair of Permissions.

is_empty()[source]
Checks if the permission overwrite is currently empty.

An empty permission overwrite is one that has no overwrites set to True or False.

RETURNS:
Indicates if the overwrite is empty.

RETURN TYPE:
bool

update(**kwargs)[source]
Bulk updates this permission overwrite object.

Allows you to set multiple attributes by using keyword arguments. The names must be equivalent to the properties listed. Extraneous key/value pairs will be silently ignored.

PARAMETERS:
**kwargs (bool) – A list of key/value pairs to bulk update with.

RETURN TYPE:
None




Bot UI Kit
The library has helpers to help create component-based UIs.

Shortcut decorators
@discord.ui.button(*, label=None, custom_id=None, disabled=False, style=<ButtonStyle.secondary: 2>, emoji=None, row=None)[source]
A decorator that attaches a button to a component.

The function being decorated should have three parameters, self representing the discord.ui.View, the discord.ui.Button being pressed and the discord.Interaction you receive.

Note

Buttons with a URL cannot be created with this function. Consider creating a Button manually instead. This is because buttons with a URL do not have a callback associated with them since Discord does not do any processing with it.

PARAMETERS:
label (Optional[str]) – The label of the button, if any.

custom_id (Optional[str]) – The ID of the button that gets received during an interaction. It is recommended not to set this parameter to prevent conflicts.

style (ButtonStyle) – The style of the button. Defaults to ButtonStyle.grey.

disabled (bool) – Whether the button is disabled or not. Defaults to False.

emoji (Optional[Union[str, Emoji, PartialEmoji]]) – The emoji of the button. This can be in string form or a PartialEmoji or a full Emoji.

row (Optional[int]) – The relative row this button belongs to. A Discord component can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you’d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to None, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero indexed).

RETURN TYPE:
Callable[[ItemCallbackType], ItemCallbackType]

@discord.ui.select(select_type=<ComponentType.string_select: 3>, *, placeholder=None, custom_id=None, min_values=1, max_values=1, options=..., channel_types=..., disabled=False, row=None)[source]
A decorator that attaches a select menu to a component.

The function being decorated should have three parameters, self representing the discord.ui.View, the discord.ui.Select being pressed and the discord.Interaction you receive.

In order to get the selected items that the user has chosen within the callback use Select.values.

Changed in version 2.3: Creating select menus of different types is now supported.

PARAMETERS:
select_type (discord.ComponentType) – The type of select to create. Must be one of discord.ComponentType.string_select, discord.ComponentType.user_select, discord.ComponentType.role_select, discord.ComponentType.mentionable_select, or discord.ComponentType.channel_select.

placeholder (Optional[str]) – The placeholder text that is shown if nothing is selected, if any.

custom_id (str) – The ID of the select menu that gets received during an interaction. It is recommended not to set this parameter to prevent conflicts.

row (Optional[int]) – The relative row this select menu belongs to. A Discord component can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you’d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to None, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero indexed).

min_values (int) – The minimum number of items that must be chosen for this select menu. Defaults to 1 and must be between 0 and 25.

max_values (int) – The maximum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25.

options (List[discord.SelectOption]) – A list of options that can be selected in this menu. Only valid for the discord.ComponentType.string_select type.

channel_types (List[discord.ChannelType]) – The channel types that should be selectable. Only valid for the discord.ComponentType.channel_select type. Defaults to all channel types.

disabled (bool) – Whether the select is disabled or not. Defaults to False.

RETURN TYPE:
Callable[[ItemCallbackType], ItemCallbackType]

@discord.ui.string_select(*, placeholder=None, custom_id=None, min_values=1, max_values=1, options=..., disabled=False, row=None)[source]
A shortcut for discord.ui.select() with select type discord.ComponentType.string_select.

New in version 2.3.

PARAMETERS:
placeholder (str | None) –

custom_id (str | None) –

min_values (int) –

max_values (int) –

options (list[SelectOption]) –

disabled (bool) –

row (int | None) –

RETURN TYPE:
Callable[[ItemCallbackType], ItemCallbackType]

@discord.ui.user_select(*, placeholder=None, custom_id=None, min_values=1, max_values=1, disabled=False, row=None)[source]
A shortcut for discord.ui.select() with select type discord.ComponentType.user_select.

New in version 2.3.

PARAMETERS:
placeholder (str | None) –

custom_id (str | None) –

min_values (int) –

max_values (int) –

disabled (bool) –

row (int | None) –

RETURN TYPE:
Callable[[ItemCallbackType], ItemCallbackType]

@discord.ui.role_select(*, placeholder=None, custom_id=None, min_values=1, max_values=1, disabled=False, row=None)[source]
A shortcut for discord.ui.select() with select type discord.ComponentType.role_select.

New in version 2.3.

PARAMETERS:
placeholder (str | None) –

custom_id (str | None) –

min_values (int) –

max_values (int) –

disabled (bool) –

row (int | None) –

RETURN TYPE:
Callable[[ItemCallbackType], ItemCallbackType]

@discord.ui.mentionable_select(*, placeholder=None, custom_id=None, min_values=1, max_values=1, disabled=False, row=None)[source]
A shortcut for discord.ui.select() with select type discord.ComponentType.mentionable_select.

New in version 2.3.

PARAMETERS:
placeholder (str | None) –

custom_id (str | None) –

min_values (int) –

max_values (int) –

disabled (bool) –

row (int | None) –

RETURN TYPE:
Callable[[ItemCallbackType], ItemCallbackType]

@discord.ui.channel_select(*, placeholder=None, custom_id=None, min_values=1, max_values=1, disabled=False, channel_types=..., row=None)[source]
A shortcut for discord.ui.select() with select type discord.ComponentType.channel_select.

New in version 2.3.

PARAMETERS:
placeholder (str | None) –

custom_id (str | None) –

min_values (int) –

max_values (int) –

disabled (bool) –

channel_types (list[ChannelType]) –

row (int | None) –

RETURN TYPE:
Callable[[ItemCallbackType], ItemCallbackType]

Objects
class discord.ui.View(*items, timeout=180.0, disable_on_timeout=False)[source]
Attributes
children
disable_on_timeout
message
timeout
Methods
View.from_message
add_item
clear_items
disable_all_items
enable_all_items
get_item
interaction_check
is_dispatching
is_finished
is_persistent
on_check_failure
on_error
on_timeout
remove_item
stop
wait
Represents a UI view.

This object must be inherited to create a UI within Discord.

New in version 2.0.

PARAMETERS:
*items (Item) – The initial items attached to this view.

timeout (Optional[float]) – Timeout in seconds from last interaction with the UI before no longer accepting input. If None then there is no timeout.

timeout
Timeout from last interaction with the UI before no longer accepting input. If None then there is no timeout.

TYPE:
Optional[float]

children
The list of children attached to this view.

TYPE:
List[Item]

disable_on_timeout
Whether to disable the view when the timeout is reached. Defaults to False.

TYPE:
bool

message
The message that this view is attached to. If None then the view has not been sent with a message.

TYPE:
Optional[Message]

PARAMETERS:
disable_on_timeout (bool) –

classmethod from_message(message, /, *, timeout=180.0)[source]
Converts a message’s components into a View.

The Message.components of a message are read-only and separate types from those in the discord.ui namespace. In order to modify and edit message components they must be converted into a View first.

PARAMETERS:
message (Message) – The message with components to convert into a view.

timeout (Optional[float]) – The timeout of the converted view.

RETURNS:
The converted view. This always returns a View and not one of its subclasses.

RETURN TYPE:
View

add_item(item)[source]
Adds an item to the view.

PARAMETERS:
item (Item) – The item to add to the view.

RAISES:
TypeError – An Item was not passed.

ValueError – Maximum number of children has been exceeded (25) or the row the item is trying to be added to is full.

RETURN TYPE:
None

remove_item(item)[source]
Removes an item from the view.

PARAMETERS:
item (Item) – The item to remove from the view.

RETURN TYPE:
None

clear_items()[source]
Removes all items from the view.

RETURN TYPE:
None

get_item(custom_id)[source]
Get an item from the view with the given custom ID. Alias for utils.get(view.children, custom_id=custom_id).

PARAMETERS:
custom_id (str) – The custom_id of the item to get

RETURNS:
The item with the matching custom_id if it exists.

RETURN TYPE:
Optional[Item]

await interaction_check(interaction)[source]
This function is a coroutine.

A callback that is called when an interaction happens within the view that checks whether the view should process item callbacks for the interaction.

This is useful to override if, for example, you want to ensure that the interaction author is a given user.

The default implementation of this returns True.

If this returns False, on_check_failure() is called.

Note

If an exception occurs within the body then the check is considered a failure and on_error() is called.

PARAMETERS:
interaction (Interaction) – The interaction that occurred.

RETURNS:
Whether the view children’s callbacks should be called.

RETURN TYPE:
bool

await on_timeout()[source]
This function is a coroutine.

A callback that is called when a view’s timeout elapses without being explicitly stopped.

RETURN TYPE:
None

await on_check_failure(interaction)[source]
This function is a coroutine. A callback that is called when a View.interaction_check() returns False. This can be used to send a response when a check failure occurs.

PARAMETERS:
interaction (Interaction) – The interaction that occurred.

RETURN TYPE:
None

await on_error(error, item, interaction)[source]
This function is a coroutine.

A callback that is called when an item’s callback or interaction_check() fails with an error.

The default implementation prints the traceback to stderr.

PARAMETERS:
error (Exception) – The exception that was raised.

item (Item) – The item that failed the dispatch.

interaction (Interaction) – The interaction that led to the failure.

RETURN TYPE:
None

stop()[source]
Stops listening to interaction events from this view.

This operation cannot be undone.

RETURN TYPE:
None

is_finished()[source]
Whether the view has finished interacting.

RETURN TYPE:
bool

is_dispatching()[source]
Whether the view has been added for dispatching purposes.

RETURN TYPE:
bool

is_persistent()[source]
Whether the view is set up as persistent.

A persistent view has all their components with a set custom_id and a timeout set to None.

RETURN TYPE:
bool

await wait()[source]
Waits until the view has finished interacting.

A view is considered finished when stop() is called, or it times out.

RETURNS:
If True, then the view timed out. If False then the view finished normally.

RETURN TYPE:
bool

disable_all_items(*, exclusions=None)[source]
Disables all items in the view.

PARAMETERS:
exclusions (Optional[List[Item]]) – A list of items in self.children to not disable from the view.

enable_all_items(*, exclusions=None)[source]
Enables all items in the view.

PARAMETERS:
exclusions (Optional[List[Item]]) – A list of items in self.children to not enable from the view.

class discord.ui.Item[source]
Attributes
view
Methods
callback
Represents the base UI item that all UI components inherit from.

The current UI items supported are:

discord.ui.Button

discord.ui.Select

New in version 2.0.

property view
The underlying view for this item.

RETURN TYPE:
V | None

await callback(interaction)[source]
This function is a coroutine.

The callback associated with this UI item.

This can be overridden by subclasses.

PARAMETERS:
interaction (Interaction) – The interaction that triggered this UI item.

class discord.ui.Button(*, style=<ButtonStyle.secondary: 2>, label=None, disabled=False, custom_id=None, url=None, emoji=None, row=None)[source]
Attributes
custom_id
disabled
emoji
label
style
url
view
Methods
callback
Represents a UI button.

New in version 2.0.

PARAMETERS:
style (discord.ButtonStyle) – The style of the button.

custom_id (Optional[str]) – The ID of the button that gets received during an interaction. If this button is for a URL, it does not have a custom ID.

url (Optional[str]) – The URL this button sends you to.

disabled (bool) – Whether the button is disabled or not.

label (Optional[str]) – The label of the button, if any. Maximum of 80 chars.

emoji (Optional[Union[PartialEmoji, Emoji, str]]) – The emoji of the button, if available.

row (Optional[int]) – The relative row this button belongs to. A Discord component can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you’d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to None, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero indexed).

property style
The style of the button.

RETURN TYPE:
ButtonStyle

property custom_id
The ID of the button that gets received during an interaction.

If this button is for a URL, it does not have a custom ID.

RETURN TYPE:
str | None

property url
The URL this button sends you to.

RETURN TYPE:
str | None

property disabled
Whether the button is disabled or not.

RETURN TYPE:
bool

property label
The label of the button, if available.

RETURN TYPE:
str | None

property emoji
The emoji of the button, if available.

RETURN TYPE:
PartialEmoji | None

await callback(interaction)
This function is a coroutine.

The callback associated with this UI item.

This can be overridden by subclasses.

PARAMETERS:
interaction (Interaction) – The interaction that triggered this UI item.

property view
The underlying view for this item.

RETURN TYPE:
V | None

class discord.ui.Select(select_type=<ComponentType.string_select: 3>, *, custom_id=None, placeholder=None, min_values=1, max_values=1, options=None, channel_types=None, disabled=False, row=None)[source]
Attributes
channel_types
custom_id
disabled
max_values
min_values
options
placeholder
values
view
Methods
add_option
append_option
callback
Represents a UI select menu.

This is usually represented as a drop down menu.

In order to get the selected items that the user has chosen, use Select.values.

New in version 2.0.

Changed in version 2.3: Added support for discord.ComponentType.string_select, discord.ComponentType.user_select, discord.ComponentType.role_select, discord.ComponentType.mentionable_select, and discord.ComponentType.channel_select.

PARAMETERS:
select_type (discord.ComponentType) – The type of select to create. Must be one of discord.ComponentType.string_select, discord.ComponentType.user_select, discord.ComponentType.role_select, discord.ComponentType.mentionable_select, or discord.ComponentType.channel_select.

custom_id (str) – The ID of the select menu that gets received during an interaction. If not given then one is generated for you.

placeholder (Optional[str]) – The placeholder text that is shown if nothing is selected, if any.

min_values (int) – The minimum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25.

max_values (int) – The maximum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25.

options (List[discord.SelectOption]) – A list of options that can be selected in this menu. Only valid for selects of type discord.ComponentType.string_select.

channel_types (List[discord.ChannelType]) – A list of channel types that can be selected in this menu. Only valid for selects of type discord.ComponentType.channel_select.

disabled (bool) – Whether the select is disabled or not.

row (Optional[int]) – The relative row this select menu belongs to. A Discord component can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you’d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to None, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero indexed).

property custom_id
The ID of the select menu that gets received during an interaction.

RETURN TYPE:
str

property placeholder
The placeholder text that is shown if nothing is selected, if any.

RETURN TYPE:
str | None

property min_values
The minimum number of items that must be chosen for this select menu.

RETURN TYPE:
int

property max_values
The maximum number of items that must be chosen for this select menu.

RETURN TYPE:
int

property disabled
Whether the select is disabled or not.

RETURN TYPE:
bool

property channel_types
A list of channel types that can be selected in this menu.

property options
A list of options that can be selected in this menu.

add_option(*, label, value=..., description=None, emoji=None, default=False)[source]
Adds an option to the select menu.

To append a pre-existing discord.SelectOption use the append_option() method instead.

PARAMETERS:
label (str) – The label of the option. This is displayed to users. Can only be up to 100 characters.

value (str) – The value of the option. This is not displayed to users. If not given, defaults to the label. Can only be up to 100 characters.

description (Optional[str]) – An additional description of the option, if any. Can only be up to 100 characters.

emoji (Optional[Union[str, Emoji, PartialEmoji]]) – The emoji of the option, if available. This can either be a string representing the custom or unicode emoji or an instance of PartialEmoji or Emoji.

default (bool) – Whether this option is selected by default.

RAISES:
ValueError – The number of options exceeds 25.

append_option(option)[source]
Appends an option to the select menu.

PARAMETERS:
option (discord.SelectOption) – The option to append to the select menu.

RAISES:
ValueError – The number of options exceeds 25.

property values
Union[List[str], List[Union[discord.Member, discord.User]], List[discord.Role]], List[Union[discord.Member, discord.User, discord.Role]], List[discord.abc.GuildChannel]]: A list of values that have been selected by the user.

await callback(interaction)
This function is a coroutine.

The callback associated with this UI item.

This can be overridden by subclasses.

PARAMETERS:
interaction (Interaction) – The interaction that triggered this UI item.

property view
The underlying view for this item.

RETURN TYPE:
V | None

class discord.ui.Modal(*children, title, custom_id=None, timeout=None)[source]
Attributes
children
custom_id
title
Methods
add_item
callback
on_error
on_timeout
remove_item
stop
wait
Represents a UI Modal dialog.

This object must be inherited to create a UI within Discord.

New in version 2.0.

PARAMETERS:
children (InputText) – The initial InputText fields that are displayed in the modal dialog.

title (str) – The title of the modal dialog. Must be 45 characters or fewer.

custom_id (Optional[str]) – The ID of the modal dialog that gets received during an interaction. Must be 100 characters or fewer.

timeout (Optional[float]) – Timeout in seconds from last interaction with the UI before no longer accepting input. If None then there is no timeout.

property title
The title of the modal dialog.

RETURN TYPE:
str

property children
The child components associated with the modal dialog.

property custom_id
The ID of the modal dialog that gets received during an interaction.

RETURN TYPE:
str

await callback(interaction)[source]
This function is a coroutine.

The coroutine that is called when the modal dialog is submitted. Should be overridden to handle the values submitted by the user.

PARAMETERS:
interaction (Interaction) – The interaction that submitted the modal dialog.

add_item(item)[source]
Adds an InputText component to the modal dialog.

PARAMETERS:
item (InputText) – The item to add to the modal dialog

remove_item(item)[source]
Removes an InputText component from the modal dialog.

PARAMETERS:
item (InputText) – The item to remove from the modal dialog.

stop()[source]
Stops listening to interaction events from the modal dialog.

RETURN TYPE:
None

await wait()[source]
Waits for the modal dialog to be submitted.

RETURN TYPE:
bool

await on_error(error, interaction)[source]
This function is a coroutine.

A callback that is called when the modal’s callback fails with an error.

The default implementation prints the traceback to stderr.

PARAMETERS:
error (Exception) – The exception that was raised.

interaction (Interaction) – The interaction that led to the failure.

RETURN TYPE:
None

await on_timeout()[source]
This function is a coroutine.

A callback that is called when a modal’s timeout elapses without being explicitly stopped.

RETURN TYPE:
None

class discord.ui.InputText(*, style=<InputTextStyle.short: 1>, custom_id=None, label, placeholder=None, min_length=None, max_length=None, required=True, value=None, row=None)[source]
Attributes
custom_id
label
max_length
min_length
placeholder
required
style
value
Represents a UI text input field.

New in version 2.0.

PARAMETERS:
style (InputTextStyle) – The style of the input text field.

custom_id (Optional[str]) – The ID of the input text field that gets received during an interaction.

label (str) – The label for the input text field. Must be 45 characters or fewer.

placeholder (Optional[str]) – The placeholder text that is shown if nothing is selected, if any. Must be 100 characters or fewer.

min_length (Optional[int]) – The minimum number of characters that must be entered. Defaults to 0 and must be less than 4000.

max_length (Optional[int]) – The maximum number of characters that can be entered. Must be between 1 and 4000.

required (Optional[bool]) – Whether the input text field is required or not. Defaults to True.

value (Optional[str]) – Pre-fills the input text field with this value. Must be 4000 characters or fewer.

row (Optional[int]) – The relative row this input text field belongs to. A modal dialog can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you’d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to None, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero indexed).

property style
The style of the input text field.

RETURN TYPE:
InputTextStyle

property custom_id
The ID of the input text field that gets received during an interaction.

RETURN TYPE:
str

property label
The label of the input text field.

RETURN TYPE:
str

property placeholder
The placeholder text that is shown before anything is entered, if any.

RETURN TYPE:
str | None

property min_length
The minimum number of characters that must be entered. Defaults to 0.

RETURN TYPE:
int | None

property max_length
The maximum number of characters that can be entered.

RETURN TYPE:
int | None

property required
Whether the input text field is required or not. Defaults to True.

RETURN TYPE:
bool | None

property value
The value entered in the text field.

RETURN TYPE:
str | None





Sinks
Core
class discord.sinks.Filters(**kwargs)[source]
Filters for Sink

New in version 2.0.

PARAMETERS:
container – Container of all Filters.

class discord.sinks.Sink(*, filters=None)[source]
A sink “stores” recorded audio data.

Can be subclassed for extra customizablilty.

Warning

It is recommended you use the officially provided sink classes, such as WaveSink.

just replace the following like so:

vc.start_recording(
    MySubClassedSink(),
    finished_callback,
    ctx.channel,
)
New in version 2.0.

RAISES:
ClientException – An invalid encoding type was specified.

ClientException – Audio may only be formatted after recording is finished.

get_all_audio()[source]
Gets all audio files.

get_user_audio(user)[source]
Gets the audio file(s) of one specific user.

PARAMETERS:
user (Union[str, int]) –

class discord.sinks.AudioData(file)[source]
Handles data that’s been completely decrypted and decoded and is ready to be saved to file.

New in version 2.0.

write(data)[source]
Writes audio data.

RAISES:
ClientException – The AudioData is already finished writing.

cleanup()[source]
Finishes and cleans up the audio data.

RAISES:
ClientException – The AudioData is already finished writing.

on_format(encoding)[source]
Called when audio data is formatted.

RAISES:
ClientException – The AudioData is still writing.

class discord.sinks.RawData(data, client)[source]
Handles raw data from Discord so that it can be decrypted and decoded to be used.

New in version 2.0.

Sink Classes
class discord.sinks.WaveSink(*, filters=None)[source]
A special sink for .wav(wave) files.

New in version 2.0.

format_audio(audio)[source]
Formats the recorded audio.

RAISES:
WaveSinkError – Audio may only be formatted after recording is finished.

WaveSinkError – Formatting the audio failed.

class discord.sinks.MP3Sink(*, filters=None)[source]
A special sink for .mp3 files.

New in version 2.0.

format_audio(audio)[source]
Formats the recorded audio.

RAISES:
MP3SinkError – Audio may only be formatted after recording is finished.

MP3SinkError – Formatting the audio failed.

class discord.sinks.MP4Sink(*, filters=None)[source]
A special sink for .mp4 files.

New in version 2.0.

format_audio(audio)[source]
Formats the recorded audio.

RAISES:
MP4SinkError – Audio may only be formatted after recording is finished.

MP4SinkError – Formatting the audio failed.

class discord.sinks.M4ASink(*, filters=None)[source]
A special sink for .m4a files.

New in version 2.0.

format_audio(audio)[source]
Formats the recorded audio.

RAISES:
M4ASinkError – Audio may only be formatted after recording is finished.

M4ASinkError – Formatting the audio failed.

class discord.sinks.MKVSink(*, filters=None)[source]
A special sink for .mkv files.

New in version 2.0.

format_audio(audio)[source]
Formats the recorded audio.

RAISES:
MKVSinkError – Audio may only be formatted after recording is finished.

MKVSinkError – Formatting the audio failed.

class discord.sinks.MKASink(*, filters=None)[source]
A special sink for .mka files.

New in version 2.0.

format_audio(audio)[source]
Formats the recorded audio.

RAISES:
MKASinkError – Audio may only be formatted after recording is finished.

MKASinkError – Formatting the audio failed.

class discord.sinks.OGGSink(*, filters=None)[source]
A special sink for .ogg files.

New in version 2.0.

format_audio(audio)[source]
Formats the recorded audio.

RAISES:
OGGSinkError – Audio may only be formatted after recording is finished.

OGGSinkError – Formatting the audio failed.




Exceptions
Exception Hierarchy
Exception
DiscordException
ClientException
InvalidData

InvalidArgument

LoginFailure

ConnectionClosed

PrivilegedIntentsRequired

InteractionResponded

NoMoreItems

GatewayNotFound

HTTPException
Forbidden

NotFound

DiscordServerError

ApplicationCommandError
CheckFailure

ApplicationCommandInvokeError

ExtensionError
ExtensionAlreadyLoaded

ExtensionNotLoaded

NoEntryPointError

ExtensionFailed

ExtensionNotFound

sinks.SinkException
sinks.RecordingException

sinks.WaveSinkError

sinks.MP3SinkError

sinks.MP4SinkError

sinks.M4ASinkError

sinks.MKVSinkError

sinks.MKASinkError

sinks.OGGSinkError

Objects
The following exceptions are thrown by the library.

exception discord.DiscordException[source]
Base exception class for pycord

Ideally speaking, this could be caught to handle any exceptions raised from this library.

exception discord.ClientException[source]
Exception that’s raised when an operation in the Client fails.

These are usually for exceptions that happened due to user input.

exception discord.LoginFailure[source]
Exception that’s raised when the Client.login() function fails to log you in from improper credentials or some other misc. failure.

exception discord.NoMoreItems[source]
Exception that is raised when an async iteration operation has no more items.

exception discord.HTTPException(response, message)[source]
Exception that’s raised when an HTTP request operation fails.

response
The response of the failed HTTP request. This is an instance of aiohttp.ClientResponse. In some cases this could also be a requests.Response.

TYPE:
aiohttp.ClientResponse

text
The text of the error. Could be an empty string.

TYPE:
str

status
The status code of the HTTP request.

TYPE:
int

code
The Discord specific error code for the failure.

TYPE:
int

exception discord.Forbidden(response, message)[source]
Exception that’s raised for when status code 403 occurs.

Subclass of HTTPException

exception discord.NotFound(response, message)[source]
Exception that’s raised for when status code 404 occurs.

Subclass of HTTPException

exception discord.DiscordServerError(response, message)[source]
Exception that’s raised for when a 500 range status code occurs.

Subclass of HTTPException.

New in version 1.5.

exception discord.InvalidData[source]
Exception that’s raised when the library encounters unknown or invalid data from Discord.

exception discord.InvalidArgument[source]
Exception that’s raised when an argument to a function is invalid some way (e.g. wrong value or wrong type).

This could be considered the parallel of ValueError and TypeError except inherited from ClientException and thus DiscordException.

exception discord.GatewayNotFound[source]
An exception that is raised when the gateway for Discord could not be found

exception discord.ConnectionClosed(socket, *, shard_id, code=None)[source]
Exception that’s raised when the gateway connection is closed for reasons that could not be handled internally.

code
The close code of the websocket.

TYPE:
int

reason
The reason provided for the closure.

TYPE:
str

shard_id
The shard ID that got closed if applicable.

TYPE:
Optional[int]

PARAMETERS:
socket (ClientWebSocketResponse) –

shard_id (int | None) –

code (int | None) –

exception discord.PrivilegedIntentsRequired(shard_id)[source]
Exception that’s raised when the gateway is requesting privileged intents, but they’re not ticked in the developer page yet.

Go to https://discord.com/developers/applications/ and enable the intents that are required. Currently, these are as follows:

Intents.members

Intents.presences

Intents.message_content

shard_id
The shard ID that got closed if applicable.

TYPE:
Optional[int]

PARAMETERS:
shard_id (int | None) –

exception discord.InteractionResponded(interaction)[source]
Exception that’s raised when sending another interaction response using InteractionResponse when one has already been done before.

An interaction can only respond once.

New in version 2.0.

interaction
The interaction that’s already been responded to.

TYPE:
Interaction

PARAMETERS:
interaction (Interaction) –

exception discord.opus.OpusError(code)[source]
An exception that is thrown for libopus related errors.

code
The error code returned.

TYPE:
int

PARAMETERS:
code (int) –

exception discord.opus.OpusNotLoaded[source]
An exception that is thrown for when libopus is not loaded.

exception discord.ApplicationCommandError[source]
The base exception type for all application command related errors.

This inherits from DiscordException.

This exception and exceptions inherited from it are handled in a special way as they are caught and passed into a special event from Bot, on_command_error().

exception discord.CheckFailure[source]
Exception raised when the predicates in Command.checks have failed.

This inherits from ApplicationCommandError

exception discord.ApplicationCommandInvokeError(e)[source]
Exception raised when the command being invoked raised an exception.

This inherits from ApplicationCommandError

original
The original exception that was raised. You can also get this via the __cause__ attribute.

TYPE:
Exception

PARAMETERS:
e (Exception) –

exception discord.ExtensionError(message=None, *args, name)[source]
Base exception for extension related errors.

This inherits from DiscordException.

name
The extension that had an error.

TYPE:
str

PARAMETERS:
message (str | None) –

args (Any) –

name (str) –

exception discord.ExtensionAlreadyLoaded(name)[source]
An exception raised when an extension has already been loaded.

This inherits from ExtensionError

PARAMETERS:
name (str) –

exception discord.ExtensionNotLoaded(name)[source]
An exception raised when an extension was not loaded.

This inherits from ExtensionError

PARAMETERS:
name (str) –

exception discord.NoEntryPointError(name)[source]
An exception raised when an extension does not have a setup entry point function.

This inherits from ExtensionError

PARAMETERS:
name (str) –

exception discord.ExtensionFailed(name, original)[source]
An exception raised when an extension failed to load during execution of the module or setup entry point.

This inherits from ExtensionError

name
The extension that had the error.

TYPE:
str

original
The original exception that was raised. You can also get this via the __cause__ attribute.

TYPE:
Exception

PARAMETERS:
name (str) –

original (Exception) –

exception discord.ExtensionNotFound(name)[source]
An exception raised when an extension is not found.

This inherits from ExtensionError

Changed in version 1.3: Made the original attribute always None.

name
The extension that had the error.

TYPE:
str

PARAMETERS:
name (str) –

exception discord.sinks.SinkException[source]
Raised when a Sink error occurs.

New in version 2.0.

exception discord.sinks.RecordingException[source]
Exception that’s thrown when there is an error while trying to record audio from a voice channel.

New in version 2.0.

exception discord.sinks.WaveSinkError[source]
Exception thrown when an exception occurs with WaveSink

New in version 2.0.

exception discord.sinks.MP3SinkError[source]
Exception thrown when an exception occurs with MP3Sink

New in version 2.0.

exception discord.sinks.MP4SinkError[source]
Exception thrown when an exception occurs with MP4Sink

New in version 2.0.

exception discord.sinks.M4ASinkError[source]
Exception thrown when an exception occurs with M4ASink

New in version 2.0.

exception discord.sinks.MKVSinkError[source]
Exception thrown when an exception occurs with MKVSink

New in version 2.0.

exception discord.sinks.MKASinkError[source]
Exception thrown when an exception occurs with MKASink

New in version 2.0.

exception discord.sinks.OGGSinkError[source]
Exception thrown when an exception occurs with OGGSink

New in version 2.0.





Commands
One of the most appealing aspects of the command extension is how easy it is to define commands and how you can arbitrarily nest groups and commands to have a rich sub-command system.

Note

Using prefixed commands in guilds requires Intents.message_content to be enabled.

Commands are defined by attaching it to a regular Python function. The command is then invoked by the user using a similar signature to the Python function.

For example, in the given command definition:

@bot.command()
async def foo(ctx, arg):
    await ctx.send(arg)
With the following prefix ($), it would be invoked by the user via:

$foo abc
A command must always have at least one parameter, ctx, which is the Context as the first one.

There are two ways of registering a command. The first one is by using Bot.command() decorator, as seen in the example above. The second is using the command() decorator followed by Bot.add_command() on the instance.

Essentially, these two are equivalent:

from discord.ext import commands

bot = commands.Bot(command_prefix='$')

@bot.command()
async def test(ctx):
    pass

# or:

@commands.command()
async def test(ctx):
    pass

bot.add_command(test)
Since the Bot.command() decorator is shorter and easier to comprehend, it will be the one used throughout the documentation here.

Any parameter that is accepted by the Command constructor can be passed into the decorator. For example, to change the name to something other than the function would be as simple as doing this:

@bot.command(name='list')
async def _list(ctx, arg):
    pass
Parameters
Since we define commands by making Python functions, we also define the argument passing behaviour by the function parameters.

Certain parameter types do different things in the user side and most forms of parameter types are supported.

Positional
The most basic form of parameter passing is the positional parameter. This is where we pass a parameter as-is:

@bot.command()
async def test(ctx, arg):
    await ctx.send(arg)
On the bot using side, you can provide positional arguments by just passing a regular string:

../../_images/positional1.png
To make use of a word with spaces in between, you should quote it:

../../_images/positional2.png
As a note of warning, if you omit the quotes, you will only get the first word:

../../_images/positional3.png
Since positional arguments are just regular Python arguments, you can have as many as you want:

@bot.command()
async def test(ctx, arg1, arg2):
    await ctx.send(f'You passed {arg1} and {arg2}')
Variable
Sometimes you want users to pass in an undetermined number of parameters. The library supports this similar to how variable list parameters are done in Python:

@bot.command()
async def test(ctx, *args):
    arguments = ', '.join(args)
    await ctx.send(f'{len(args)} arguments: {arguments}')
This allows our user to accept either one or many arguments as they please. This works similar to positional arguments, so multi-word parameters should be quoted.

For example, on the bot side:

../../_images/variable1.png
If the user wants to input a multi-word argument, they have to quote it like earlier:

../../_images/variable2.png
Do note that similar to the Python function behaviour, a user can technically pass no arguments at all:

../../_images/variable3.png
Since the args variable is a tuple, you can do anything you would usually do with one.

Keyword-Only Arguments
When you want to handle parsing of the argument yourself or do not feel like you want to wrap multi-word user input into quotes, you can ask the library to give you the rest as a single argument. We do this by using a keyword-only argument, seen below:

@bot.command()
async def test(ctx, *, arg):
    await ctx.send(arg)
Warning

You can only have one keyword-only argument due to parsing ambiguities.

On the bot side, we do not need to quote input with spaces:

../../_images/keyword1.png
Do keep in mind that wrapping it in quotes leaves it as-is:

../../_images/keyword2.png
By default, the keyword-only arguments are stripped of white space to make it easier to work with. This behaviour can be toggled by the Command.rest_is_raw argument in the decorator.

Invocation Context
As seen earlier, every command must take at least a single parameter, called the Context.

This parameter gives you access to something called the “invocation context”. Essentially all the information you need to know how the command was executed. It contains a lot of useful information:

Context.guild to fetch the Guild of the command, if any.

Context.message to fetch the Message of the command.

Context.author to fetch the Member or User that called the command.

Context.send() to send a message to the channel the command was used in.

The context implements the abc.Messageable interface, so anything you can do on a abc.Messageable you can do on the Context.

Converters
Adding bot arguments with function parameters is only the first step in defining your bot’s command interface. To actually make use of the arguments, we usually want to convert the data into a target type. We call these Converters.

Converters come in a few flavours:

A regular callable object that takes an argument as a sole parameter and returns a different type.

These range from your own function, to something like bool or int.

A custom class that inherits from Converter.

Basic Converters
At its core, a basic converter is a callable that takes in an argument and turns it into something else.

For example, if we wanted to add two numbers together, we could request that they are turned into integers for us by specifying the converter:

@bot.command()
async def add(ctx, a: int, b: int):
    await ctx.send(a + b)
We specify converters by using something called a function annotation. This is a Python 3 exclusive feature that was introduced in PEP 3107.

This works with any callable, such as a function that would convert a string to all upper-case:

def to_upper(argument):
    return argument.upper()

@bot.command()
async def up(ctx, *, content: to_upper):
    await ctx.send(content)
bool
Unlike the other basic converters, the bool converter is treated slightly different. Instead of casting directly to the bool type, which would result in any non-empty argument returning True, it instead evaluates the argument as True or False based on its given content:

if lowered in ('yes', 'y', 'true', 't', '1', 'enable', 'on'):
    return True
elif lowered in ('no', 'n', 'false', 'f', '0', 'disable', 'off'):
    return False
Advanced Converters
Sometimes a basic converter doesn’t have enough information that we need. For example, sometimes we want to get some information from the Message that called the command or we want to do some asynchronous processing.

For this, the library provides the Converter interface. This allows you to have access to the Context and have the callable be asynchronous. Defining a custom converter using this interface requires overriding a single method, Converter.convert().

An example converter:

import random

class Slapper(commands.Converter):
    async def convert(self, ctx, argument):
        to_slap = random.choice(ctx.guild.members)
        return f'{ctx.author} slapped {to_slap} because *{argument}*'

@bot.command()
async def slap(ctx, *, reason: Slapper):
    await ctx.send(reason)
The converter provided can either be constructed or not. Essentially these two are equivalent:

@bot.command()
async def slap(ctx, *, reason: Slapper):
    await ctx.send(reason)

# is the same as...

@bot.command()
async def slap(ctx, *, reason: Slapper()):
    await ctx.send(reason)
Having the possibility of the converter be constructed allows you to set up some state in the converter’s __init__ for fine tuning the converter. An example of this is actually in the library, clean_content.

@bot.command()
async def clean(ctx, *, content: commands.clean_content):
    await ctx.send(content)

# or for fine-tuning

@bot.command()
async def clean(ctx, *, content: commands.clean_content(use_nicknames=False)):
    await ctx.send(content)
If a converter fails to convert an argument to its designated target type, the BadArgument exception must be raised.

Inline Advanced Converters
If we don’t want to inherit from Converter, we can still provide a converter that has the advanced functionalities of an advanced converter and save us from specifying two types.

For example, a common idiom would be to have a class and a converter for that class:

class JoinDistance:
    def __init__(self, joined, created):
        self.joined = joined
        self.created = created

    @property
    def delta(self):
        return self.joined - self.created

class JoinDistanceConverter(commands.MemberConverter):
    async def convert(self, ctx, argument):
        member = await super().convert(ctx, argument)
        return JoinDistance(member.joined_at, member.created_at)

@bot.command()
async def delta(ctx, *, member: JoinDistanceConverter):
    is_new = member.delta.days < 100
    if is_new:
        await ctx.send("Hey you're pretty new!")
    else:
        await ctx.send("Hm you're not so new.")
This can get tedious, so an inline advanced converter is possible through a classmethod() inside the type:

class JoinDistance:
    def __init__(self, joined, created):
        self.joined = joined
        self.created = created

    @classmethod
    async def convert(cls, ctx, argument):
        member = await commands.MemberConverter().convert(ctx, argument)
        return cls(member.joined_at, member.created_at)

    @property
    def delta(self):
        return self.joined - self.created

@bot.command()
async def delta(ctx, *, member: JoinDistance):
    is_new = member.delta.days < 100
    if is_new:
        await ctx.send("Hey you're pretty new!")
    else:
        await ctx.send("Hm you're not so new.")
Discord Converters
Working with Discord Models is a fairly common thing when defining commands, as a result the library makes working with them easy.

For example, to receive a Member you can just pass it as a converter:

@bot.command()
async def joined(ctx, *, member: discord.Member):
    await ctx.send(f'{member} joined on {member.joined_at}')
When this command is executed, it attempts to convert the string given into a Member and then passes it as a parameter for the function. This works by checking if the string is a mention, an ID, a nickname, a username + discriminator, or just a regular username. The default set of converters have been written to be as easy to use as possible.

A lot of discord models work out of the gate as a parameter:

Object (since v2.0)

Member

User

Message (since v1.1)

PartialMessage (since v1.7)

abc.GuildChannel (since 2.0)

TextChannel

VoiceChannel

StageChannel (since v1.7)

CategoryChannel

Invite

Guild (since v1.7)

Role

Game

Colour

Emoji

PartialEmoji

Thread (since v2.0)

Having any of these set as the converter will intelligently convert the argument to the appropriate target type you specify.

Under the hood, these are implemented by the Advanced Converters interface. A table of the equivalent converter is given below:

Discord Class

Converter

Object

ObjectConverter

Member

MemberConverter

User

UserConverter

Message

MessageConverter

PartialMessage

PartialMessageConverter

GuildChannel

GuildChannelConverter

TextChannel

TextChannelConverter

VoiceChannel

VoiceChannelConverter

StageChannel

StageChannelConverter

CategoryChannel

CategoryChannelConverter

Invite

InviteConverter

Guild

GuildConverter

Role

RoleConverter

Game

GameConverter

Colour

ColourConverter

Emoji

EmojiConverter

PartialEmoji

PartialEmojiConverter

Thread

ThreadConverter

By providing the converter it allows us to use them as building blocks for another converter:

class MemberRoles(commands.MemberConverter):
    async def convert(self, ctx, argument):
        member = await super().convert(ctx, argument)
        return [role.name for role in member.roles[1:]] # Remove everyone role!

@bot.command()
async def roles(ctx, *, member: MemberRoles):
    """Tells you a member's roles."""
    await ctx.send('I see the following roles: ' + ', '.join(member))
Special Converters
The command extension also has support for certain converters to allow for more advanced and intricate use cases that go beyond the generic linear parsing. These converters allow you to introduce some more relaxed and dynamic grammar to your commands in an easy to use manner.

typing.Union
A typing.Union is a special type hint that allows for the command to take in any of the specific types instead of a singular type. For example, given the following:

import typing

@bot.command()
async def union(ctx, what: typing.Union[discord.TextChannel, discord.Member]):
    await ctx.send(what)
The what parameter would either take a discord.TextChannel converter or a discord.Member converter. The way this works is through a left-to-right order. It first attempts to convert the input to a discord.TextChannel, and if it fails it tries to convert it to a discord.Member. If all converters fail, then a special error is raised, BadUnionArgument.

Note that any valid converter discussed above can be passed in to the argument list of a typing.Union.

typing.Optional
A typing.Optional is a special type hint that allows for “back-referencing” behaviour. If the converter fails to parse into the specified type, the parser will skip the parameter and then either None or the specified default will be passed into the parameter instead. The parser will then continue on to the next parameters and converters, if any.

Consider the following example:

import typing

@bot.command()
async def bottles(ctx, amount: typing.Optional[int] = 99, *, liquid="beer"):
    await ctx.send(f'{amount} bottles of {liquid} on the wall!')
../../_images/optional1.png
In this example, since the argument could not be converted into an int, the default of 99 is passed and the parser resumes handling, which in this case would be to pass it into the liquid parameter.

Note

This converter only works in regular positional parameters, not variable parameters or keyword-only parameters.

typing.Literal
A typing.Literal is a special type hint that requires the passed parameter to be equal to one of the listed values after being converted to the same type. For example, given the following:

from typing import Literal

@bot.command()
async def shop(ctx, buy_sell: Literal['buy', 'sell'], amount: Literal[1, 2], *, item: str):
    await ctx.send(f'{buy_sell.capitalize()}ing {amount} {item}(s)!')
The buy_sell parameter must be either the literal string "buy" or "sell" and amount must convert to the int 1 or 2. If buy_sell or amount don’t match any value, then a special error is raised, BadLiteralArgument. Any literal values can be mixed and matched within the same typing.Literal converter.

Note that typing.Literal[True] and typing.Literal[False] still follow the bool converter rules.

Greedy
The Greedy converter is a generalisation of the typing.Optional converter, except applied to a list of arguments. In simple terms, this means that it tries to convert as much as it can until it can’t convert any further.

Consider the following example:

@bot.command()
async def slap(ctx, members: commands.Greedy[discord.Member], *, reason='no reason'):
    slapped = ", ".join(x.name for x in members)
    await ctx.send(f'{slapped} just got slapped for {reason}')
When invoked, it allows for any number of members to be passed in:

../../_images/greedy1.png
The type passed when using this converter depends on the parameter type that it is being attached to:

Positional parameter types will receive either the default parameter or a list of the converted values.

Variable parameter types will be a tuple as usual.

Keyword-only parameter types will be the same as if Greedy was not passed at all.

Greedy parameters can also be made optional by specifying an optional value.

When mixed with the typing.Optional converter you can provide simple and expressive command invocation syntaxes:

import typing

@bot.command()
async def ban(ctx, members: commands.Greedy[discord.Member],
                   delete_days: typing.Optional[int] = 0, *,
                   reason: str):
    """Mass bans members with an optional delete_days parameter"""
    for member in members:
        await member.ban(delete_message_days=delete_days, reason=reason)
This command can be invoked any of the following ways:

$ban @Member @Member2 spam bot
$ban @Member @Member2 7 spam bot
$ban @Member spam
Warning

The usage of Greedy and typing.Optional are powerful and useful, however as a price, they open you up to some parsing ambiguities that might surprise some people.

For example, a signature expecting a typing.Optional of a discord.Member followed by a int could catch a member named after a number due to the different ways a MemberConverter decides to fetch members. You should take care to not introduce unintended parsing ambiguities in your code. One technique would be to clamp down the expected syntaxes allowed through custom converters or reordering the parameters to minimise clashes.

To help aid with some parsing ambiguities, str, None, typing.Optional and Greedy are forbidden as parameters for the Greedy converter.

FlagConverter
New in version 2.0.

A FlagConverter allows the user to specify user-friendly “flags” using PEP 526 type annotations or a syntax more reminiscent of the dataclasses module.

For example, the following code:

from discord.ext import commands
import discord

class BanFlags(commands.FlagConverter):
    member: discord.Member
    reason: str
    days: int = 1

@commands.command()
async def ban(ctx, *, flags: BanFlags):
    plural = f'{flags.days} days' if flags.days != 1 else f'{flags.days} day'
    await ctx.send(f'Banned {flags.member} for {flags.reason!r} (deleted {plural} worth of messages)')
Allows the user to invoke the command using a simple flag-like syntax:

../../_images/flags1.png
Flags use a syntax that allows the user to not require quotes when passing in values to the flag. The goal of the flag syntax is to be as user-friendly as possible. This makes flags a good choice for complicated commands that can have multiple knobs to turn or simulating keyword-only parameters in your external command interface. It is recommended to use keyword-only parameters with the flag converter. This ensures proper parsing and behaviour with quoting.

Internally, the FlagConverter class examines the class to find flags. A flag can either be a class variable with a type annotation or a class variable that’s been assigned the result of the flag() function. These flags are then used to define the interface that your users will use. The annotations correspond to the converters that the flag arguments must adhere to.

For most use cases, no extra work is required to define flags. However, if customisation is needed to control the flag name or the default value then the flag() function can come in handy:

from typing import List

class BanFlags(commands.FlagConverter):
    members: List[discord.Member] = commands.flag(name='member', default=lambda ctx: [])
This tells the parser that the members attribute is mapped to a flag named member and that the default value is an empty list. For greater customisability, the default can either be a value or a callable that takes the Context as a sole parameter. This callable can either be a function or a coroutine.

In order to customise the flag syntax we also have a few options that can be passed to the class parameter list:

# --hello world syntax
class PosixLikeFlags(commands.FlagConverter, delimiter=' ', prefix='--'):
    hello: str


# /make food
class WindowsLikeFlags(commands.FlagConverter, prefix='/', delimiter=''):
    make: str

# TOPIC: not allowed nsfw: yes Slowmode: 100
class Settings(commands.FlagConverter, case_insensitive=True):
    topic: Optional[str]
    nsfw: Optional[bool]
    slowmode: Optional[int]
Note

Despite the similarities in these examples to command like arguments, the syntax and parser is not a command line parser. The syntax is mainly inspired by Discord’s search bar input and as a result all flags need a corresponding value.

The flag converter is similar to regular commands and allows you to use most types of converters (with the exception of Greedy) as the type annotation. Some extra support is added for specific annotations as described below.

typing.List
If a list is given as a flag annotation it tells the parser that the argument can be passed multiple times.

For example, augmenting the example above:

from discord.ext import commands
from typing import List
import discord

class BanFlags(commands.FlagConverter):
    members: List[discord.Member] = commands.flag(name='member')
    reason: str
    days: int = 1

@commands.command()
async def ban(ctx, *, flags: BanFlags):
    for member in flags.members:
        await member.ban(reason=flags.reason, delete_message_days=flags.days)

    members = ', '.join(str(member) for member in flags.members)
    plural = f'{flags.days} days' if flags.days != 1 else f'{flags.days} day'
    await ctx.send(f'Banned {members} for {flags.reason!r} (deleted {plural} worth of messages)')
This is called by repeatedly specifying the flag:

../../_images/flags2.png
typing.Tuple
Since the above syntax can be a bit repetitive when specifying a flag many times, the tuple type annotation allows for “greedy-like” semantics using a variadic tuple:

from discord.ext import commands
from typing import Tuple
import discord

class BanFlags(commands.FlagConverter):
    members: Tuple[discord.Member, ...]
    reason: str
    days: int = 1
This allows the previous ban command to be called like this:

../../_images/flags3.png
The tuple annotation also allows for parsing of pairs. For example, given the following code:

# point: 10 11 point: 12 13
class Coordinates(commands.FlagConverter):
    point: Tuple[int, int]
Warning

Due to potential parsing ambiguities, the parser expects tuple arguments to be quoted if they require spaces. So if one of the inner types is str and the argument requires spaces then quotes should be used to disambiguate it from the other element of the tuple.

typing.Dict
A dict annotation is functionally equivalent to List[Tuple[K, V]] except with the return type given as a dict rather than a list.

Error Handling
When our commands fail to parse we will, by default, receive a noisy error in stderr of our console that tells us that an error has happened and has been silently ignored.

In order to handle our errors, we must use something called an error handler. There is a global error handler, called on_command_error() which works like any other event in the Event Reference. This global error handler is called for every error reached.

Most of the time however, we want to handle an error local to the command itself. Luckily, commands come with local error handlers that allow us to do just that. First we decorate an error handler function with Command.error():

@bot.command()
async def info(ctx, *, member: discord.Member):
    """Tells you some info about the member."""
    msg = f'{member} joined on {member.joined_at} and has {len(member.roles)} roles.'
    await ctx.send(msg)

@info.error
async def info_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        await ctx.send('I could not find that member...')
The first parameter of the error handler is the Context while the second one is an exception that is derived from CommandError. A list of errors is found in the Exceptions page of the documentation.

Checks
There are cases when we don’t want a user to use our commands. They don’t have permissions to do so or maybe we blocked them from using our bot earlier. The commands extension comes with full support for these things in a concept called a Checks.

A check is a basic predicate that can take in a Context as its sole parameter. Within it, you have the following options:

Return True to signal that the person can run the command.

Return False to signal that the person cannot run the command.

Raise a CommandError derived exception to signal the person cannot run the command.

This allows you to have custom error messages for you to handle in the error handlers.

To register a check for a command, we would have two ways of doing so. The first is using the check() decorator. For example:

async def is_owner(ctx):
    return ctx.author.id == 316026178463072268

@bot.command(name='eval')
@commands.check(is_owner)
async def _eval(ctx, *, code):
    """A bad example of an eval command"""
    await ctx.send(eval(code))
This would only evaluate the command if the function is_owner returns True. Sometimes we re-use a check often and want to split it into its own decorator. To do that we can just add another level of depth:

def is_owner():
    async def predicate(ctx):
        return ctx.author.id == 316026178463072268
    return commands.check(predicate)

@bot.command(name='eval')
@is_owner()
async def _eval(ctx, *, code):
    """A bad example of an eval command"""
    await ctx.send(eval(code))
Since an owner check is so common, the library provides it for you (is_owner()):

@bot.command(name='eval')
@commands.is_owner()
async def _eval(ctx, *, code):
    """A bad example of an eval command"""
    await ctx.send(eval(code))
When multiple checks are specified, all of them must be True:

def is_in_guild(guild_id):
    async def predicate(ctx):
        return ctx.guild and ctx.guild.id == guild_id
    return commands.check(predicate)

@bot.command()
@commands.is_owner()
@is_in_guild(41771983423143937)
async def secretguilddata(ctx):
    """super secret stuff"""
    await ctx.send('secret stuff')
If any of those checks fail in the example above, then the command will not be run.

When an error happens, the error is propagated to the error handlers. If you do not raise a custom CommandError derived exception, then it will get wrapped up into a CheckFailure exception as so:

@bot.command()
@commands.is_owner()
@is_in_guild(41771983423143937)
async def secretguilddata(ctx):
    """super secret stuff"""
    await ctx.send('secret stuff')

@secretguilddata.error
async def secretguilddata_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.send('nothing to see here comrade.')
If you want a more robust error system, you can derive from the exception and raise it instead of returning False:

class NoPrivateMessages(commands.CheckFailure):
    pass

def guild_only():
    async def predicate(ctx):
        if ctx.guild is None:
            raise NoPrivateMessages('Hey no DMs!')
        return True
    return commands.check(predicate)

@guild_only()
async def test(ctx):
    await ctx.send('Hey this is not a DM! Nice.')

@test.error
async def test_error(ctx, error):
    if isinstance(error, NoPrivateMessages):
        await ctx.send(error)
Note

Since having a guild_only decorator is pretty common, it comes built-in via guild_only().

Global Checks
Sometimes we want to apply a check to every command, not just certain commands. The library supports this as well using the global check concept.

Global checks work similarly to regular checks except they are registered with the Bot.check() decorator.

For example, to block all DMs we could do the following:

@bot.check
async def globally_block_dms(ctx):
    return ctx.guild is not None
Warning

Be careful on how you write your global checks, as it could also lock you out of your own bot.



Extensions
There comes a time in the bot development when you want to extend the bot functionality at run-time and quickly unload and reload code (also called hot-reloading). The command framework comes with this ability built-in, with a concept called extensions.

Primer
An extension at its core is a python file with an entry point called setup. This setup must be a plain Python function (not a coroutine). It takes a single parameter – the Bot that loads the extension.

An example extension looks like this:

hello.py
from discord.ext import commands

@commands.command()
async def hello(ctx):
    await ctx.send(f'Hello {ctx.author.display_name}.')

def setup(bot):
    bot.add_command(hello)
In this example we define a simple command, and when the extension is loaded this command is added to the bot. Now the final step to this is loading the extension, which we do by calling Bot.load_extension(). To load this extension we call bot.load_extension('hello').

Cogs

Extensions are usually used in conjunction with cogs. To read more about them, check out the documentation, Cogs.

Note

Extension paths are ultimately similar to the import mechanism. What this means is that if there is a folder, then it must be dot-qualified. For example to load an extension in plugins/hello.py then we use the string plugins.hello.

Reloading
When you make a change to the extension and want to reload the references, the library comes with a function to do this for you, Bot.reload_extension().

bot.reload_extension('hello')
Once the extension reloads, any changes that we did will be applied. This is useful if we want to add or remove functionality without restarting our bot. If an error occurred during the reloading process, the bot will pretend as if the reload never happened.

Cleaning Up
Although rare, sometimes an extension needs to clean-up or know when it’s being unloaded. For cases like these, there is another entry point named teardown which is similar to setup except called when the extension is unloaded.

basic_ext.py
def setup(bot):
    print('I am being loaded!')

def teardown(bot):
    print('I am being unloaded!')
    
    
    
API Reference
The following section outlines the API of Pycord’s prefixed command extension module.

Note

Using prefixed commands in guilds requires Intents.message_content to be enabled.

Bots
Bot
class discord.ext.commands.Bot(command_prefix=<function when_mentioned>, help_command=<default-help-command>, **options)[source]
Attributes
activity
allowed_mentions
application_flags
application_id
cached_messages
case_insensitive
cogs
command_prefix
commands
emojis
extensions
guilds
help_command
intents
latency
persistent_views
private_channels
status
stickers
strip_after_prefix
user
users
voice_clients
Methods
add_application_command
add_check
add_cog
add_command
add_listener
add_view
after_invoke
application_command
application_info
before_identify_hook
before_invoke
change_presence
check
check_once
clear
close
command
connect
create_dm
create_group
create_guild
delete_invite
event
fetch_application
fetch_channel
fetch_guild
fetch_guilds
fetch_invite
fetch_premium_sticker_packs
fetch_stage_instance
fetch_sticker
fetch_template
fetch_user
fetch_webhook
fetch_widget
get_all_channels
get_all_members
get_application_command
get_application_context
get_autocomplete_context
get_channel
get_cog
get_command
get_context
get_desynced_commands
get_emoji
get_guild
get_message
get_or_fetch_user
get_partial_messageable
get_prefix
get_stage_instance
get_sticker
get_user
group
invoke
invoke_application_command
is_closed
is_owner
is_ready
is_ws_ratelimited
listen
load_extension
load_extensions
login
message_command
on_application_command_error
on_command_error
on_error
process_application_commands
process_commands
register_command
register_commands
reload_extension
remove_application_command
remove_check
remove_cog
remove_command
remove_listener
run
slash_command
slash_group
start
sync_commands
unload_extension
user_command
wait_for
wait_until_ready
walk_application_commands
walk_commands
Represents a discord bot.

This class is a subclass of discord.Bot and as a result anything that you can do with a discord.Bot you can do with this bot.

This class also subclasses GroupMixin to provide the functionality to manage commands.

Note

Using prefixed commands requires discord.Intents.message_content to be enabled.

command_prefix
The command prefix is what the message content must contain initially to have a command invoked. This prefix could either be a string to indicate what the prefix should be, or a callable that takes in the bot as its first parameter and discord.Message as its second parameter and returns the prefix. This is to facilitate “dynamic” command prefixes. This callable can be either a regular function or a coroutine.

An empty string as the prefix always matches, enabling prefix-less command invocation. While this may be useful in DMs it should be avoided in servers, as it’s likely to cause performance issues and unintended command invocations.

The command prefix could also be an iterable of strings indicating that multiple checks for the prefix should be used and the first one to match will be the invocation prefix. You can get this prefix via Context.prefix. To avoid confusion empty iterables are not allowed.

Note

When passing multiple prefixes be careful to not pass a prefix that matches a longer prefix occurring later in the sequence. For example, if the command prefix is ('!', '!?') the '!?' prefix will never be matched to any message as the previous one matches messages starting with !?. This is especially important when passing an empty string, it should always be last as no prefix after it will be matched.

case_insensitive
Whether the commands should be case-insensitive. Defaults to False. This attribute does not carry over to groups. You must set it to every group if you require group commands to be case-insensitive as well.

TYPE:
bool

help_command
The help command implementation to use. This can be dynamically set at runtime. To remove the help command pass None. For more information on implementing a help command, see Help Commands.

TYPE:
Optional[HelpCommand]

strip_after_prefix
Whether to strip whitespace characters after encountering the command prefix. This allows for !   hello and !hello to both work if the command_prefix is set to !. Defaults to False.

New in version 1.7.

TYPE:
bool

@after_invoke
A decorator that registers a coroutine as a post-invoke hook. A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required. This post-invoke hook takes a sole parameter, a Context.

Note

Similar to before_invoke(), this is not called unless checks and argument parsing procedures succeed. This hook is, however, always called regardless of the internal command callback raising an error (i.e. CommandInvokeError). This makes it ideal for clean-up scenarios.

PARAMETERS:
coro (coroutine) – The coroutine to register as the post-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

@before_invoke
A decorator that registers a coroutine as a pre-invoke hook. A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required. This pre-invoke hook takes a sole parameter, a Context.

Note

The before_invoke() and after_invoke() hooks are only called if all checks and argument parsing procedures pass without error. If any check or argument parsing procedures fail then the hooks are not called.

PARAMETERS:
coro (coroutine) – The coroutine to register as the pre-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

@check
A decorator that adds a global check to the bot. A global check is similar to a check() that is applied on a per-command basis except it is run before any command checks have been verified and applies to every command the bot has.

Note

This function can either be a regular function or a coroutine. Similar to a command check(), this takes a single parameter of type Context and can only raise exceptions inherited from ApplicationCommandError.

EXAMPLE

@bot.check
def check_commands(ctx):
    return ctx.command.qualified_name in allowed_commands
@check_once
A decorator that adds a “call once” global check to the bot. Unlike regular global checks, this one is called only once per Bot.invoke() call. Regular global checks are called whenever a command is called or Command.can_run() is called. This type of check bypasses that and ensures that it’s called only once, even inside the default help command.

Note

When using this function the Context sent to a group subcommand may only parse the parent command and not the subcommands due to it being invoked once per Bot.invoke() call.

Note

This function can either be a regular function or a coroutine. Similar to a command check(), this takes a single parameter of type Context and can only raise exceptions inherited from ApplicationCommandError.

EXAMPLE

@bot.check_once
def whitelist(ctx):
    return ctx.message.author.id in my_whitelist
@command(name=..., cls=..., *args, **kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_command().

RETURNS:
A decorator that converts the provided method into a Command, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, Command]

@event(coro)
A decorator that registers an event to listen to.

You can find more info about the events on the documentation below.

The events must be a coroutine, if not, TypeError is raised.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

EXAMPLE

@client.event
async def on_ready():
    print('Ready!')
PARAMETERS:
coro (TypeVar(Coro, bound= Callable[..., Coroutine[Any, Any, Any]])) –

RETURN TYPE:
TypeVar(Coro, bound= Callable[..., Coroutine[Any, Any, Any]])

@group(name=..., cls=..., *args, **kwargs)
A shortcut decorator that invokes group() and adds it to the internal command list via add_command().

RETURNS:
A decorator that converts the provided method into a Group, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, Group]

@listen(name=...)
A decorator that registers another function as an external event listener. Basically this allows you to listen to multiple events from different places e.g. such as on_ready()

The functions being listened to must be a coroutine.

RAISES:
TypeError – The function being listened to is not a coroutine.

EXAMPLE

@bot.listen()
async def on_message(message):
    print('one')

# in some other file...

@bot.listen('on_message')
async def my_message(message):
    print('two')
Would print one and two in an unspecified order.

PARAMETERS:
name (str) –

RETURN TYPE:
Callable[[TypeVar(CFT, bound= Callable[..., Coroutine[Any, Any, Any]])], TypeVar(CFT, bound= Callable[..., Coroutine[Any, Any, Any]])]

property activity
The activity being used upon logging in.

RETURN TYPE:
Optional[BaseActivity]

add_application_command(command)
Adds a ApplicationCommand into the internal list of commands.

This is usually not called, instead the command() or other shortcut decorators are used instead.

New in version 2.0.

PARAMETERS:
command (ApplicationCommand) – The command to add.

RETURN TYPE:
None

add_check(func, *, call_once=False)
Adds a global check to the bot. This is the non-decorator interface to check() and check_once().

PARAMETERS:
func – The function that was used as a global check.

call_once (bool) – If the function should only be called once per Bot.invoke() call.

RETURN TYPE:
None

add_cog(cog, *, override=False)
Adds a “cog” to the bot.

A cog is a class that has its own event listeners and commands.

Changed in version 2.0: ClientException is raised when a cog with the same name is already loaded.

PARAMETERS:
cog (Cog) – The cog to register to the bot.

override (bool) –

If a previously loaded cog with the same name should be ejected instead of raising an error.

New in version 2.0.

RAISES:
TypeError – The cog does not inherit from Cog.

ApplicationCommandError – An error happened during loading.

ClientException – A cog with the same name is already loaded.

RETURN TYPE:
None

add_command(command)
Adds a Command into the internal list of commands.

This is usually not called, instead the command() or group() shortcut decorators are used instead.

Changed in version 1.4: Raise CommandRegistrationError instead of generic ClientException

PARAMETERS:
command (Command) – The command to add.

RAISES:
.CommandRegistrationError – If the command or its alias is already registered by different command.

TypeError – If the command passed is not a subclass of Command.

RETURN TYPE:
None

add_listener(func, name=...)
The non decorator alternative to listen().

PARAMETERS:
func (coroutine) – The function to call.

name (str) – The name of the event to listen for. Defaults to func.__name__.

EXAMPLE

async def on_ready(): pass
async def my_message(message): pass

bot.add_listener(on_ready)
bot.add_listener(my_message, 'on_message')
RETURN TYPE:
None

add_view(view, *, message_id=None)
Registers a View for persistent listening.

This method should be used for when a view is comprised of components that last longer than the lifecycle of the program.

New in version 2.0.

PARAMETERS:
view (discord.ui.View) – The view to register for dispatching.

message_id (Optional[int]) – The message ID that the view is attached to. This is currently used to refresh the view’s state during message update events. If not given then message update events are not propagated for the view.

RAISES:
TypeError – A view was not passed.

ValueError – The view is not persistent. A persistent view has no timeout and all their components have an explicitly provided custom_id.

RETURN TYPE:
None

property allowed_mentions
The allowed mention configuration.

New in version 1.4.

RETURN TYPE:
AllowedMentions | None

application_command(**kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_application_command().

New in version 2.0.

RETURNS:
A decorator that converts the provided method into an ApplicationCommand, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, ApplicationCommand]

property application_flags
The client’s application flags.

New in version 2.0.

RETURN TYPE:
ApplicationFlags

property application_id
The client’s application ID.

If this is not passed via __init__ then this is retrieved through the gateway when an event contains the data. Usually after on_connect() is called.

New in version 2.0.

RETURN TYPE:
int | None

await application_info()
This function is a coroutine.

Retrieves the bot’s application information.

RETURNS:
The bot’s application information.

RETURN TYPE:
AppInfo

RAISES:
HTTPException – Retrieving the information failed somehow.

await before_identify_hook(shard_id, *, initial=False)
This function is a coroutine.

A hook that is called before IDENTIFYing a session. This is useful if you wish to have more control over the synchronization of multiple IDENTIFYing clients.

The default implementation sleeps for 5 seconds.

New in version 1.4.

PARAMETERS:
shard_id (int) – The shard ID that requested being IDENTIFY’d

initial (bool) – Whether this IDENTIFY is the first initial IDENTIFY.

RETURN TYPE:
None

property cached_messages
Read-only list of messages the connected client has cached.

New in version 1.1.

RETURN TYPE:
Sequence[Message]

await change_presence(*, activity=None, status=None)
This function is a coroutine.

Changes the client’s presence.

PARAMETERS:
activity (Optional[BaseActivity]) – The activity being done. None if no currently active activity is done.

status (Optional[Status]) – Indicates what status to change to. If None, then Status.online is used.

RAISES:
InvalidArgument – If the activity parameter is not the proper type.

EXAMPLE

game = discord.Game("with the API")
await client.change_presence(status=discord.Status.idle, activity=game)
Changed in version 2.0: Removed the afk keyword-only parameter.

clear()
Clears the internal state of the bot.

After this, the bot can be considered “re-opened”, i.e. is_closed() and is_ready() both return False along with the bot’s internal cache cleared.

RETURN TYPE:
None

await close()
This function is a coroutine.

Closes the connection to Discord.

RETURN TYPE:
None

property cogs
A read-only mapping of cog name to cog.

RETURN TYPE:
Mapping[str, Cog]

property commands
A unique set of commands without aliases that are registered.

await connect(*, reconnect=True)
This function is a coroutine.

Creates a WebSocket connection and lets the WebSocket listen to messages from Discord. This is a loop that runs the entire event system and miscellaneous aspects of the library. Control is not resumed until the WebSocket connection is terminated.

PARAMETERS:
reconnect (bool) – If we should attempt reconnecting, either due to internet failure or a specific failure on Discord’s part. Certain disconnects that lead to bad state will not be handled (such as invalid sharding payloads or bad tokens).

RAISES:
GatewayNotFound – The gateway to connect to Discord is not found. Usually if this is thrown then there is a Discord API outage.

ConnectionClosed – The WebSocket connection has been terminated.

RETURN TYPE:
None

await create_dm(user)
This function is a coroutine.

Creates a DMChannel with this user.

This should be rarely called, as this is done transparently for most people.

New in version 2.0.

PARAMETERS:
user (Snowflake) – The user to create a DM with.

RETURNS:
The channel that was created.

RETURN TYPE:
DMChannel

create_group(name, description=None, guild_ids=None, **kwargs)
A shortcut method that creates a slash command group with no subcommands and adds it to the internal command list via add_application_command().

New in version 2.0.

PARAMETERS:
name (str) – The name of the group to create.

description (Optional[str]) – The description of the group to create.

guild_ids (Optional[List[int]]) – A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if None is passed.

kwargs – Any additional keyword arguments to pass to SlashCommandGroup.

RETURNS:
The slash command group that was created.

RETURN TYPE:
SlashCommandGroup

await create_guild(*, name, icon=..., code=...)
This function is a coroutine.

Creates a Guild.

Bot accounts in more than 10 guilds are not allowed to create guilds.

PARAMETERS:
name (str) – The name of the guild.

icon (Optional[bytes]) – The bytes-like object representing the icon. See ClientUser.edit() for more details on what is expected.

code (str) –

The code for a template to create the guild with.

New in version 1.4.

RETURNS:
The guild created. This is not the same guild that is added to cache.

RETURN TYPE:
Guild

RAISES:
HTTPException – Guild creation failed.

InvalidArgument – Invalid icon image format given. Must be PNG or JPG.

await delete_invite(invite)
This function is a coroutine.

Revokes an Invite, URL, or ID to an invite.

You must have the manage_channels permission in the associated guild to do this.

PARAMETERS:
invite (Union[Invite, str]) – The invite to revoke.

RAISES:
Forbidden – You do not have permissions to revoke invites.

NotFound – The invite is invalid or expired.

HTTPException – Revoking the invite failed.

RETURN TYPE:
None

property emojis
The emojis that the connected client has.

property extensions
A read-only mapping of extension name to extension.

RETURN TYPE:
Mapping[str, module]

await fetch_application(application_id, /)
This function is a coroutine. Retrieves a PartialAppInfo from an application ID.

PARAMETERS:
application_id (int) – The application ID to retrieve information from.

RETURNS:
The application information.

RETURN TYPE:
PartialAppInfo

RAISES:
NotFound – An application with this ID does not exist.

HTTPException – Retrieving the application failed.

await fetch_channel(channel_id, /)
This function is a coroutine.

Retrieves a abc.GuildChannel, abc.PrivateChannel, or Thread with the specified ID.

Note

This method is an API call. For general usage, consider get_channel() instead.

New in version 1.2.

RETURNS:
The channel from the ID.

RETURN TYPE:
Union[abc.GuildChannel, abc.PrivateChannel, Thread]

RAISES:
InvalidData – An unknown channel type was received from Discord.

HTTPException – Retrieving the channel failed.

NotFound – Invalid Channel ID.

Forbidden – You do not have permission to fetch this channel.

PARAMETERS:
channel_id (int) –

await fetch_guild(guild_id, /, *, with_counts=True)
This function is a coroutine.

Retrieves a Guild from an ID.

Note

Using this, you will not receive Guild.channels, Guild.members, Member.activity and Member.voice per Member.

Note

This method is an API call. For general usage, consider get_guild() instead.

PARAMETERS:
guild_id (int) – The guild’s ID to fetch from.

with_counts (bool) –

Whether to include count information in the guild. This fills the Guild.approximate_member_count and Guild.approximate_presence_count fields.

New in version 2.0.

RETURNS:
The guild from the ID.

RETURN TYPE:
Guild

RAISES:
Forbidden – You do not have access to the guild.

HTTPException – Getting the guild failed.

fetch_guilds(*, limit=100, before=None, after=None)
Retrieves an AsyncIterator that enables receiving your guilds.

Note

Using this, you will only receive Guild.owner, Guild.icon, Guild.id, and Guild.name per Guild.

Note

This method is an API call. For general usage, consider guilds instead.

PARAMETERS:
limit (Optional[int]) – The number of guilds to retrieve. If None, it retrieves every guild you have access to. Note, however, that this would make it a slow operation. Defaults to 100.

before (Union[abc.Snowflake, datetime.datetime]) – Retrieves guilds before this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Union[abc.Snowflake, datetime.datetime]) – Retrieve guilds after this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

YIELDS:
Guild – The guild with the guild data parsed.

RAISES:
HTTPException – Getting the guilds failed.

EXAMPLES

Usage

async for guild in client.fetch_guilds(limit=150):
    print(guild.name)
Flattening into a list

guilds = await client.fetch_guilds(limit=150).flatten()
# guilds is now a list of Guild...
All parameters are optional.

RETURN TYPE:
GuildIterator

await fetch_invite(url, *, with_counts=True, with_expiration=True, event_id=None)
This function is a coroutine.

Gets an Invite from a discord.gg URL or ID.

Note

If the invite is for a guild you have not joined, the guild and channel attributes of the returned Invite will be PartialInviteGuild and PartialInviteChannel respectively.

PARAMETERS:
url (Union[Invite, str]) – The Discord invite ID or URL (must be a discord.gg URL).

with_counts (bool) – Whether to include count information in the invite. This fills the Invite.approximate_member_count and Invite.approximate_presence_count fields.

with_expiration (bool) –

Whether to include the expiration date of the invite. This fills the Invite.expires_at field.

New in version 2.0.

event_id (Optional[int]) –

The ID of the scheduled event to be associated with the event.

See Invite.set_scheduled_event() for more info on event invite linking.

New in version 2.0.

RETURNS:
The invite from the URL/ID.

RETURN TYPE:
Invite

RAISES:
NotFound – The invite has expired or is invalid.

HTTPException – Getting the invite failed.

await fetch_premium_sticker_packs()
This function is a coroutine.

Retrieves all available premium sticker packs.

New in version 2.0.

RETURNS:
All available premium sticker packs.

RETURN TYPE:
List[StickerPack]

RAISES:
HTTPException – Retrieving the sticker packs failed.

await fetch_stage_instance(channel_id, /)
This function is a coroutine.

Gets a StageInstance for a stage channel id.

New in version 2.0.

PARAMETERS:
channel_id (int) – The stage channel ID.

RETURNS:
The stage instance from the stage channel ID.

RETURN TYPE:
StageInstance

RAISES:
NotFound – The stage instance or channel could not be found.

HTTPException – Getting the stage instance failed.

await fetch_sticker(sticker_id, /)
This function is a coroutine.

Retrieves a Sticker with the specified ID.

New in version 2.0.

RETURNS:
The sticker you requested.

RETURN TYPE:
Union[StandardSticker, GuildSticker]

RAISES:
HTTPException – Retrieving the sticker failed.

NotFound – Invalid sticker ID.

PARAMETERS:
sticker_id (int) –

await fetch_template(code)
This function is a coroutine.

Gets a Template from a discord.new URL or code.

PARAMETERS:
code (Union[Template, str]) – The Discord Template Code or URL (must be a discord.new URL).

RETURNS:
The template from the URL/code.

RETURN TYPE:
Template

RAISES:
NotFound – The template is invalid.

HTTPException – Getting the template failed.

await fetch_user(user_id, /)
This function is a coroutine.

Retrieves a User based on their ID. You do not have to share any guilds with the user to get this information, however many operations do require that you do.

Note

This method is an API call. If you have discord.Intents.members and member cache enabled, consider get_user() instead.

PARAMETERS:
user_id (int) – The user’s ID to fetch from.

RETURNS:
The user you requested.

RETURN TYPE:
User

RAISES:
NotFound – A user with this ID does not exist.

HTTPException – Fetching the user failed.

await fetch_webhook(webhook_id, /)
This function is a coroutine.

Retrieves a Webhook with the specified ID.

RETURNS:
The webhook you requested.

RETURN TYPE:
Webhook

RAISES:
HTTPException – Retrieving the webhook failed.

NotFound – Invalid webhook ID.

Forbidden – You do not have permission to fetch this webhook.

PARAMETERS:
webhook_id (int) –

await fetch_widget(guild_id, /)
This function is a coroutine.

Gets a Widget from a guild ID.

Note

The guild must have the widget enabled to get this information.

PARAMETERS:
guild_id (int) – The ID of the guild.

RETURNS:
The guild’s widget.

RETURN TYPE:
Widget

RAISES:
Forbidden – The widget for this guild is disabled.

HTTPException – Retrieving the widget failed.

for ... in get_all_channels()
A generator that retrieves every abc.GuildChannel the client can ‘access’.

This is equivalent to:

for guild in client.guilds:
    for channel in guild.channels:
        yield channel
Note

Just because you receive a abc.GuildChannel does not mean that you can communicate in said channel. abc.GuildChannel.permissions_for() should be used for that.

YIELDS:
abc.GuildChannel – A channel the client can ‘access’.

RETURN TYPE:
Generator[GuildChannel, None, None]

for ... in get_all_members()
Returns a generator with every Member the client can see.

This is equivalent to:

for guild in client.guilds:
    for member in guild.members:
        yield member
YIELDS:
Member – A member the client can see.

RETURN TYPE:
Generator[Member, None, None]

get_application_command(name, guild_ids=None, type=<class 'discord.commands.core.ApplicationCommand'>)
Get a ApplicationCommand from the internal list of commands.

New in version 2.0.

PARAMETERS:
name (str) – The qualified name of the command to get.

guild_ids (List[int]) – The guild ids associated to the command to get.

type (Type[ApplicationCommand]) – The type of the command to get. Defaults to ApplicationCommand.

RETURNS:
The command that was requested. If not found, returns None.

RETURN TYPE:
Optional[ApplicationCommand]

await get_application_context(interaction, cls=<class 'discord.commands.context.ApplicationContext'>)
This function is a coroutine.

Returns the invocation context from the interaction.

This is a more low-level counter-part for process_application_commands() to allow users more fine-grained control over the processing.

PARAMETERS:
interaction (discord.Interaction) – The interaction to get the invocation context from.

cls (Any) – The factory class that will be used to create the context. By default, this is ApplicationContext. Should a custom class be provided, it must be similar enough to ApplicationContext's interface.

RETURNS:
The invocation context. The type of this can change via the cls parameter.

RETURN TYPE:
ApplicationContext

await get_autocomplete_context(interaction, cls=<class 'discord.commands.context.AutocompleteContext'>)
This function is a coroutine.

Returns the autocomplete context from the interaction.

This is a more low-level counter-part for process_application_commands() to allow users more fine-grained control over the processing.

PARAMETERS:
interaction (discord.Interaction) – The interaction to get the invocation context from.

cls (Any) – The factory class that will be used to create the context. By default, this is AutocompleteContext. Should a custom class be provided, it must be similar enough to AutocompleteContext's interface.

RETURNS:
The autocomplete context. The type of this can change via the cls parameter.

RETURN TYPE:
AutocompleteContext

get_channel(id, /)
Returns a channel or thread with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The returned channel or None if not found.

RETURN TYPE:
Optional[Union[abc.GuildChannel, Thread, abc.PrivateChannel]]

get_cog(name)
Gets the cog instance requested.

If the cog is not found, None is returned instead.

PARAMETERS:
name (str) – The name of the cog you are requesting. This is equivalent to the name passed via keyword argument in class creation or the class name if unspecified.

RETURNS:
The cog that was requested. If not found, returns None.

RETURN TYPE:
Optional[Cog]

get_command(name)
Get a Command from the internal list of commands.

This could also be used as a way to get aliases.

The name could be fully qualified (e.g. 'foo bar') will get the subcommand bar of the group command foo. If a subcommand is not found then None is returned just as usual.

PARAMETERS:
name (str) – The name of the command to get.

RETURNS:
The command that was requested. If not found, returns None.

RETURN TYPE:
Optional[Command]

await get_context(message, *, cls=<class 'discord.ext.commands.context.Context'>)
This function is a coroutine.

Returns the invocation context from the message.

This is a more low-level counter-part for process_commands() to allow users more fine-grained control over the processing.

The returned context is not guaranteed to be a valid invocation context, Context.valid must be checked to make sure it is. If the context is not valid then it is not a valid candidate to be invoked under invoke().

PARAMETERS:
message (discord.Message) – The message to get the invocation context from.

cls – The factory class that will be used to create the context. By default, this is Context. Should a custom class be provided, it must be similar enough to Context's interface.

RETURNS:
The invocation context. The type of this can change via the cls parameter.

RETURN TYPE:
Context

await get_desynced_commands(guild_id=None, prefetched=None)
This function is a coroutine.

Gets the list of commands that are desynced from discord. If guild_id is specified, it will only return guild commands that are desynced from said guild, else it will return global commands.

Note

This function is meant to be used internally, and should only be used if you want to override the default command registration behavior.

New in version 2.0.

PARAMETERS:
guild_id (Optional[int]) – The guild id to get the desynced commands for, else global commands if unspecified.

prefetched (Optional[List[ApplicationCommand]]) – If you already fetched the commands, you can pass them here to be used. Not recommended for typical usage.

RETURNS:
A list of the desynced commands. Each will come with at least the cmd and action keys, which respectively contain the command and the action to perform. Other keys may also be present depending on the action, including id.

RETURN TYPE:
List[Dict[str, Any]]

get_emoji(id, /)
Returns an emoji with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The custom emoji or None if not found.

RETURN TYPE:
Optional[Emoji]

get_guild(id, /)
Returns a guild with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The guild or None if not found.

RETURN TYPE:
Optional[Guild]

get_message(id, /)
Returns a message the given ID.

This is useful if you have a message_id but don’t want to do an API call to access the message.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The returned message or None if not found.

RETURN TYPE:
Optional[Message]

await get_or_fetch_user(id, /)
Looks up a user in the user cache or fetches if not found.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The user or None if not found.

RETURN TYPE:
Optional[User]

get_partial_messageable(id, *, type=None)
Returns a partial messageable with the given channel ID.

This is useful if you have a channel_id but don’t want to do an API call to send messages to it.

New in version 2.0.

PARAMETERS:
id (int) – The channel ID to create a partial messageable for.

type (Optional[ChannelType]) – The underlying channel type for the partial messageable.

RETURNS:
The partial messageable

RETURN TYPE:
PartialMessageable

await get_prefix(message)
This function is a coroutine.

Retrieves the prefix the bot is listening to with the message as a context.

PARAMETERS:
message (discord.Message) – The message context to get the prefix of.

RETURNS:
A list of prefixes or a single prefix that the bot is listening for.

RETURN TYPE:
Union[List[str], str]

get_stage_instance(id, /)
Returns a stage instance with the given stage channel ID.

New in version 2.0.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The stage instance or None if not found.

RETURN TYPE:
Optional[StageInstance]

get_sticker(id, /)
Returns a guild sticker with the given ID.

New in version 2.0.

Note

To retrieve standard stickers, use fetch_sticker(). or fetch_premium_sticker_packs().

RETURNS:
The sticker or None if not found.

RETURN TYPE:
Optional[GuildSticker]

PARAMETERS:
id (int) –

get_user(id, /)
Returns a user with the given ID.

PARAMETERS:
id (int) – The ID to search for.

RETURNS:
The user or None if not found.

RETURN TYPE:
Optional[User]

property guilds
The guilds that the connected client is a member of.

property intents
The intents configured for this connection.

New in version 1.5.

RETURN TYPE:
Intents

await invoke(ctx)
This function is a coroutine.

Invokes the command given under the invocation context and handles all the internal event dispatch mechanisms.

PARAMETERS:
ctx (Context) – The invocation context to invoke.

RETURN TYPE:
None

await invoke_application_command(ctx)
This function is a coroutine.

Invokes the application command given under the invocation context and handles all the internal event dispatch mechanisms.

PARAMETERS:
ctx (ApplicationCommand) – The invocation context to invoke.

RETURN TYPE:
None

is_closed()
Indicates if the WebSocket connection is closed.

RETURN TYPE:
bool

await is_owner(user)
This function is a coroutine.

Checks if a User or Member is the owner of this bot.

If an owner_id is not set, it is fetched automatically through the use of application_info().

Changed in version 1.3: The function also checks if the application is team-owned if owner_ids is not set.

PARAMETERS:
user (abc.User) – The user to check for.

RETURNS:
Whether the user is the owner.

RETURN TYPE:
bool

is_ready()
Specifies if the client’s internal cache is ready for use.

RETURN TYPE:
bool

is_ws_ratelimited()
Whether the WebSocket is currently rate limited.

This can be useful to know when deciding whether you should query members using HTTP or via the gateway.

New in version 1.6.

RETURN TYPE:
bool

property latency
Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds.

This could be referred to as the Discord WebSocket protocol latency.

RETURN TYPE:
float

load_extension(name, *, package=None, recursive=False, store=False)
Loads an extension.

An extension is a python module that contains commands, cogs, or listeners.

An extension must have a global function, setup defined as the entry point on what to do when the extension is loaded. This entry point must have a single argument, the bot.

The extension passed can either be the direct name of a file within the current working directory or a folder that contains multiple extensions.

PARAMETERS:
name (str) – The extension or folder name to load. It must be dot separated like regular Python imports if accessing a submodule. e.g. foo.test if you want to import foo/test.py.

package (Optional[str]) –

The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g .foo.test. Defaults to None.

New in version 1.7.

recursive (Optional[bool]) –

If subdirectories under the given head directory should be recursively loaded. Defaults to False.

New in version 2.0.

store (Optional[bool]) –

If exceptions should be stored or raised. If set to True, all exceptions encountered will be stored in a returned dictionary as a load status. If set to False, if any exceptions are encountered they will be raised and the bot will be closed. If no exceptions are encountered, a list of loaded extension names will be returned. Defaults to False.

New in version 2.0.

RETURNS:
If the store parameter is set to True, a dictionary will be returned that contains keys to represent the loaded extension names. The values bound to each key can either be an exception that occurred when loading that extension or a True boolean representing a successful load. If the store parameter is set to False, either a list containing a list of loaded extensions or nothing due to an encountered exception.

RETURN TYPE:
Optional[Union[Dict[str, Union[errors.ExtensionError, bool]], List[str]]]

RAISES:
ExtensionNotFound – The extension could not be imported. This is also raised if the name of the extension could not be resolved using the provided package parameter.

ExtensionAlreadyLoaded – The extension is already loaded.

NoEntryPointError – The extension does not have a setup function.

ExtensionFailed – The extension or its setup function had an execution error.

load_extensions(*names, package=None, recursive=False, store=False)
Loads multiple extensions at once.

This method simplifies the process of loading multiple extensions by handling the looping of load_extension.

PARAMETERS:
names (str) – The extension or folder names to load. It must be dot separated like regular Python imports if accessing a submodule. e.g. foo.test if you want to import foo/test.py.

package (Optional[str]) –

The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g .foo.test. Defaults to None.

New in version 1.7.

recursive (Optional[bool]) –

If subdirectories under the given head directory should be recursively loaded. Defaults to False.

New in version 2.0.

store (Optional[bool]) –

If exceptions should be stored or raised. If set to True, all exceptions encountered will be stored in a returned dictionary as a load status. If set to False, if any exceptions are encountered they will be raised and the bot will be closed. If no exceptions are encountered, a list of loaded extension names will be returned. Defaults to False.

New in version 2.0.

RETURNS:
If the store parameter is set to True, a dictionary will be returned that contains keys to represent the loaded extension names. The values bound to each key can either be an exception that occurred when loading that extension or a True boolean representing a successful load. If the store parameter is set to False, either a list containing names of loaded extensions or nothing due to an encountered exception.

RETURN TYPE:
Optional[Union[Dict[str, Union[errors.ExtensionError, bool]], List[str]]]

RAISES:
ExtensionNotFound – A given extension could not be imported. This is also raised if the name of the extension could not be resolved using the provided package parameter.

ExtensionAlreadyLoaded – A given extension is already loaded.

NoEntryPointError – A given extension does not have a setup function.

ExtensionFailed – A given extension or its setup function had an execution error.

await login(token)
This function is a coroutine.

Logs in the client with the specified credentials.

PARAMETERS:
token (str) – The authentication token. Do not prefix this token with anything as the library will do it for you.

RAISES:
TypeError – The token was in invalid type.

LoginFailure – The wrong credentials are passed.

HTTPException – An unknown HTTP related error occurred, usually when it isn’t 200 or the known incorrect credentials passing status code.

RETURN TYPE:
None

message_command(**kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_application_command(). This shortcut is made specifically for MessageCommand.

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a MessageCommand, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, MessageCommand]

await on_application_command_error(context, exception)
This function is a coroutine.

The default command error handler provided by the bot.

By default, this prints to sys.stderr however it could be overridden to have a different implementation.

This only fires if you do not specify any listeners for command error.

PARAMETERS:
context (ApplicationContext) –

exception (DiscordException) –

RETURN TYPE:
None

await on_command_error(context, exception)
This function is a coroutine.

The default command error handler provided by the bot.

By default, this prints to sys.stderr however it could be overridden to have a different implementation.

This only fires if you do not specify any listeners for command error.

PARAMETERS:
context (Context) –

exception (CommandError) –

RETURN TYPE:
None

await on_error(event_method, *args, **kwargs)
This function is a coroutine.

The default error handler provided by the client.

By default, this prints to sys.stderr however it could be overridden to have a different implementation. Check on_error() for more details.

PARAMETERS:
event_method (str) –

args (Any) –

kwargs (Any) –

RETURN TYPE:
None

property persistent_views
A sequence of persistent views added to the client.

New in version 2.0.

RETURN TYPE:
Sequence[View]

property private_channels
The private channels that the connected client is participating on.

Note

This returns only up to 128 most recent private channels due to an internal working on how Discord deals with private channels.

await process_application_commands(interaction, auto_sync=None)
This function is a coroutine.

This function processes the commands that have been registered to the bot and other groups. Without this coroutine, none of the commands will be triggered.

By default, this coroutine is called inside the on_interaction() event. If you choose to override the on_interaction() event, then you should invoke this coroutine as well.

This function finds a registered command matching the interaction id from application commands and invokes it. If no matching command was found, it replies to the interaction with a default message.

New in version 2.0.

PARAMETERS:
interaction (discord.Interaction) – The interaction to process

auto_sync (Optional[bool]) – Whether to automatically sync and unregister the command if it is not found in the internal cache. This will invoke the sync_commands() method on the context of the command, either globally or per-guild, based on the type of the command, respectively. Defaults to Bot.auto_sync_commands.

RETURN TYPE:
None

await process_commands(message)
This function is a coroutine.

This function processes the commands that have been registered to the bot and other groups. Without this coroutine, none of the commands will be triggered.

By default, this coroutine is called inside the on_message() event. If you choose to override the on_message() event, then you should invoke this coroutine as well.

This is built using other low level tools, and is equivalent to a call to get_context() followed by a call to invoke().

This also checks if the message’s author is a bot and doesn’t call get_context() or invoke() if so.

PARAMETERS:
message (discord.Message) – The message to process commands for.

RETURN TYPE:
None

await register_command(command, force=True, guild_ids=None)
This function is a coroutine.

Registers a command. If the command has guild_ids set, or if the guild_ids parameter is passed, the command will be registered as a guild command for those guilds.

PARAMETERS:
command (ApplicationCommand) – The command to register.

force (bool) – Whether to force the command to be registered. If this is set to False, the command will only be registered if it seems to already be registered and up to date with our internal cache. Defaults to True.

guild_ids (list) – A list of guild ids to register the command for. If this is not set, the command’s ApplicationCommand.guild_ids attribute will be used.

RETURNS:
The command that was registered

RETURN TYPE:
ApplicationCommand

await register_commands(commands=None, guild_id=None, method='bulk', force=False, delete_existing=True)
This function is a coroutine.

Register a list of commands.

New in version 2.0.

PARAMETERS:
commands (Optional[List[ApplicationCommand]]) – A list of commands to register. If this is not set (None), then all commands will be registered.

guild_id (Optional[int]) – If this is set, the commands will be registered as a guild command for the respective guild. If it is not set, the commands will be registered according to their ApplicationCommand.guild_ids attribute.

method (Literal['individual', 'bulk', 'auto']) – The method to use when registering the commands. If this is set to “individual”, then each command will be registered individually. If this is set to “bulk”, then all commands will be registered in bulk. If this is set to “auto”, then the method will be determined automatically. Defaults to “bulk”.

force (bool) – Registers the commands regardless of the state of the command on Discord. This uses one less API call, but can result in hitting rate limits more often. Defaults to False.

delete_existing (bool) – Whether to delete existing commands that are not in the list of commands to register. Defaults to True.

reload_extension(name, *, package=None)
Atomically reloads an extension.

This replaces the extension with the same extension, only refreshed. This is equivalent to a unload_extension() followed by a load_extension() except done in an atomic way. That is, if an operation fails mid-reload then the bot will roll back to the prior working state.

PARAMETERS:
name (str) – The extension name to reload. It must be dot separated like regular Python imports if accessing a submodule. e.g. foo.test if you want to import foo/test.py.

package (Optional[str]) –

The package name to resolve relative imports with. This is required when reloading an extension using a relative path, e.g .foo.test. Defaults to None.

New in version 1.7.

RAISES:
ExtensionNotLoaded – The extension was not loaded.

ExtensionNotFound – The extension could not be imported. This is also raised if the name of the extension could not be resolved using the provided package parameter.

NoEntryPointError – The extension does not have a setup function.

ExtensionFailed – The extension setup function had an execution error.

RETURN TYPE:
None

remove_application_command(command)
Remove a ApplicationCommand from the internal list of commands.

New in version 2.0.

PARAMETERS:
command (ApplicationCommand) – The command to remove.

RETURNS:
The command that was removed. If the name is not valid then None is returned instead.

RETURN TYPE:
Optional[ApplicationCommand]

remove_check(func, *, call_once=False)
Removes a global check from the bot. This function is idempotent and will not raise an exception if the function is not in the global checks.

PARAMETERS:
func – The function to remove from the global checks.

call_once (bool) – If the function was added with call_once=True in the Bot.add_check() call or using check_once().

RETURN TYPE:
None

remove_cog(name)
Removes a cog from the bot and returns it.

All registered commands and event listeners that the cog has registered will be removed as well.

If no cog is found then this method has no effect.

PARAMETERS:
name (str) – The name of the cog to remove.

RETURNS:
The cog that was removed. None if not found.

RETURN TYPE:
Optional[Cog]

remove_command(name)
Remove a Command from the internal list of commands.

This could also be used as a way to remove aliases.

PARAMETERS:
name (str) – The name of the command to remove.

RETURNS:
The command that was removed. If the name is not valid then None is returned instead.

RETURN TYPE:
Optional[Command]

remove_listener(func, name=...)
Removes a listener from the pool of listeners.

PARAMETERS:
func (Callable[..., Coroutine[Any, Any, Any]]) – The function that was used as a listener to remove.

name (str) – The name of the event we want to remove. Defaults to func.__name__.

RETURN TYPE:
None

run(*args, **kwargs)
A blocking call that abstracts away the event loop initialisation from you.

If you want more control over the event loop then this function should not be used. Use start() coroutine or connect() + login().

Roughly Equivalent to:

try:
    loop.run_until_complete(start(*args, **kwargs))
except KeyboardInterrupt:
    loop.run_until_complete(close())
    # cancel all tasks lingering
finally:
    loop.close()
Warning

This function must be the last function to call due to the fact that it is blocking. That means that registration of events or anything being called after this function call will not execute until it returns.

PARAMETERS:
args (Any) –

kwargs (Any) –

RETURN TYPE:
None

slash_command(**kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_application_command(). This shortcut is made specifically for SlashCommand.

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a SlashCommand, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, SlashCommand]

slash_group(name=None, description=None, guild_ids=None)
A shortcut decorator that initializes the provided subclass of SlashCommandGroup and adds it to the internal command list via add_application_command().

New in version 2.0.

PARAMETERS:
name (Optional[str]) – The name of the group to create. This will resolve to the name of the decorated class if None is passed.

description (Optional[str]) – The description of the group to create.

guild_ids (Optional[List[int]]) – A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if None is passed.

RETURNS:
The slash command group that was created.

RETURN TYPE:
Callable[[Type[SlashCommandGroup]], SlashCommandGroup]

await start(token, *, reconnect=True)
This function is a coroutine.

A shorthand coroutine for login() + connect().

RAISES:
TypeError – An unexpected keyword argument was received.

PARAMETERS:
token (str) –

reconnect (bool) –

RETURN TYPE:
None

property status
The status being used upon logging on to Discord.

RETURN TYPE:
Status

property stickers
The stickers that the connected client has.

New in version 2.0.

await sync_commands(commands=None, method='bulk', force=False, guild_ids=None, register_guild_commands=True, check_guilds=[], delete_existing=True)
This function is a coroutine.

Registers all commands that have been added through add_application_command(). This method cleans up all commands over the API and should sync them with the internal cache of commands. It attempts to register the commands in the most efficient way possible, unless force is set to True, in which case it will always register all commands.

By default, this coroutine is called inside the on_connect() event. If you choose to override the on_connect() event, then you should invoke this coroutine as well such as the follwing:

@bot.event
async def on_connect():
    if bot.auto_sync_commands:
        await bot.sync_commands()
    print(f"{bot.user.name} connected.")
Note

If you remove all guild commands from a particular guild, the library may not be able to detect and update the commands accordingly, as it would have to individually check for each guild. To force the library to unregister a guild’s commands, call this function with commands=[] and guild_ids=[guild_id].

New in version 2.0.

PARAMETERS:
commands (Optional[List[ApplicationCommand]]) – A list of commands to register. If this is not set (None), then all commands will be registered.

method (Literal['individual', 'bulk', 'auto']) – The method to use when registering the commands. If this is set to “individual”, then each command will be registered individually. If this is set to “bulk”, then all commands will be registered in bulk. If this is set to “auto”, then the method will be determined automatically. Defaults to “bulk”.

force (bool) – Registers the commands regardless of the state of the command on Discord. This uses one less API call, but can result in hitting rate limits more often. Defaults to False.

guild_ids (Optional[List[int]]) – A list of guild ids to register the commands for. If this is not set, the commands’ guild_ids attribute will be used.

register_guild_commands (bool) – Whether to register guild commands. Defaults to True.

check_guilds (Optional[List[int]]) – A list of guilds ids to check for commands to unregister, since the bot would otherwise have to check all guilds. Unlike guild_ids, this does not alter the commands’ guild_ids attribute, instead it adds the guild ids to a list of guilds to sync commands for. If register_guild_commands is set to False, then this parameter is ignored.

delete_existing (bool) – Whether to delete existing commands that are not in the list of commands to register. Defaults to True.

unload_extension(name, *, package=None)
Unloads an extension.

When the extension is unloaded, all commands, listeners, and cogs are removed from the bot and the module is un-imported.

The extension can provide an optional global function, teardown, to do miscellaneous clean-up if necessary. This function takes a single parameter, the bot, similar to setup from load_extension().

PARAMETERS:
name (str) – The extension name to unload. It must be dot separated like regular Python imports if accessing a submodule. e.g. foo.test if you want to import foo/test.py.

package (Optional[str]) –

The package name to resolve relative imports with. This is required when unloading an extension using a relative path, e.g .foo.test. Defaults to None.

New in version 1.7.

RAISES:
ExtensionNotFound – The name of the extension could not be resolved using the provided package parameter.

ExtensionNotLoaded – The extension was not loaded.

RETURN TYPE:
None

property user
Represents the connected client. None if not logged in.

RETURN TYPE:
ClientUser | None

user_command(**kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_application_command(). This shortcut is made specifically for UserCommand.

New in version 2.0.

RETURNS:
A decorator that converts the provided method into a UserCommand, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, UserCommand]

property users
Returns a list of all the users the bot can see.

property voice_clients
Represents a list of voice connections.

These are usually VoiceClient instances.

wait_for(event, *, check=None, timeout=None)
This function is a coroutine.

Waits for a WebSocket event to be dispatched.

This could be used to wait for a user to reply to a message, or to react to a message, or to edit a message in a self-contained way.

The timeout parameter is passed onto asyncio.wait_for(). By default, it does not timeout. Note that this does propagate the asyncio.TimeoutError for you in case of timeout and is provided for ease of use.

In case the event returns multiple arguments, a tuple containing those arguments is returned instead. Please check the documentation for a list of events and their parameters.

This function returns the first event that meets the requirements.

PARAMETERS:
event (str) – The event name, similar to the event reference, but without the on_ prefix, to wait for.

check (Optional[Callable[…, bool]]) – A predicate to check what to wait for. The arguments must meet the parameters of the event being waited for.

timeout (Optional[float]) – The number of seconds to wait before timing out and raising asyncio.TimeoutError.

RETURNS:
Returns no arguments, a single argument, or a tuple of multiple arguments that mirrors the parameters passed in the event reference.

RETURN TYPE:
Any

RAISES:
asyncio.TimeoutError – Raised if a timeout is provided and reached.

EXAMPLES

Waiting for a user reply:

@client.event
async def on_message(message):
    if message.content.startswith('$greet'):
        channel = message.channel
        await channel.send('Say hello!')

        def check(m):
            return m.content == 'hello' and m.channel == channel

        msg = await client.wait_for('message', check=check)
        await channel.send(f'Hello {msg.author}!')
Waiting for a thumbs up reaction from the message author:

@client.event
async def on_message(message):
    if message.content.startswith('$thumb'):
        channel = message.channel
        await channel.send('Send me that 👍 reaction, mate')

        def check(reaction, user):
            return user == message.author and str(reaction.emoji) == '👍'

        try:
            reaction, user = await client.wait_for('reaction_add', timeout=60.0, check=check)
        except asyncio.TimeoutError:
            await channel.send('👎')
        else:
            await channel.send('👍')
await wait_until_ready()
This function is a coroutine.

Waits until the client’s internal cache is all ready.

RETURN TYPE:
None

for ... in walk_application_commands()
An iterator that recursively walks through all application commands and subcommands.

YIELDS:
ApplicationCommand – An application command from the internal list of application commands.

RETURN TYPE:
Generator[ApplicationCommand, None, None]

for ... in walk_commands()
An iterator that recursively walks through all commands and subcommands.

Changed in version 1.4: Duplicates due to aliases are no longer returned

YIELDS:
Union[Command, Group] – A command or group from the internal list of commands.

RETURN TYPE:
Generator[Command[TypeVar(CogT, bound= Cog), Any, Any], None, None]

AutoShardedBot
class discord.ext.commands.AutoShardedBot(command_prefix=<function when_mentioned>, help_command=<default-help-command>, **options)[source]
This is similar to Bot except that it is inherited from discord.AutoShardedBot instead.

Prefix Helpers
discord.ext.commands.when_mentioned(bot, msg)[source]
A callable that implements a command prefix equivalent to being mentioned.

These are meant to be passed into the Bot.command_prefix attribute.

PARAMETERS:
bot (Bot | AutoShardedBot) –

msg (Message) –

RETURN TYPE:
list[str]

discord.ext.commands.when_mentioned_or(*prefixes)[source]
A callable that implements when mentioned or other prefixes provided.

These are meant to be passed into the Bot.command_prefix attribute.

See also

when_mentioned()

EXAMPLE

bot = commands.Bot(command_prefix=commands.when_mentioned_or('!'))
Note

This callable returns another callable, so if this is done inside a custom callable, you must call the returned callable, for example:

async def get_prefix(bot, message):
    extras = await prefixes_for(message.guild) # returns a list
    return commands.when_mentioned_or(*extras)(bot, message)
PARAMETERS:
prefixes (str) –

RETURN TYPE:
Callable[[Bot | AutoShardedBot, Message], list[str]]

Event Reference
These events function similar to the regular events, except they are custom to the command extension module.

discord.ext.commands.on_command_error(ctx, error)
An error handler that is called when an error is raised inside a command either through user input error, check failure, or an error in your own code.

A default one is provided (Bot.on_command_error()).

PARAMETERS:
ctx (Context) – The invocation context.

error (CommandError derived) – The error that was raised.

discord.ext.commands.on_command(ctx)
An event that is called when a command is found and is about to be invoked.

This event is called regardless of whether the command itself succeeds via error or completes.

PARAMETERS:
ctx (Context) – The invocation context.

discord.ext.commands.on_command_completion(ctx)
An event that is called when a command has completed its invocation.

This event is called only if the command succeeded, i.e. all checks have passed and the user input it correctly.

PARAMETERS:
ctx (Context) – The invocation context.

Commands
Decorators
@discord.ext.commands.command(name=..., cls=..., **attrs)[source]
A decorator that transforms a function into a Command or if called with group(), Group.

By default the help attribute is received automatically from the docstring of the function and is cleaned up with the use of inspect.cleandoc. If the docstring is bytes, then it is decoded into str using utf-8 encoding.

All checks added using the check() & co. decorators are added into the function. There is no way to supply your own checks through this decorator.

PARAMETERS:
name (str) – The name to create the command with. By default, this uses the function name unchanged.

cls – The class to construct with. By default, this is Command. You usually do not change this.

attrs – Keyword arguments to pass into the construction of the class denoted by cls.

RAISES:
TypeError – If the function is not a coroutine or is already a command.

@discord.ext.commands.group(name=..., cls=..., **attrs)[source]
A decorator that transforms a function into a Group.

This is similar to the command() decorator but the cls parameter is set to Group by default.

Changed in version 1.1: The cls parameter can now be passed.

Command
class discord.ext.commands.Command(func, **kwargs)[source]
Attributes
aliases
brief
callback
checks
clean_params
cog
cog_name
cooldown_after_parsing
description
enabled
extras
full_parent_name
help
hidden
ignore_extra
invoked_subcommand
name
parent
parents
qualified_name
require_var_positional
rest_is_raw
root_parent
short_doc
signature
usage
Methods
__call__
add_check
after_invoke
before_invoke
can_run
copy
error
get_cooldown_retry_after
has_error_handler
is_on_cooldown
remove_check
reset_cooldown
update
A class that implements the protocol for a bot text command.

These are not created manually, instead they are created via the decorator or functional interface.

name
The name of the command.

TYPE:
str

callback
The coroutine that is executed when the command is called.

TYPE:
coroutine

help
The long help text for the command.

TYPE:
Optional[str]

brief
The short help text for the command.

TYPE:
Optional[str]

usage
A replacement for arguments in the default help text.

TYPE:
Optional[str]

aliases
The list of aliases the command can be invoked under.

TYPE:
Union[List[str], Tuple[str]]

enabled
A boolean that indicates if the command is currently enabled. If the command is invoked while it is disabled, then DisabledCommand is raised to the on_command_error() event. Defaults to True.

TYPE:
bool

parent
The parent group that this command belongs to. None if there isn’t one.

TYPE:
Optional[Group]

cog
The cog that this command belongs to. None if there isn’t one.

TYPE:
Optional[Cog]

checks
A list of predicates that verifies if the command could be executed with the given Context as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from CommandError should be used. Note that if the checks fail then CheckFailure exception is raised to the on_command_error() event.

TYPE:
List[Callable[[Context], bool]]

description
The message prefixed into the default help command.

TYPE:
str

hidden
If True, the default help command does not show this in the help output.

TYPE:
bool

rest_is_raw
If False and a keyword-only argument is provided then the keyword only argument is stripped and handled as if it was a regular argument that handles MissingRequiredArgument and default values in a regular matter rather than passing the rest completely raw. If True then the keyword-only argument will pass in the rest of the arguments in a completely raw matter. Defaults to False.

TYPE:
bool

invoked_subcommand
The subcommand that was invoked, if any.

TYPE:
Optional[Command]

require_var_positional
If True and a variadic positional argument is specified, requires the user to specify at least one argument. Defaults to False.

New in version 1.5.

TYPE:
bool

ignore_extra
If True, ignores extraneous strings passed to a command if all its requirements are met (e.g. ?foo a b c when only expecting a and b). Otherwise on_command_error() and local error handlers are called with TooManyArguments. Defaults to True.

TYPE:
bool

cooldown_after_parsing
If True, cooldown processing is done after argument parsing, which calls converters. If False then cooldown processing is done first and then the converters are called second. Defaults to False.

TYPE:
bool

extras
A dict of user provided extras to attach to the Command.

Note

This object may be copied by the library.

TYPE:
dict

New in version 2.0.

cooldown: Optional[Cooldown]
The cooldown applied when the command is invoked. None if the command doesn’t have a cooldown.

New in version 2.0.

PARAMETERS:
func (Callable[Concatenate[CogT, ContextT, P], Coro[T]] | Callable[Concatenate[ContextT, P], Coro[T]]) –

kwargs (Any) –

@after_invoke(coro)[source]
A decorator that registers a coroutine as a post-invoke hook.

A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required.

This post-invoke hook takes a sole parameter, a Context.

See Bot.after_invoke() for more info.

PARAMETERS:
coro (coroutine) – The coroutine to register as the post-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

RETURN TYPE:
TypeVar(HookT, bound= Hook)

@before_invoke(coro)[source]
A decorator that registers a coroutine as a pre-invoke hook.

A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required.

This pre-invoke hook takes a sole parameter, a Context.

See Bot.before_invoke() for more info.

PARAMETERS:
coro (coroutine) – The coroutine to register as the pre-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

RETURN TYPE:
TypeVar(HookT, bound= Hook)

@error(coro)[source]
A decorator that registers a coroutine as a local error handler.

A local error handler is an on_command_error() event limited to a single command. However, the on_command_error() is still invoked afterwards as the catch-all.

PARAMETERS:
coro (coroutine) – The coroutine to register as the local error handler.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

RETURN TYPE:
TypeVar(ErrorT, bound= Error)

add_check(func)[source]
Adds a check to the command.

This is the non-decorator interface to check().

New in version 1.3.

PARAMETERS:
func (Union[Callable[[Cog, Context[Any]], Union[bool, Coroutine[Any, Any, bool]]], Callable[[Context[Any]], Union[bool, Coroutine[Any, Any, bool]]]]) – The function that will be used as a check.

RETURN TYPE:
None

remove_check(func)[source]
Removes a check from the command.

This function is idempotent and will not raise an exception if the function is not in the command’s checks.

New in version 1.3.

PARAMETERS:
func (Union[Callable[[Cog, Context[Any]], Union[bool, Coroutine[Any, Any, bool]]], Callable[[Context[Any]], Union[bool, Coroutine[Any, Any, bool]]]]) – The function to remove from the checks.

RETURN TYPE:
None

update(**kwargs)[source]
Updates Command instance with updated attribute.

This works similarly to the command() decorator in terms of parameters in that they are passed to the Command or subclass constructors, sans the name and callback.

PARAMETERS:
kwargs (Any) –

RETURN TYPE:
None

await __call__(context, *args, **kwargs)[source]
This function is a coroutine.

Calls the internal callback that the command holds.

Note

This bypasses all mechanisms – including checks, converters, invoke hooks, cooldowns, etc. You must take care to pass the proper arguments and types to this function.

New in version 1.3.

copy()[source]
Creates a copy of this command.

RETURNS:
A new instance of this command.

RETURN TYPE:
Command

PARAMETERS:
self (TypeVar(CommandT, bound= Command)) –

property clean_params
Dict[str, inspect.Parameter]: Retrieves the parameter dictionary without the context or self parameters.

Useful for inspecting signature.

property full_parent_name
Retrieves the fully qualified parent command name.

This the base command name required to execute it. For example, in ?one two three the parent name would be one two.

RETURN TYPE:
str

property parents
Retrieves the parents of this command.

If the command has no parents then it returns an empty list.

For example in commands ?a b c test, the parents are [c, b, a].

New in version 1.1.

property root_parent
Retrieves the root parent of this command.

If the command has no parents then it returns None.

For example in commands ?a b c test, the root parent is a.

RETURN TYPE:
Group | None

property qualified_name
Retrieves the fully qualified command name.

This is the full parent name with the command name as well. For example, in ?one two three the qualified name would be one two three.

RETURN TYPE:
str

is_on_cooldown(ctx)[source]
Checks whether the command is currently on cooldown.

PARAMETERS:
ctx (Context) – The invocation context to use when checking the command’s cooldown status.

RETURNS:
A boolean indicating if the command is on cooldown.

RETURN TYPE:
bool

reset_cooldown(ctx)[source]
Resets the cooldown on this command.

PARAMETERS:
ctx (Context) – The invocation context to reset the cooldown under.

RETURN TYPE:
None

get_cooldown_retry_after(ctx)[source]
Retrieves the amount of seconds before this command can be tried again.

New in version 1.4.

PARAMETERS:
ctx (Context) – The invocation context to retrieve the cooldown from.

RETURNS:
The amount of time left on this command’s cooldown in seconds. If this is 0.0 then the command isn’t on cooldown.

RETURN TYPE:
float

has_error_handler()[source]
Checks whether the command has an error handler registered.

New in version 1.7.

RETURN TYPE:
bool

property cog_name
The name of the cog this command belongs to, if any.

RETURN TYPE:
str | None

property short_doc
Gets the “short” documentation of a command.

By default, this is the brief attribute. If that lookup leads to an empty string then the first line of the help attribute is used instead.

RETURN TYPE:
str

property signature
Returns a POSIX-like signature useful for help command output.

RETURN TYPE:
str

await can_run(ctx)[source]
This function is a coroutine.

Checks if the command can be executed by checking all the predicates inside the checks attribute. This also checks whether the command is disabled.

Changed in version 1.3: Checks whether the command is disabled or not

PARAMETERS:
ctx (Context) – The ctx of the command currently being invoked.

RETURNS:
A boolean indicating if the command can be invoked.

RETURN TYPE:
bool

RAISES:
CommandError – Any command error that was raised during a check call will be propagated by this function.

Group
class discord.ext.commands.Group(*args, **attrs)[source]
Attributes
case_insensitive
clean_params
cog_name
commands
full_parent_name
invoke_without_command
parents
qualified_name
root_parent
short_doc
signature
Methods
add_check
add_command
after_invoke
before_invoke
can_run
command
copy
error
get_command
get_cooldown_retry_after
group
has_error_handler
is_on_cooldown
remove_check
remove_command
reset_cooldown
update
walk_commands
A class that implements a grouping protocol for commands to be executed as subcommands.

This class is a subclass of Command and thus all options valid in Command are valid in here as well.

invoke_without_command
Indicates if the group callback should begin parsing and invocation only if no subcommand was found. Useful for making it an error handling function to tell the user that no subcommand was found or to have different functionality in case no subcommand was found. If this is False, then the group callback will always be invoked first. This means that the checks and the parsing dictated by its parameters will be executed. Defaults to False.

TYPE:
bool

case_insensitive
Indicates if the group’s commands should be case-insensitive. Defaults to False.

TYPE:
bool

PARAMETERS:
args (Any) –

attrs (Any) –

@after_invoke(coro)
A decorator that registers a coroutine as a post-invoke hook.

A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required.

This post-invoke hook takes a sole parameter, a Context.

See Bot.after_invoke() for more info.

PARAMETERS:
coro (coroutine) – The coroutine to register as the post-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

RETURN TYPE:
TypeVar(HookT, bound= Hook)

@before_invoke(coro)
A decorator that registers a coroutine as a pre-invoke hook.

A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required.

This pre-invoke hook takes a sole parameter, a Context.

See Bot.before_invoke() for more info.

PARAMETERS:
coro (coroutine) – The coroutine to register as the pre-invoke hook.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

RETURN TYPE:
TypeVar(HookT, bound= Hook)

@command(*args, **kwargs)
A shortcut decorator that invokes command() and adds it to the internal command list via add_command().

RETURNS:
A decorator that converts the provided method into a Command, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, Command]

@error(coro)
A decorator that registers a coroutine as a local error handler.

A local error handler is an on_command_error() event limited to a single command. However, the on_command_error() is still invoked afterwards as the catch-all.

PARAMETERS:
coro (coroutine) – The coroutine to register as the local error handler.

RAISES:
TypeError – The coroutine passed is not actually a coroutine.

RETURN TYPE:
TypeVar(ErrorT, bound= Error)

@group(*args, **kwargs)
A shortcut decorator that invokes group() and adds it to the internal command list via add_command().

RETURNS:
A decorator that converts the provided method into a Group, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, Group]

copy()[source]
Creates a copy of this Group.

RETURNS:
A new instance of this group.

RETURN TYPE:
Group

PARAMETERS:
self (TypeVar(GroupT, bound= Group)) –

add_check(func)
Adds a check to the command.

This is the non-decorator interface to check().

New in version 1.3.

PARAMETERS:
func (Union[Callable[[Cog, Context[Any]], Union[bool, Coroutine[Any, Any, bool]]], Callable[[Context[Any]], Union[bool, Coroutine[Any, Any, bool]]]]) – The function that will be used as a check.

RETURN TYPE:
None

add_command(command)
Adds a Command into the internal list of commands.

This is usually not called, instead the command() or group() shortcut decorators are used instead.

Changed in version 1.4: Raise CommandRegistrationError instead of generic ClientException

PARAMETERS:
command (Command) – The command to add.

RAISES:
.CommandRegistrationError – If the command or its alias is already registered by different command.

TypeError – If the command passed is not a subclass of Command.

RETURN TYPE:
None

await can_run(ctx)
This function is a coroutine.

Checks if the command can be executed by checking all the predicates inside the checks attribute. This also checks whether the command is disabled.

Changed in version 1.3: Checks whether the command is disabled or not

PARAMETERS:
ctx (Context) – The ctx of the command currently being invoked.

RETURNS:
A boolean indicating if the command can be invoked.

RETURN TYPE:
bool

RAISES:
CommandError – Any command error that was raised during a check call will be propagated by this function.

property clean_params
Dict[str, inspect.Parameter]: Retrieves the parameter dictionary without the context or self parameters.

Useful for inspecting signature.

property cog_name
The name of the cog this command belongs to, if any.

RETURN TYPE:
str | None

property commands
A unique set of commands without aliases that are registered.

property full_parent_name
Retrieves the fully qualified parent command name.

This the base command name required to execute it. For example, in ?one two three the parent name would be one two.

RETURN TYPE:
str

get_command(name)
Get a Command from the internal list of commands.

This could also be used as a way to get aliases.

The name could be fully qualified (e.g. 'foo bar') will get the subcommand bar of the group command foo. If a subcommand is not found then None is returned just as usual.

PARAMETERS:
name (str) – The name of the command to get.

RETURNS:
The command that was requested. If not found, returns None.

RETURN TYPE:
Optional[Command]

get_cooldown_retry_after(ctx)
Retrieves the amount of seconds before this command can be tried again.

New in version 1.4.

PARAMETERS:
ctx (Context) – The invocation context to retrieve the cooldown from.

RETURNS:
The amount of time left on this command’s cooldown in seconds. If this is 0.0 then the command isn’t on cooldown.

RETURN TYPE:
float

has_error_handler()
Checks whether the command has an error handler registered.

New in version 1.7.

RETURN TYPE:
bool

is_on_cooldown(ctx)
Checks whether the command is currently on cooldown.

PARAMETERS:
ctx (Context) – The invocation context to use when checking the command’s cooldown status.

RETURNS:
A boolean indicating if the command is on cooldown.

RETURN TYPE:
bool

property parents
Retrieves the parents of this command.

If the command has no parents then it returns an empty list.

For example in commands ?a b c test, the parents are [c, b, a].

New in version 1.1.

property qualified_name
Retrieves the fully qualified command name.

This is the full parent name with the command name as well. For example, in ?one two three the qualified name would be one two three.

RETURN TYPE:
str

remove_check(func)
Removes a check from the command.

This function is idempotent and will not raise an exception if the function is not in the command’s checks.

New in version 1.3.

PARAMETERS:
func (Union[Callable[[Cog, Context[Any]], Union[bool, Coroutine[Any, Any, bool]]], Callable[[Context[Any]], Union[bool, Coroutine[Any, Any, bool]]]]) – The function to remove from the checks.

RETURN TYPE:
None

remove_command(name)
Remove a Command from the internal list of commands.

This could also be used as a way to remove aliases.

PARAMETERS:
name (str) – The name of the command to remove.

RETURNS:
The command that was removed. If the name is not valid then None is returned instead.

RETURN TYPE:
Optional[Command]

reset_cooldown(ctx)
Resets the cooldown on this command.

PARAMETERS:
ctx (Context) – The invocation context to reset the cooldown under.

RETURN TYPE:
None

property root_parent
Retrieves the root parent of this command.

If the command has no parents then it returns None.

For example in commands ?a b c test, the root parent is a.

RETURN TYPE:
Group | None

property short_doc
Gets the “short” documentation of a command.

By default, this is the brief attribute. If that lookup leads to an empty string then the first line of the help attribute is used instead.

RETURN TYPE:
str

property signature
Returns a POSIX-like signature useful for help command output.

RETURN TYPE:
str

update(**kwargs)
Updates Command instance with updated attribute.

This works similarly to the command() decorator in terms of parameters in that they are passed to the Command or subclass constructors, sans the name and callback.

PARAMETERS:
kwargs (Any) –

RETURN TYPE:
None

for ... in walk_commands()
An iterator that recursively walks through all commands and subcommands.

Changed in version 1.4: Duplicates due to aliases are no longer returned

YIELDS:
Union[Command, Group] – A command or group from the internal list of commands.

RETURN TYPE:
Generator[Command[TypeVar(CogT, bound= Cog), Any, Any], None, None]

GroupMixin
class discord.ext.commands.GroupMixin(*args, **kwargs)[source]
Attributes
all_commands
case_insensitive
commands
Methods
add_command
command
get_command
group
remove_command
walk_commands
A mixin that implements common functionality for classes that behave similar to Group and are allowed to register commands.

all_commands
A mapping of command name to Command objects.

TYPE:
dict

case_insensitive
Whether the commands should be case-insensitive. Defaults to False.

TYPE:
bool

PARAMETERS:
args (Any) –

kwargs (Any) –

@command(*args, **kwargs)[source]
A shortcut decorator that invokes command() and adds it to the internal command list via add_command().

RETURNS:
A decorator that converts the provided method into a Command, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, Command]

@group(*args, **kwargs)[source]
A shortcut decorator that invokes group() and adds it to the internal command list via add_command().

RETURNS:
A decorator that converts the provided method into a Group, adds it to the bot, then returns it.

RETURN TYPE:
Callable[…, Group]

property commands
A unique set of commands without aliases that are registered.

add_command(command)[source]
Adds a Command into the internal list of commands.

This is usually not called, instead the command() or group() shortcut decorators are used instead.

Changed in version 1.4: Raise CommandRegistrationError instead of generic ClientException

PARAMETERS:
command (Command) – The command to add.

RAISES:
.CommandRegistrationError – If the command or its alias is already registered by different command.

TypeError – If the command passed is not a subclass of Command.

RETURN TYPE:
None

remove_command(name)[source]
Remove a Command from the internal list of commands.

This could also be used as a way to remove aliases.

PARAMETERS:
name (str) – The name of the command to remove.

RETURNS:
The command that was removed. If the name is not valid then None is returned instead.

RETURN TYPE:
Optional[Command]

for ... in walk_commands()[source]
An iterator that recursively walks through all commands and subcommands.

Changed in version 1.4: Duplicates due to aliases are no longer returned

YIELDS:
Union[Command, Group] – A command or group from the internal list of commands.

RETURN TYPE:
Generator[Command[TypeVar(CogT, bound= Cog), Any, Any], None, None]

get_command(name)[source]
Get a Command from the internal list of commands.

This could also be used as a way to get aliases.

The name could be fully qualified (e.g. 'foo bar') will get the subcommand bar of the group command foo. If a subcommand is not found then None is returned just as usual.

PARAMETERS:
name (str) – The name of the command to get.

RETURNS:
The command that was requested. If not found, returns None.

RETURN TYPE:
Optional[Command]

Cogs
Cog
class discord.ext.commands.Cog(*args, **kwargs)[source]
Methods
get_commands
walk_commands
for ... in walk_commands()[source]
An iterator that recursively walks through this cog’s commands and subcommands.

YIELDS:
Union[Command, Group] – A command or group from the cog.

RETURN TYPE:
Generator[Command, None, None]

get_commands()[source]
RETURNS:
A list of commands that are defined inside this cog.

Note

This does not include subcommands.

RETURN TYPE:
List[Union[ApplicationCommand, Command]]

CogMeta
class discord.cog.CogMeta(*args, **kwargs)[source]
Attributes
command_attrs
description
guild_ids
name
A metaclass for defining a cog.

Note that you should probably not use this directly. It is exposed purely for documentation purposes along with making custom metaclasses to intermix with other metaclasses such as the abc.ABCMeta metaclass.

For example, to create an abstract cog mixin class, the following would be done.

import abc

class CogABCMeta(discord.CogMeta, abc.ABCMeta):
    pass

class SomeMixin(metaclass=abc.ABCMeta):
    pass

class SomeCogMixin(SomeMixin, discord.Cog, metaclass=CogABCMeta):
    pass
Note

When passing an attribute of a metaclass that is documented below, note that you must pass it as a keyword-only argument to the class creation like the following example:

class MyCog(discord.Cog, name='My Cog'):
    pass
name
The cog name. By default, it is the name of the class with no modification.

TYPE:
str

description
The cog description. By default, it is the cleaned docstring of the class.

New in version 1.6.

TYPE:
str

command_attrs
A list of attributes to apply to every command inside this cog. The dictionary is passed into the Command options at __init__. If you specify attributes inside the command attribute in the class, it will override the one specified inside this attribute. For example:

class MyCog(discord.Cog, command_attrs=dict(hidden=True)):
    @discord.slash_command()
    async def foo(self, ctx):
        pass # hidden -> True

    @discord.slash_command(hidden=False)
    async def bar(self, ctx):
        pass # hidden -> False
TYPE:
dict

guild_ids
A shortcut to command_attrs, what guild_ids should all application commands have in the cog. You can override this by setting guild_ids per command.

New in version 2.0.

TYPE:
Optional[List[int]]

PARAMETERS:
args (Any) –

kwargs (Any) –

Help Commands
HelpCommand
class discord.ext.commands.HelpCommand(*args, **kwargs)[source]
Attributes
cog
command_attrs
context
invoked_with
show_hidden
verify_checks
Methods
add_check
command_callback
command_not_found
filter_commands
get_bot_mapping
get_command_signature
get_destination
get_max_size
on_help_command_error
prepare_help_command
remove_check
remove_mentions
send_bot_help
send_cog_help
send_command_help
send_error_message
send_group_help
subcommand_not_found
The base implementation for help command formatting.

Note

Internally instances of this class are deep copied every time the command itself is invoked to prevent a race condition mentioned in GH-2123.

This means that relying on the state of this class to be the same between command invocations would not work as expected.

context
The context that invoked this help formatter. This is generally set after the help command assigned, command_callback(), has been called.

TYPE:
Optional[Context]

show_hidden
Specifies if hidden commands should be shown in the output. Defaults to False.

TYPE:
bool

verify_checks
Specifies if commands should have their Command.checks called and verified. If True, always calls Command.checks. If None, only calls Command.checks in a guild setting. If False, never calls Command.checks. Defaults to True.

Changed in version 1.7.

TYPE:
Optional[bool]

command_attrs
A dictionary of options to pass in for the construction of the help command. This allows you to change the command behaviour without actually changing the implementation of the command. The attributes will be the same as the ones passed in the Command constructor.

TYPE:
dict

add_check(func)[source]
Adds a check to the help command.

New in version 1.4.

PARAMETERS:
func – The function that will be used as a check.

remove_check(func)[source]
Removes a check from the help command.

This function is idempotent and will not raise an exception if the function is not in the command’s checks.

New in version 1.4.

PARAMETERS:
func – The function to remove from the checks.

get_bot_mapping()[source]
Retrieves the bot mapping passed to send_bot_help().

property invoked_with
Similar to Context.invoked_with except properly handles the case where Context.send_help() is used.

If the help command was used regularly then this returns the Context.invoked_with attribute. Otherwise, if the help command was called using Context.send_help() then it returns the internal command name of the help command.

RETURNS:
The command name that triggered this invocation.

RETURN TYPE:
str

get_command_signature(command)[source]
Retrieves the signature portion of the help page.

PARAMETERS:
command (Command) – The command to get the signature of.

RETURNS:
The signature for the command.

RETURN TYPE:
str

remove_mentions(string)[source]
Removes mentions from the string to prevent abuse.

This includes @everyone, @here, member mentions and role mentions.

RETURNS:
The string with mentions removed.

RETURN TYPE:
str

property cog
A property for retrieving or setting the cog for the help command.

When a cog is set for the help command, it is as-if the help command belongs to that cog. All cog special methods will apply to the help command, and it will be automatically unset on unload.

To unbind the cog from the help command, you can set it to None.

RETURNS:
The cog that is currently set for the help command.

RETURN TYPE:
Optional[Cog]

command_not_found(string)[source]
This function could be a coroutine.

A method called when a command is not found in the help command. This is useful to override for i18n.

Defaults to No command called {0} found.

PARAMETERS:
string (str) – The string that contains the invalid command. Note that this has had mentions removed to prevent abuse.

RETURNS:
The string to use when a command has not been found.

RETURN TYPE:
str

subcommand_not_found(command, string)[source]
This function could be a coroutine.

A method called when a command did not have a subcommand requested in the help command. This is useful to override for i18n.

Defaults to either:

'Command "{command.qualified_name}" has no subcommands.'
If there is no subcommand in the command parameter.

'Command "{command.qualified_name}" has no subcommand named {string}'
If the command parameter has subcommands but not one named string.

PARAMETERS:
command (Command) – The command that did not have the subcommand requested.

string (str) – The string that contains the invalid subcommand. Note that this has had mentions removed to prevent abuse.

RETURNS:
The string to use when the command did not have the subcommand requested.

RETURN TYPE:
str

await filter_commands(commands, *, sort=False, key=None)[source]
This function is a coroutine.

Returns a filtered list of commands and optionally sorts them.

This takes into account the verify_checks and show_hidden attributes.

PARAMETERS:
commands (Iterable[Command]) – An iterable of commands that are getting filtered.

sort (bool) – Whether to sort the result.

key (Optional[Callable[Command, Any]]) – An optional key function to pass to sorted() that takes a Command as its sole parameter. If sort is passed as True then this will default as the command name.

RETURNS:
A list of commands that passed the filter.

RETURN TYPE:
List[Command]

get_max_size(commands)[source]
Returns the largest name length of the specified command list.

PARAMETERS:
commands (Sequence[Command]) – A sequence of commands to check for the largest size.

RETURNS:
The maximum width of the commands.

RETURN TYPE:
int

get_destination()[source]
Returns the Messageable where the help command will be output.

You can override this method to customise the behaviour.

By default, this returns the context’s channel.

RETURNS:
The destination where the help command will be output.

RETURN TYPE:
abc.Messageable

await send_error_message(error)[source]
This function is a coroutine.

Handles the implementation when an error happens in the help command. For example, the result of command_not_found() will be passed here.

You can override this method to customise the behaviour.

By default, this sends the error message to the destination specified by get_destination().

Note

You can access the invocation context with HelpCommand.context.

PARAMETERS:
error (str) – The error message to display to the user. Note that this has had mentions removed to prevent abuse.

await on_help_command_error(ctx, error)[source]
This function is a coroutine.

The help command’s error handler, as specified by Error Handling.

Useful to override if you need some specific behaviour when the error handler is called.

By default, this method does nothing and just propagates to the default error handlers.

PARAMETERS:
ctx (Context) – The invocation context.

error (CommandError) – The error that was raised.

await send_bot_help(mapping)[source]
This function is a coroutine.

Handles the implementation of the bot command page in the help command. This function is called when the help command is called with no arguments.

It should be noted that this method does not return anything – rather the actual message sending should be done inside this method. Well-behaved subclasses should use get_destination() to know where to send, as this is a customisation point for other users.

You can override this method to customise the behaviour.

Note

You can access the invocation context with HelpCommand.context.

Also, the commands in the mapping are not filtered. To do the filtering you will have to call filter_commands() yourself.

PARAMETERS:
mapping (Mapping[Optional[Cog], List[Command]]) – A mapping of cogs to commands that have been requested by the user for help. The key of the mapping is the Cog that the command belongs to, or None if there isn’t one, and the value is a list of commands that belongs to that cog.

await send_cog_help(cog)[source]
This function is a coroutine.

Handles the implementation of the cog page in the help command. This function is called when the help command is called with a cog as the argument.

It should be noted that this method does not return anything – rather the actual message sending should be done inside this method. Well-behaved subclasses should use get_destination() to know where to send, as this is a customisation point for other users.

You can override this method to customise the behaviour.

Note

You can access the invocation context with HelpCommand.context.

To get the commands that belong to this cog see Cog.get_commands(). The commands returned not filtered. To do the filtering you will have to call filter_commands() yourself.

PARAMETERS:
cog (Cog) – The cog that was requested for help.

await send_group_help(group)[source]
This function is a coroutine.

Handles the implementation of the group page in the help command. This function is called when the help command is called with a group as the argument.

It should be noted that this method does not return anything – rather the actual message sending should be done inside this method. Well-behaved subclasses should use get_destination() to know where to send, as this is a customisation point for other users.

You can override this method to customise the behaviour.

Note

You can access the invocation context with HelpCommand.context.

To get the commands that belong to this group without aliases see Group.commands. The commands returned not filtered. To do the filtering you will have to call filter_commands() yourself.

PARAMETERS:
group (Group) – The group that was requested for help.

await send_command_help(command)[source]
This function is a coroutine.

Handles the implementation of the single command page in the help command.

It should be noted that this method does not return anything – rather the actual message sending should be done inside this method. Well-behaved subclasses should use get_destination() to know where to send, as this is a customisation point for other users.

You can override this method to customise the behaviour.

Note

You can access the invocation context with HelpCommand.context.

Showing Help

There are certain attributes and methods that are helpful for a help command to show such as the following:

Command.help

Command.brief

Command.short_doc

Command.description

get_command_signature()

There are more than just these attributes but feel free to play around with these to help you get started to get the output that you want.

PARAMETERS:
command (Command) – The command that was requested for help.

await prepare_help_command(ctx, command=None)[source]
This function is a coroutine.

A low level method that can be used to prepare the help command before it does anything. For example, if you need to prepare some state in your subclass before the command does its processing then this would be the place to do it.

The default implementation does nothing.

Note

This is called inside the help command callback body. So all the usual rules that happen inside apply here as well.

PARAMETERS:
ctx (Context) – The invocation context.

command (Optional[str]) – The argument passed to the help command.

await command_callback(ctx, *, command=None)[source]
This function is a coroutine.

The actual implementation of the help command.

It is not recommended to override this method and instead change the behaviour through the methods that actually get dispatched.

send_bot_help()

send_cog_help()

send_group_help()

send_command_help()

get_destination()

command_not_found()

subcommand_not_found()

send_error_message()

on_help_command_error()

prepare_help_command()

DefaultHelpCommand
class discord.ext.commands.DefaultHelpCommand(*args, **kwargs)[source]
Attributes
commands_heading
dm_help
dm_help_threshold
indent
no_category
paginator
sort_commands
width
Methods
add_command_formatting
add_indented_commands
get_destination
get_ending_note
send_pages
shorten_text
The implementation of the default help command.

This inherits from HelpCommand.

It extends it with the following attributes.

width
The maximum number of characters that fit in a line. Defaults to 80.

TYPE:
int

sort_commands
Whether to sort the commands in the output alphabetically. Defaults to True.

TYPE:
bool

dm_help
A tribool that indicates if the help command should DM the user instead of sending it to the channel it received it from. If the boolean is set to True, then all help output is DM’d. If False, none of the help output is DM’d. If None, then the bot will only DM when the help message becomes too long (dictated by more than dm_help_threshold characters). Defaults to False.

TYPE:
Optional[bool]

dm_help_threshold
The number of characters the paginator must accumulate before getting DM’d to the user if dm_help is set to None. Defaults to 1000.

TYPE:
Optional[int]

indent
How much to indent the commands from a heading. Defaults to 2.

TYPE:
int

commands_heading
The command list’s heading string used when the help command is invoked with a category name. Useful for i18n. Defaults to "Commands:"

TYPE:
str

no_category
The string used when there is a command which does not belong to any category(cog). Useful for i18n. Defaults to "No Category"

TYPE:
str

paginator
The paginator used to paginate the help command output.

TYPE:
Paginator

shorten_text(text)[source]
Shortens text to fit into the width.

PARAMETERS:
text (str) –

RETURN TYPE:
str

get_ending_note()[source]
Returns help command’s ending note. This is mainly useful to override for i18n purposes.

RETURN TYPE:
str

add_indented_commands(commands, *, heading, max_size=None)[source]
Indents a list of commands after the specified heading.

The formatting is added to the paginator.

The default implementation is the command name indented by indent spaces, padded to max_size followed by the command’s Command.short_doc and then shortened to fit into the width.

PARAMETERS:
commands (Sequence[Command]) – A list of commands to indent for output.

heading (str) – The heading to add to the output. This is only added if the list of commands is greater than 0.

max_size (Optional[int]) – The max size to use for the gap between indents. If unspecified, calls get_max_size() on the commands parameter.

await send_pages()[source]
A helper utility to send the page output from paginator to the destination.

add_command_formatting(command)[source]
A utility function to format the non-indented block of commands and groups.

PARAMETERS:
command (Command) – The command to format.

get_destination()[source]
Returns the Messageable where the help command will be output.

You can override this method to customise the behaviour.

By default, this returns the context’s channel.

RETURNS:
The destination where the help command will be output.

RETURN TYPE:
abc.Messageable

MinimalHelpCommand
class discord.ext.commands.MinimalHelpCommand(*args, **kwargs)[source]
Attributes
aliases_heading
commands_heading
dm_help
dm_help_threshold
no_category
paginator
sort_commands
Methods
add_aliases_formatting
add_bot_commands_formatting
add_command_formatting
add_subcommand_formatting
get_command_signature
get_destination
get_ending_note
get_opening_note
send_pages
An implementation of a help command with minimal output.

This inherits from HelpCommand.

sort_commands
Whether to sort the commands in the output alphabetically. Defaults to True.

TYPE:
bool

commands_heading
The command list’s heading string used when the help command is invoked with a category name. Useful for i18n. Defaults to "Commands"

TYPE:
str

aliases_heading
The alias list’s heading string used to list the aliases of the command. Useful for i18n. Defaults to "Aliases:".

TYPE:
str

dm_help
A tribool that indicates if the help command should DM the user instead of sending it to the channel it received it from. If the boolean is set to True, then all help output is DM’d. If False, none of the help output is DM’d. If None, then the bot will only DM when the help message becomes too long (dictated by more than dm_help_threshold characters). Defaults to False.

TYPE:
Optional[bool]

dm_help_threshold
The number of characters the paginator must accumulate before getting DM’d to the user if dm_help is set to None. Defaults to 1000.

TYPE:
Optional[int]

no_category
The string used when there is a command which does not belong to any category(cog). Useful for i18n. Defaults to "No Category"

TYPE:
str

paginator
The paginator used to paginate the help command output.

TYPE:
Paginator

await send_pages()[source]
A helper utility to send the page output from paginator to the destination.

get_opening_note()[source]
Returns help command’s opening note. This is mainly useful to override for i18n purposes.

The default implementation returns

Use `{prefix}{command_name} [command]` for more info on a command.
You can also use `{prefix}{command_name} [category]` for more info on a category.
RETURNS:
The help command opening note.

RETURN TYPE:
str

get_command_signature(command)[source]
Retrieves the signature portion of the help page.

PARAMETERS:
command (Command) – The command to get the signature of.

RETURNS:
The signature for the command.

RETURN TYPE:
str

get_ending_note()[source]
Return the help command’s ending note. This is mainly useful to override for i18n purposes.

The default implementation does nothing.

RETURNS:
The help command ending note.

RETURN TYPE:
str

add_bot_commands_formatting(commands, heading)[source]
Adds the minified bot heading with commands to the output.

The formatting should be added to the paginator.

The default implementation is a bold underline heading followed by commands separated by an EN SPACE (U+2002) in the next line.

PARAMETERS:
commands (Sequence[Command]) – A list of commands that belong to the heading.

heading (str) – The heading to add to the line.

add_subcommand_formatting(command)[source]
Adds formatting information on a subcommand.

The formatting should be added to the paginator.

The default implementation is the prefix and the Command.qualified_name optionally followed by an En dash and the command’s Command.short_doc.

PARAMETERS:
command (Command) – The command to show information of.

add_aliases_formatting(aliases)[source]
Adds the formatting information on a command’s aliases.

The formatting should be added to the paginator.

The default implementation is the aliases_heading bolded followed by a comma separated list of aliases.

This is not called if there are no aliases to format.

PARAMETERS:
aliases (Sequence[str]) – A list of aliases to format.

add_command_formatting(command)[source]
A utility function to format commands and groups.

PARAMETERS:
command (Command) – The command to format.

get_destination()[source]
Returns the Messageable where the help command will be output.

You can override this method to customise the behaviour.

By default, this returns the context’s channel.

RETURNS:
The destination where the help command will be output.

RETURN TYPE:
abc.Messageable

Paginator
class discord.ext.commands.Paginator(prefix='```', suffix='```', max_size=2000, linesep='\n')[source]
Attributes
linesep
max_size
pages
prefix
suffix
Methods
add_line
clear
close_page
A class that aids in paginating code blocks for Discord messages.

len(x)
Returns the total number of characters in the paginator.

prefix
The prefix inserted to every page. e.g. three backticks.

TYPE:
str

suffix
The suffix appended at the end of every page. e.g. three backticks.

TYPE:
str

max_size
The maximum amount of codepoints allowed in a page.

TYPE:
int

linesep
The character string inserted between lines. e.g. a newline character.
New in version 1.7.

TYPE:
str

clear()[source]
Clears the paginator to have no pages.

add_line(line='', *, empty=False)[source]
Adds a line to the current page.

If the line exceeds the max_size then an exception is raised.

PARAMETERS:
line (str) – The line to add.

empty (bool) – Indicates if another empty line should be added.

RAISES:
RuntimeError – The line was too big for the current max_size.

close_page()[source]
Prematurely terminate a page.

property pages
Returns the rendered list of pages.

Enums
class discord.ext.commands.BucketType[source]
Specifies a type of bucket for, e.g. a cooldown.

default
The default bucket operates on a global basis.

user
The user bucket operates on a per-user basis.

guild
The guild bucket operates on a per-guild basis.

channel
The channel bucket operates on a per-channel basis.

member
The member bucket operates on a per-member basis.

category
The category bucket operates on a per-category basis.

role
The role bucket operates on a per-role basis.

New in version 1.3.

Checks
@discord.ext.commands.check(predicate)[source]
A decorator that adds a check to the Command or its subclasses. These checks could be accessed via Command.checks.

These checks should be predicates that take in a single parameter taking a Context. If the check returns a False-like value then during invocation a CheckFailure exception is raised and sent to the on_command_error() event.

If an exception should be thrown in the predicate then it should be a subclass of CommandError. Any exception not subclassed from it will be propagated while those subclassed will be sent to on_command_error().

A special attribute named predicate is bound to the value returned by this decorator to retrieve the predicate passed to the decorator. This allows the following introspection and chaining to be done:

def owner_or_permissions(**perms):
    original = commands.has_permissions(**perms).predicate
    async def extended_check(ctx):
        if ctx.guild is None:
            return False
        return ctx.guild.owner_id == ctx.author.id or await original(ctx)
    return commands.check(extended_check)
Note

The function returned by predicate is always a coroutine, even if the original function was not a coroutine.

Changed in version 1.3: The predicate attribute was added.

EXAMPLES

Creating a basic check to see if the command invoker is you.

def check_if_it_is_me(ctx):
    return ctx.message.author.id == 85309593344815104

@bot.command()
@commands.check(check_if_it_is_me)
async def only_for_me(ctx):
    await ctx.send('I know you!')
Transforming common checks into its own decorator:

def is_me():
    def predicate(ctx):
        return ctx.message.author.id == 85309593344815104
    return commands.check(predicate)

@bot.command()
@is_me()
async def only_me(ctx):
    await ctx.send('Only you!')
PARAMETERS:
predicate (Callable[[Context], bool]) – The predicate to check if the command should be invoked.

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.check_any(*checks)[source]
A check() that is added that checks if any of the checks passed will pass, i.e. using logical OR.

If all checks fail then CheckAnyFailure is raised to signal the failure. It inherits from CheckFailure.

Note

The predicate attribute for this function is a coroutine.

New in version 1.3.

PARAMETERS:
*checks (Callable[[Context], bool]) – An argument list of checks that have been decorated with the check() decorator.

RAISES:
TypeError – A check passed has not been decorated with the check() decorator.

EXAMPLES

Creating a basic check to see if it’s the bot owner or the server owner:

def is_guild_owner():
    def predicate(ctx):
        return ctx.guild is not None and ctx.guild.owner_id == ctx.author.id
    return commands.check(predicate)

@bot.command()
@commands.check_any(commands.is_owner(), is_guild_owner())
async def only_for_owners(ctx):
    await ctx.send('Hello mister owner!')
RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.has_role(item)[source]
A check() that is added that checks if the member invoking the command has the role specified via the name or ID specified.

If a string is specified, you must give the exact name of the role, including caps and spelling.

If an integer is specified, you must give the exact snowflake ID of the role.

If the message is invoked in a private message context then the check will return False.

This check raises one of two special exceptions, MissingRole if the user is missing a role, or NoPrivateMessage if it is used in a private message. Both inherit from CheckFailure.

Changed in version 1.1: Raise MissingRole or NoPrivateMessage instead of generic CheckFailure

PARAMETERS:
item (Union[int, str]) – The name or ID of the role to check.

RETURN TYPE:
Callable[[T], T]

@discord.ext.commands.has_permissions(**perms)[source]
A check() that is added that checks if the member has all of the permissions necessary.

Note that this check operates on the current channel permissions, not the guild wide permissions.

The permissions passed in must be exactly like the properties shown under discord.Permissions.

This check raises a special exception, MissingPermissions that is inherited from CheckFailure.

If the command is executed within a DM, it returns True.

PARAMETERS:
**perms (Dict[str, bool]) – An argument list of permissions to check for.

EXAMPLE

@bot.command()
@commands.has_permissions(manage_messages=True)
async def test(ctx):
    await ctx.send('You can manage messages.')
RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.has_guild_permissions(**perms)[source]
Similar to has_permissions(), but operates on guild wide permissions instead of the current channel permissions.

If this check is called in a DM context, it will raise an exception, NoPrivateMessage.

New in version 1.3.

PARAMETERS:
perms (bool) –

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.has_any_role(*items)[source]
A check() that is added that checks if the member invoking the command has any of the roles specified. This means that if they have one out of the three roles specified, then this check will return True.

Similar to has_role(), the names or IDs passed in must be exact.

This check raises one of two special exceptions, MissingAnyRole if the user is missing all roles, or NoPrivateMessage if it is used in a private message. Both inherit from CheckFailure.

Changed in version 1.1: Raise MissingAnyRole or NoPrivateMessage instead of generic CheckFailure

PARAMETERS:
items (List[Union[str, int]]) – An argument list of names or IDs to check that the member has roles wise.

EXAMPLE

@bot.command()
@commands.has_any_role('Library Devs', 'Moderators', 492212595072434186)
async def cool(ctx):
    await ctx.send('You are cool indeed')
RETURN TYPE:
Callable[[T], T]

@discord.ext.commands.bot_has_role(item)[source]
Similar to has_role() except checks if the bot itself has the role.

This check raises one of two special exceptions, BotMissingRole if the bot is missing the role, or NoPrivateMessage if it is used in a private message. Both inherit from CheckFailure.

Changed in version 1.1: Raise BotMissingRole or NoPrivateMessage instead of generic CheckFailure

PARAMETERS:
item (int) –

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.bot_has_permissions(**perms)[source]
Similar to has_permissions() except checks if the bot itself has the permissions listed.

This check raises a special exception, BotMissingPermissions that is inherited from CheckFailure.

PARAMETERS:
perms (bool) –

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.bot_has_guild_permissions(**perms)[source]
Similar to has_guild_permissions(), but checks the bot members guild permissions.

New in version 1.3.

PARAMETERS:
perms (bool) –

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.bot_has_any_role(*items)[source]
Similar to has_any_role() except checks if the bot itself has any of the roles listed.

This check raises one of two special exceptions, BotMissingAnyRole if the bot is missing all roles, or NoPrivateMessage if it is used in a private message. Both inherit from CheckFailure.

Changed in version 1.1: Raise BotMissingAnyRole or NoPrivateMessage instead of generic CheckFailure.

PARAMETERS:
items (int) –

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.cooldown(rate, per, type=<BucketType.default: 0>)[source]
A decorator that adds a cooldown to a command

A cooldown allows a command to only be used a specific amount of times in a specific time frame. These cooldowns can be based either on a per-guild, per-channel, per-user, per-role or global basis. Denoted by the third argument of type which must be of enum type BucketType.

If a cooldown is triggered, then CommandOnCooldown is triggered in on_command_error() and the local error handler.

A command can only have a single cooldown.

PARAMETERS:
rate (int) – The number of times a command can be used before triggering a cooldown.

per (float) – The amount of seconds to wait for a cooldown when it’s been triggered.

type (Union[BucketType, Callable[[Message], Any]]) –

The type of cooldown to have. If callable, should return a key for the mapping.

Changed in version 1.7: Callables are now supported for custom bucket types.

RETURN TYPE:
Callable[[T], T]

@discord.ext.commands.dynamic_cooldown(cooldown, type=<BucketType.default: 0>)[source]
A decorator that adds a dynamic cooldown to a command

This differs from cooldown() in that it takes a function that accepts a single parameter of type discord.Message and must return a Cooldown or None. If None is returned then that cooldown is effectively bypassed.

A cooldown allows a command to only be used a specific amount of times in a specific time frame. These cooldowns can be based either on a per-guild, per-channel, per-user, per-role or global basis. Denoted by the third argument of type which must be of enum type BucketType.

If a cooldown is triggered, then CommandOnCooldown is triggered in on_command_error() and the local error handler.

A command can only have a single cooldown.

New in version 2.0.

PARAMETERS:
cooldown (Callable[[discord.Message], Optional[Cooldown]]) – A function that takes a message and returns a cooldown that will apply to this invocation or None if the cooldown should be bypassed.

type (BucketType) – The type of cooldown to have.

RETURN TYPE:
Callable[[T], T]

@discord.ext.commands.max_concurrency(number, per=<BucketType.default: 0>, *, wait=False)[source]
A decorator that adds a maximum concurrency to a command

This enables you to only allow a certain number of command invocations at the same time, for example if a command takes too long or if only one user can use it at a time. This differs from a cooldown in that there is no set waiting period or token bucket – only a set number of people can run the command.

New in version 1.3.

PARAMETERS:
number (int) – The maximum number of invocations of this command that can be running at the same time.

per (BucketType) – The bucket that this concurrency is based on, e.g. BucketType.guild would allow it to be used up to number times per guild.

wait (bool) – Whether the command should wait for the queue to be over. If this is set to False then instead of waiting until the command can run again, the command raises MaxConcurrencyReached to its error handler. If this is set to True then the command waits until it can be executed.

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.before_invoke(coro)[source]
A decorator that registers a coroutine as a pre-invoke hook.

This allows you to refer to one before invoke hook for several commands that do not have to be within the same cog.

New in version 1.4.

EXAMPLE

async def record_usage(ctx):
    print(ctx.author, 'used', ctx.command, 'at', ctx.message.created_at)

@bot.command()
@commands.before_invoke(record_usage)
async def who(ctx): # Output: <User> used who at <Time>
    await ctx.send('I am a bot')

class What(commands.Cog):

    @commands.before_invoke(record_usage)
    @commands.command()
    async def when(self, ctx): # Output: <User> used when at <Time>
        await ctx.send(f'and I have existed since {ctx.bot.user.created_at}')

    @commands.command()
    async def where(self, ctx): # Output: <Nothing>
        await ctx.send('on Discord')

    @commands.command()
    async def why(self, ctx): # Output: <Nothing>
        await ctx.send('because someone made me')

bot.add_cog(What())
RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.after_invoke(coro)[source]
A decorator that registers a coroutine as a post-invoke hook.

This allows you to refer to one after invoke hook for several commands that do not have to be within the same cog.

New in version 1.4.

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.guild_only[source]
A check() that indicates this command must only be used in a guild context only. Basically, no private messages are allowed when using the command.

This check raises a special exception, NoPrivateMessage that is inherited from CheckFailure.

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.dm_only[source]
A check() that indicates this command must only be used in a DM context. Only private messages are allowed when using the command.

This check raises a special exception, PrivateMessageOnly that is inherited from CheckFailure.

New in version 1.1.

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.is_owner[source]
A check() that checks if the person invoking this command is the owner of the bot.

This is powered by Bot.is_owner().

This check raises a special exception, NotOwner that is derived from CheckFailure.

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

@discord.ext.commands.is_nsfw[source]
A check() that checks if the channel is a NSFW channel.

This check raises a special exception, NSFWChannelRequired that is derived from CheckFailure.

Changed in version 1.1: Raise NSFWChannelRequired instead of generic CheckFailure. DM channels will also now pass this check.

RETURN TYPE:
Callable[[TypeVar(T)], TypeVar(T)]

Cooldown
class discord.ext.commands.Cooldown(rate, per)[source]
Attributes
per
rate
Methods
copy
get_retry_after
get_tokens
reset
update_rate_limit
Represents a cooldown for a command.

rate
The total number of tokens available per per seconds.

TYPE:
int

per
The length of the cooldown period in seconds.

TYPE:
float

PARAMETERS:
rate (float) –

per (float) –

get_tokens(current=None)[source]
Returns the number of available tokens before rate limiting is applied.

PARAMETERS:
current (Optional[float]) – The time in seconds since Unix epoch to calculate tokens at. If not supplied then time.time() is used.

RETURNS:
The number of tokens available before the cooldown is to be applied.

RETURN TYPE:
int

get_retry_after(current=None)[source]
Returns the time in seconds until the cooldown will be reset.

PARAMETERS:
current (Optional[float]) – The current time in seconds since Unix epoch. If not supplied, then time.time() is used.

RETURNS:
The number of seconds to wait before this cooldown will be reset.

RETURN TYPE:
float

update_rate_limit(current=None)[source]
Updates the cooldown rate limit.

PARAMETERS:
current (Optional[float]) – The time in seconds since Unix epoch to update the rate limit at. If not supplied, then time.time() is used.

RETURNS:
The retry-after time in seconds if rate limited.

RETURN TYPE:
Optional[float]

reset()[source]
Reset the cooldown to its initial state.

RETURN TYPE:
None

copy()[source]
Creates a copy of this cooldown.

RETURNS:
A new instance of this cooldown.

RETURN TYPE:
Cooldown

Context
class discord.ext.commands.Context(*, message, bot, view, args=..., kwargs=..., prefix=None, command=None, invoked_with=None, invoked_parents=..., invoked_subcommand=None, subcommand_passed=None, command_failed=False, current_parameter=None)[source]
Attributes
args
author
bot
channel
clean_prefix
cog
command
command_failed
current_parameter
guild
invoked_parents
invoked_subcommand
invoked_with
kwargs
me
message
prefix
subcommand_passed
valid
voice_client
Methods
can_send
fetch_message
history
invoke
pins
reinvoke
reply
send
send_help
trigger_typing
typing
Represents the context in which a command is being invoked under.

This class contains a lot of metadata to help you understand more about the invocation context. This class is not created manually and is instead passed around to commands as the first parameter.

This class implements the Messageable ABC.

message
The message that triggered the command being executed.

TYPE:
Message

bot
The bot that contains the command being executed.

TYPE:
Bot

args
The list of transformed arguments that were passed into the command. If this is accessed during the on_command_error() event then this list could be incomplete.

TYPE:
list

kwargs
A dictionary of transformed arguments that were passed into the command. Similar to args, if this is accessed in the on_command_error() event then this dict could be incomplete.

TYPE:
dict

current_parameter
The parameter that is currently being inspected and converted. This is only of use for within converters.

New in version 2.0.

TYPE:
Optional[inspect.Parameter]

prefix
The prefix that was used to invoke the command.

TYPE:
Optional[str]

command
The command that is being invoked currently.

TYPE:
Optional[Command]

invoked_with
The command name that triggered this invocation. Useful for finding out which alias called the command.

TYPE:
Optional[str]

invoked_parents
The command names of the parents that triggered this invocation. Useful for finding out which aliases called the command.

For example in commands ?a b c test, the invoked parents are ['a', 'b', 'c'].

New in version 1.7.

TYPE:
List[str]

invoked_subcommand
The subcommand that was invoked. If no valid subcommand was invoked then this is equal to None.

TYPE:
Optional[Command]

subcommand_passed
The string that was attempted to call a subcommand. This does not have to point to a valid registered subcommand and could just point to a nonsense string. If nothing was passed to attempt a call to a subcommand then this is set to None.

TYPE:
Optional[str]

command_failed
A boolean that indicates if the command failed to be parsed, checked, or invoked.

TYPE:
bool

async for ... in history(*, limit=100, before=None, after=None, around=None, oldest_first=None)
Returns an AsyncIterator that enables receiving the destination’s message history.

You must have read_message_history permissions to use this.

PARAMETERS:
limit (Optional[int]) – The number of messages to retrieve. If None, retrieves every message in the channel. Note, however, that this would make it a slow operation.

before (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

after (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time.

around (Optional[Union[Snowflake, datetime.datetime]]) – Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages.

oldest_first (Optional[bool]) – If set to True, return messages in oldest->newest order. Defaults to True if after is specified, otherwise False.

YIELDS:
Message – The message with the message data parsed.

RAISES:
Forbidden – You do not have permissions to get channel message history.

HTTPException – The request to get message history failed.

EXAMPLES

Usage

counter = 0
async for message in channel.history(limit=200):
    if message.author == client.user:
        counter += 1
Flattening into a list:

messages = await channel.history(limit=123).flatten()
# messages is now a list of Message...
All parameters are optional.

RETURN TYPE:
HistoryIterator

async with typing()
Returns a context manager that allows you to type for an indefinite period of time.

This is useful for denoting long computations in your bot.

Note

This is both a regular context manager and an async context manager. This means that both with and async with work with this.

Example Usage:

async with channel.typing():
    # simulate something heavy
    await asyncio.sleep(10)

await channel.send('done!')
RETURN TYPE:
Typing

await invoke(command, /, *args, **kwargs)[source]
This function is a coroutine.

Calls a command with the arguments given.

This is useful if you want to just call the callback that a Command holds internally.

Note

This does not handle converters, checks, cooldowns, pre-invoke, or after-invoke hooks in any matter. It calls the internal callback directly as-if it was a regular function.

You must take care in passing the proper arguments when using this function.

PARAMETERS:
command (Command) – The command that is going to be called.

*args – The arguments to use.

**kwargs – The keyword arguments to use.

RAISES:
TypeError – The command argument to invoke is missing.

await reinvoke(*, call_hooks=False, restart=True)[source]
This function is a coroutine.

Calls the command again.

This is similar to invoke() except that it bypasses checks, cooldowns, and error handlers.

Note

If you want to bypass UserInputError derived exceptions, it is recommended to use the regular invoke() as it will work more naturally. After all, this will end up using the old arguments the user has used and will thus just fail again.

PARAMETERS:
call_hooks (bool) – Whether to call the before and after invoke hooks.

restart (bool) – Whether to start the call chain from the very beginning or where we left off (i.e. the command that caused the error). The default is to start where we left off.

RAISES:
ValueError – The context to reinvoke is not valid.

RETURN TYPE:
None

property valid
Checks if the invocation context is valid to be invoked with.

RETURN TYPE:
bool

property clean_prefix
The cleaned up invoke prefix. i.e. mentions are @name instead of <@id>.

New in version 2.0.

RETURN TYPE:
str

property cog
Returns the cog associated with this context’s command. None if it does not exist.

RETURN TYPE:
Cog | None

guild
Returns the guild associated with this context’s command. None if not available.

channel
Returns the channel associated with this context’s command. Shorthand for Message.channel.

author
Union[User, Member]: Returns the author associated with this context’s command. Shorthand for Message.author

me
Union[Member, ClientUser]: Similar to Guild.me except it may return the ClientUser in private message message contexts, or when Intents.guilds() is absent.

property voice_client
A shortcut to Guild.voice_client, if applicable.

RETURN TYPE:
VoiceProtocol | None

await send_help(*args)[source]
This function is a coroutine.

Shows the help command for the specified entity if given. The entity can be a command or a cog.

If no entity is given, then it’ll show help for the entire bot.

If the entity is a string, then it looks up whether it’s a Cog or a Command.

Note

Due to the way this function works, instead of returning something similar to command_not_found() this returns None on bad input or no help command.

PARAMETERS:
entity (Optional[Union[Command, Cog, str]]) – The entity to show help for.

args (Any) –

RETURNS:
The result of the help command, if any.

RETURN TYPE:
Any

can_send(*objects)
Returns a bool indicating whether you have the permissions to send the object(s).

RETURNS:
Indicates whether you have the permissions to send the object(s).

RETURN TYPE:
bool

RAISES:
TypeError – An invalid type has been passed.

await fetch_message(id, /)
This function is a coroutine.

Retrieves a single Message from the destination.

PARAMETERS:
id (int) – The message ID to look for.

RETURNS:
The message asked for.

RETURN TYPE:
Message

RAISES:
NotFound – The specified message was not found.

Forbidden – You do not have the permissions required to get a message.

HTTPException – Retrieving the message failed.

await pins()
This function is a coroutine.

Retrieves all messages that are currently pinned in the channel.

Note

Due to a limitation with the Discord API, the Message objects returned by this method do not contain complete Message.reactions data.

RETURNS:
The messages that are currently pinned.

RETURN TYPE:
List[Message]

RAISES:
HTTPException – Retrieving the pinned messages failed.

await reply(content=None, **kwargs)[source]
This function is a coroutine.

A shortcut method to abc.Messageable.send() to reply to the Message.

New in version 1.6.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, or you specified both file and files.

PARAMETERS:
content (str | None) –

kwargs (Any) –

await send(content=None, *, tts=None, embed=None, embeds=None, file=None, files=None, stickers=None, delete_after=None, nonce=None, allowed_mentions=None, reference=None, mention_author=None, view=None, suppress=None)
This function is a coroutine.

Sends a message to the destination with the content given.

The content must be a type that can convert to a string through str(content). If the content is set to None (the default), then the embed parameter must be provided.

To upload a single file, the file parameter should be used with a single File object. To upload multiple files, the files parameter should be used with a list of File objects. Specifying both parameters will lead to an exception.

To upload a single embed, the embed parameter should be used with a single Embed object. To upload multiple embeds, the embeds parameter should be used with a list of Embed objects. Specifying both parameters will lead to an exception.

PARAMETERS:
content (Optional[str]) – The content of the message to send.

tts (bool) – Indicates if the message should be sent using text-to-speech.

embed (Embed) – The rich embed for the content.

file (File) – The file to upload.

files (List[File]) – A list of files to upload. Must be a maximum of 10.

nonce (int) – The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value.

delete_after (float) – If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored.

allowed_mentions (AllowedMentions) –

Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

New in version 1.4.

reference (Union[Message, MessageReference, PartialMessage]) –

A reference to the Message to which you are replying, this can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

New in version 1.6.

mention_author (Optional[bool]) –

If set, overrides the replied_user attribute of allowed_mentions.

New in version 1.6.

view (discord.ui.View) – A Discord UI View to add to the message.

embeds (List[Embed]) –

A list of embeds to upload. Must be a maximum of 10.

New in version 2.0.

stickers (Sequence[Union[GuildSticker, StickerItem]]) –

A list of stickers to upload. Must be a maximum of 3.

New in version 2.0.

suppress (bool) – Whether to suppress embeds for the message.

RETURNS:
The message that was sent.

RETURN TYPE:
Message

RAISES:
HTTPException – Sending the message failed.

Forbidden – You do not have the proper permissions to send the message.

InvalidArgument – The files list is not of the appropriate size, you specified both file and files, or you specified both embed and embeds, or the reference object is not a Message, MessageReference or PartialMessage.

await trigger_typing()
This function is a coroutine.

Triggers a typing indicator to the destination.

Typing indicator will go away after 10 seconds, or after a message is sent.

RETURN TYPE:
None

Converters
class discord.ext.commands.Converter(*args, **kwargs)[source]
The base class of custom converters that require the Context to be passed to be useful.

This allows you to implement converters that function similar to the special cased discord classes.

Classes that derive from this should override the convert() method to do its conversion logic. This method must be a coroutine.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
TypeVar(T_co, covariant=True)

class discord.ext.commands.ObjectConverter(*args, **kwargs)[source]
Converts to a Object.

The argument must follow the valid ID or mention formats (e.g. <@80088516616269824>).

New in version 2.0.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by member, role, or channel mention.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Object

class discord.ext.commands.MemberConverter(*args, **kwargs)[source]
Converts to a Member.

All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name#discrim

Lookup by name

Lookup by nickname

Changed in version 1.5: Raise MemberNotFound instead of generic BadArgument

Changed in version 1.5.1: This converter now lazily fetches members from the gateway and HTTP APIs, optionally caching the result if MemberCacheFlags.joined is enabled.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Member

class discord.ext.commands.UserConverter(*args, **kwargs)[source]
Converts to a User.

All lookups are via the global user cache.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name#discrim

Lookup by name

Changed in version 1.5: Raise UserNotFound instead of generic BadArgument

Changed in version 1.6: This converter now lazily fetches users from the HTTP APIs if an ID is passed, and it’s not available in cache.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
User

class discord.ext.commands.MessageConverter(*args, **kwargs)[source]
Converts to a discord.Message.

New in version 1.1.

The lookup strategy is as follows (in order):

Lookup by “{channel ID}-{message ID}” (retrieved by shift-clicking on “Copy ID”)

Lookup by message ID (the message must be in the context channel)

Lookup by message URL

Changed in version 1.5: Raise ChannelNotFound, MessageNotFound or ChannelNotReadable instead of generic BadArgument

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Message

class discord.ext.commands.PartialMessageConverter(*args, **kwargs)[source]
Converts to a discord.PartialMessage.

New in version 1.7.

The creation strategy is as follows (in order):

By “{channel ID}-{message ID}” (retrieved by shift-clicking on “Copy ID”)

By message ID (The message is assumed to be in the context channel.)

By message URL

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
PartialMessage

class discord.ext.commands.GuildChannelConverter(*args, **kwargs)[source]
Converts to a GuildChannel.

All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name.

New in version 2.0.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
GuildChannel

class discord.ext.commands.TextChannelConverter(*args, **kwargs)[source]
Converts to a TextChannel.

All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name

Changed in version 1.5: Raise ChannelNotFound instead of generic BadArgument

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
TextChannel

class discord.ext.commands.VoiceChannelConverter(*args, **kwargs)[source]
Converts to a VoiceChannel.

All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name

Changed in version 1.5: Raise ChannelNotFound instead of generic BadArgument

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
VoiceChannel

class discord.ext.commands.StageChannelConverter(*args, **kwargs)[source]
Converts to a StageChannel.

New in version 1.7.

All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
StageChannel

class discord.ext.commands.CategoryChannelConverter(*args, **kwargs)[source]
Converts to a CategoryChannel.

All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name

Changed in version 1.5: Raise ChannelNotFound instead of generic BadArgument

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
CategoryChannel

class discord.ext.commands.ForumChannelConverter(*args, **kwargs)[source]
Converts to a ForumChannel.

All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name

New in version 2.0.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
ForumChannel

class discord.ext.commands.InviteConverter(*args, **kwargs)[source]
Converts to a Invite.

This is done via an HTTP request using Bot.fetch_invite().

Changed in version 1.5: Raise BadInviteArgument instead of generic BadArgument

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Invite

class discord.ext.commands.GuildConverter(*args, **kwargs)[source]
Converts to a Guild.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by name. (There is no disambiguation for Guilds with multiple matching names).

New in version 1.7.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Guild

class discord.ext.commands.RoleConverter(*args, **kwargs)[source]
Converts to a Role.

All lookups are via the local guild. If in a DM context, the converter raises NoPrivateMessage exception.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name

Changed in version 1.5: Raise RoleNotFound instead of generic BadArgument

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Role

class discord.ext.commands.GameConverter(*args, **kwargs)[source]
Converts to Game.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Game

class discord.ext.commands.ColourConverter(*args, **kwargs)[source]
Converts to a Colour.

Changed in version 1.5: Add an alias named ColorConverter

The following formats are accepted:

0x<hex>

#<hex>

0x#<hex>

rgb(<number>, <number>, <number>)

Any of the classmethod in Colour

The _ in the name can be optionally replaced with spaces.

Like CSS, <number> can be either 0-255 or 0-100% and <hex> can be either a 6 digit hex number or a 3 digit hex shortcut (e.g. #fff).

Changed in version 1.5: Raise BadColourArgument instead of generic BadArgument

Changed in version 1.7: Added support for rgb function and 3-digit hex shortcuts

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Colour

class discord.ext.commands.EmojiConverter(*args, **kwargs)[source]
Converts to a Emoji.

All lookups are done for the local guild first, if available. If that lookup fails, then it checks the client’s global cache.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by extracting ID from the emoji.

Lookup by name

Changed in version 1.5: Raise EmojiNotFound instead of generic BadArgument

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Emoji

class discord.ext.commands.PartialEmojiConverter(*args, **kwargs)[source]
Converts to a PartialEmoji.

This is done by extracting the animated flag, name and ID from the emoji.

Changed in version 1.5: Raise PartialEmojiConversionFailure instead of generic BadArgument

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
PartialEmoji

class discord.ext.commands.ThreadConverter(*args, **kwargs)[source]
Coverts to a Thread.

All lookups are via the local guild.

The lookup strategy is as follows (in order):

Lookup by ID.

Lookup by mention.

Lookup by name.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
Thread

class discord.ext.commands.GuildStickerConverter(*args, **kwargs)[source]
Converts to a GuildSticker.

All lookups are done for the local guild first, if available. If that lookup fails, then it checks the client’s global cache.

The lookup strategy is as follows (in order):

1. Lookup by ID. 3. Lookup by name

New in version 2.0.

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
GuildSticker

class discord.ext.commands.clean_content(*, fix_channel_mentions=False, use_nicknames=True, escape_markdown=False, remove_markdown=False)[source]
Converts the argument to mention scrubbed version of said content.

This behaves similarly to clean_content.

fix_channel_mentions
Whether to clean channel mentions.

TYPE:
bool

use_nicknames
Whether to use nicknames when transforming mentions.

TYPE:
bool

escape_markdown
Whether to also escape special markdown characters.

TYPE:
bool

remove_markdown
Whether to also remove special markdown characters. This option is not supported with escape_markdown

New in version 1.7.

TYPE:
bool

PARAMETERS:
fix_channel_mentions (bool) –

use_nicknames (bool) –

escape_markdown (bool) –

remove_markdown (bool) –

await convert(ctx, argument)[source]
This function is a coroutine.

The method to override to do conversion logic.

If an error is found while converting, it is recommended to raise a CommandError derived exception as it will properly propagate to the error handlers.

PARAMETERS:
ctx (Context) – The invocation context that the argument is being used in.

argument (str) – The argument that is being converted.

RAISES:
.CommandError – A generic exception occurred when converting the argument.

.BadArgument – The converter failed to convert the argument.

RETURN TYPE:
str

class discord.ext.commands.Greedy(*, converter)[source]
A special converter that greedily consumes arguments until it can’t. As a consequence of this behaviour, most input errors are silently discarded, since it is used as an indicator of when to stop parsing.

When a parser error is met the greedy converter stops converting, undoes the internal string parsing routine, and continues parsing regularly.

For example, in the following code:

@commands.command()
async def test(ctx, numbers: Greedy[int], reason: str):
    await ctx.send("numbers: {}, reason: {}".format(numbers, reason))
An invocation of [p]test 1 2 3 4 5 6 hello would pass numbers with [1, 2, 3, 4, 5, 6] and reason with hello.

For more information, check Special Converters.

PARAMETERS:
converter (TypeVar(T)) –

await discord.ext.commands.run_converters(ctx, converter, argument, param)[source]
This function is a coroutine.

Runs converters for a given converter, argument, and parameter.

This function does the same work that the library does under the hood.

New in version 2.0.

PARAMETERS:
ctx (Context) – The invocation context to run the converters under.

converter (Any) – The converter to run, this corresponds to the annotation in the function.

argument (str) – The argument to convert to.

param (inspect.Parameter) – The parameter being converted. This is mainly for error reporting.

RETURNS:
The resulting conversion.

RETURN TYPE:
Any

RAISES:
CommandError – The converter failed to convert.

Flag Converter
class discord.ext.commands.FlagConverter[source]
A converter that allows for a user-friendly flag syntax.

The flags are defined using PEP 526 type annotations similar to the dataclasses Python module. For more information on how this converter works, check the appropriate documentation.

iter(x)
Returns an iterator of (flag_name, flag_value) pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown.

New in version 2.0.

PARAMETERS:
case_insensitive (bool) – A class parameter to toggle case insensitivity of the flag parsing. If True then flags are parsed in a case-insensitive manner. Defaults to False.

prefix (str) – The prefix that all flags must be prefixed with. By default, there is no prefix.

delimiter (str) – The delimiter that separates a flag’s argument from the flag’s name. By default, this is :.

classmethod get_flags()[source]
A mapping of flag name to flag object this converter has.

classmethod await convert(ctx, argument)[source]
This function is a coroutine.

The method that actually converters an argument to the flag mapping.

PARAMETERS:
cls (Type[FlagConverter]) – The flag converter class.

ctx (Context) – The invocation context.

argument (str) – The argument to convert from.

RETURNS:
The flag converter instance with all flags parsed.

RETURN TYPE:
FlagConverter

RAISES:
FlagError – A flag related parsing error.

CommandError – A command related error.

class discord.ext.commands.Flag(override=<factory>, aliases=<factory>, cast_to_dict=False)[source]
Represents a flag parameter for FlagConverter.

The flag() function helps create these flag objects, but it is not necessary to do so. These cannot be constructed manually.

name
The name of the flag.

TYPE:
str

aliases
The aliases of the flag name.

TYPE:
List[str]

attribute
The attribute in the class that corresponds to this flag.

TYPE:
str

default
The default value of the flag, if available.

TYPE:
Any

annotation
The underlying evaluated annotation of the flag.

TYPE:
Any

max_args
The maximum number of arguments the flag can accept. A negative value indicates an unlimited amount of arguments.

TYPE:
int

override
Whether multiple given values overrides the previous value.

TYPE:
bool

property required
Whether the flag is required.

A required flag has no default value.

RETURN TYPE:
bool

discord.ext.commands.flag(*, name=..., aliases=..., default=..., max_args=..., override=...)[source]
Override default functionality and parameters of the underlying FlagConverter class attributes.

PARAMETERS:
name (str) – The flag name. If not given, defaults to the attribute name.

aliases (List[str]) – Aliases to the flag name. If not given, no aliases are set.

default (Any) – The default parameter. This could be either a value or a callable that takes Context as its sole parameter. If not given then it defaults to the default value given to the attribute.

max_args (int) – The maximum number of arguments the flag can accept. A negative value indicates an unlimited amount of arguments. The default value depends on the annotation given.

override (bool) – Whether multiple given values overrides the previous value. The default value depends on the annotation given.

Exceptions
exception discord.ext.commands.CommandError(message=None, *args)[source]
The base exception type for all command related errors.

This inherits from discord.DiscordException.

This exception and exceptions inherited from it are handled in a special way as they are caught and passed into a special event from Bot, on_command_error().

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.ConversionError(converter, original)[source]
Exception raised when a Converter class raises non-CommandError.

This inherits from CommandError.

converter
The converter that failed.

TYPE:
discord.ext.commands.Converter

original
The original exception that was raised. You can also get this via the __cause__ attribute.

TYPE:
Exception

PARAMETERS:
converter (Converter) –

original (Exception) –

exception discord.ext.commands.MissingRequiredArgument(param)[source]
Exception raised when parsing a command and a parameter that is required is not encountered.

This inherits from UserInputError

param
The argument that is missing.

TYPE:
inspect.Parameter

PARAMETERS:
param (Parameter) –

exception discord.ext.commands.ArgumentParsingError(message=None, *args)[source]
An exception raised when the parser fails to parse a user’s input.

This inherits from UserInputError.

There are child classes that implement more granular parsing errors for i18n purposes.

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.UnexpectedQuoteError(quote)[source]
An exception raised when the parser encounters a quote mark inside a non-quoted string.

This inherits from ArgumentParsingError.

quote
The quote mark that was found inside the non-quoted string.

TYPE:
str

PARAMETERS:
quote (str) –

exception discord.ext.commands.InvalidEndOfQuotedStringError(char)[source]
An exception raised when a space is expected after the closing quote in a string but a different character is found.

This inherits from ArgumentParsingError.

char
The character found instead of the expected string.

TYPE:
str

PARAMETERS:
char (str) –

exception discord.ext.commands.ExpectedClosingQuoteError(close_quote)[source]
An exception raised when a quote character is expected but not found.

This inherits from ArgumentParsingError.

close_quote
The quote character expected.

TYPE:
str

PARAMETERS:
close_quote (str) –

exception discord.ext.commands.BadArgument(message=None, *args)[source]
Exception raised when a parsing or conversion failure is encountered on an argument to pass into a command.

This inherits from UserInputError

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.BadUnionArgument(param, converters, errors)[source]
Exception raised when a typing.Union converter fails for all its associated types.

This inherits from UserInputError

param
The parameter that failed being converted.

TYPE:
inspect.Parameter

converters
A tuple of converters attempted in conversion, in order of failure.

TYPE:
Tuple[Type, ...]

errors
A list of errors that were caught from failing the conversion.

TYPE:
List[CommandError]

exception discord.ext.commands.BadLiteralArgument(param, literals, errors)[source]
Exception raised when a typing.Literal converter fails for all its associated values.

This inherits from UserInputError

New in version 2.0.

param
The parameter that failed being converted.

TYPE:
inspect.Parameter

literals
A tuple of values compared against in conversion, in order of failure.

TYPE:
Tuple[Any, ...]

errors
A list of errors that were caught from failing the conversion.

TYPE:
List[CommandError]

exception discord.ext.commands.PrivateMessageOnly(message=None)[source]
Exception raised when an operation does not work outside of private message contexts.

This inherits from CheckFailure

PARAMETERS:
message (str | None) –

exception discord.ext.commands.NoPrivateMessage(message=None)[source]
Exception raised when an operation does not work in private message contexts.

This inherits from CheckFailure

PARAMETERS:
message (str | None) –

exception discord.ext.commands.CheckFailure(message=None, *args)[source]
Exception raised when the predicates in Command.checks have failed.

This inherits from CommandError

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.CheckAnyFailure(checks, errors)[source]
Exception raised when all predicates in check_any() fail.

This inherits from CheckFailure.

New in version 1.3.

errors
A list of errors that were caught during execution.

TYPE:
List[CheckFailure]

checks
A list of check predicates that failed.

TYPE:
List[Callable[[Context], bool]]

exception discord.ext.commands.CommandNotFound(message=None, *args)[source]
Exception raised when a command is attempted to be invoked but no command under that name is found.

This is not raised for invalid subcommands, rather just the initial main command that is attempted to be invoked.

This inherits from CommandError.

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.DisabledCommand(message=None, *args)[source]
Exception raised when the command being invoked is disabled.

This inherits from CommandError

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.CommandInvokeError(e)[source]
Exception raised when the command being invoked raised an exception.

This inherits from CommandError

original
The original exception that was raised. You can also get this via the __cause__ attribute.

TYPE:
Exception

PARAMETERS:
e (Exception) –

exception discord.ext.commands.TooManyArguments(message=None, *args)[source]
Exception raised when the command was passed too many arguments and its Command.ignore_extra attribute was not set to True.

This inherits from UserInputError

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.UserInputError(message=None, *args)[source]
The base exception type for errors that involve errors regarding user input.

This inherits from CommandError.

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.CommandOnCooldown(cooldown, retry_after, type)[source]
Exception raised when the command being invoked is on cooldown.

This inherits from CommandError

cooldown
A class with attributes rate and per similar to the cooldown() decorator.

TYPE:
Cooldown

type
The type associated with the cooldown.

TYPE:
BucketType

retry_after
The amount of seconds to wait before you can retry again.

TYPE:
float

PARAMETERS:
cooldown (Cooldown) –

retry_after (float) –

type (BucketType) –

exception discord.ext.commands.MaxConcurrencyReached(number, per)[source]
Exception raised when the command being invoked has reached its maximum concurrency.

This inherits from CommandError.

number
The maximum number of concurrent invokers allowed.

TYPE:
int

per
The bucket type passed to the max_concurrency() decorator.

TYPE:
BucketType

PARAMETERS:
number (int) –

per (BucketType) –

exception discord.ext.commands.NotOwner(message=None, *args)[source]
Exception raised when the message author is not the owner of the bot.

This inherits from CheckFailure

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.MessageNotFound(argument)[source]
Exception raised when the message provided was not found in the channel.

This inherits from BadArgument

New in version 1.5.

argument
The message supplied by the caller that was not found

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.MemberNotFound(argument)[source]
Exception raised when the member provided was not found in the bot’s cache.

This inherits from BadArgument

New in version 1.5.

argument
The member supplied by the caller that was not found

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.GuildNotFound(argument)[source]
Exception raised when the guild provided was not found in the bot’s cache.

This inherits from BadArgument

New in version 1.7.

argument
The guild supplied by the called that was not found

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.UserNotFound(argument)[source]
Exception raised when the user provided was not found in the bot’s cache.

This inherits from BadArgument

New in version 1.5.

argument
The user supplied by the caller that was not found

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.ChannelNotFound(argument)[source]
Exception raised when the bot can not find the channel.

This inherits from BadArgument

New in version 1.5.

argument
The channel supplied by the caller that was not found

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.ChannelNotReadable(argument)[source]
Exception raised when the bot does not have permission to read messages in the channel.

This inherits from BadArgument

New in version 1.5.

argument
The channel supplied by the caller that was not readable

TYPE:
Union[abc.GuildChannel, Thread]

PARAMETERS:
argument (GuildChannel | Thread) –

exception discord.ext.commands.ThreadNotFound(argument)[source]
Exception raised when the bot can not find the thread.

This inherits from BadArgument

New in version 2.0.

argument
The thread supplied by the caller that was not found

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.BadColourArgument(argument)[source]
Exception raised when the colour is not valid.

This inherits from BadArgument

New in version 1.5.

argument
The colour supplied by the caller that was not valid

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.RoleNotFound(argument)[source]
Exception raised when the bot can not find the role.

This inherits from BadArgument

New in version 1.5.

argument
The role supplied by the caller that was not found

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.BadInviteArgument(argument)[source]
Exception raised when the invite is invalid or expired.

This inherits from BadArgument

New in version 1.5.

PARAMETERS:
argument (str) –

exception discord.ext.commands.EmojiNotFound(argument)[source]
Exception raised when the bot can not find the emoji.

This inherits from BadArgument

New in version 1.5.

argument
The emoji supplied by the caller that was not found

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.PartialEmojiConversionFailure(argument)[source]
Exception raised when the emoji provided does not match the correct format.

This inherits from BadArgument

New in version 1.5.

argument
The emoji supplied by the caller that did not match the regex

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.GuildStickerNotFound(argument)[source]
Exception raised when the bot can not find the sticker.

This inherits from BadArgument

New in version 2.0.

argument
The sticker supplied by the caller that was not found

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.BadBoolArgument(argument)[source]
Exception raised when a boolean argument was not convertible.

This inherits from BadArgument

New in version 1.5.

argument
The boolean argument supplied by the caller that is not in the predefined list

TYPE:
str

PARAMETERS:
argument (str) –

exception discord.ext.commands.MissingPermissions(missing_permissions, *args)[source]
Exception raised when the command invoker lacks permissions to run a command.

This inherits from CheckFailure

missing_permissions
The required permissions that are missing.

TYPE:
List[str]

exception discord.ext.commands.BotMissingPermissions(missing_permissions, *args)[source]
Exception raised when the bot’s member lacks permissions to run a command.

This inherits from CheckFailure

missing_permissions
The required permissions that are missing.

TYPE:
List[str]

exception discord.ext.commands.MissingRole(missing_role)[source]
Exception raised when the command invoker lacks a role to run a command.

This inherits from CheckFailure

New in version 1.1.

missing_role
The required role that is missing. This is the parameter passed to has_role().

TYPE:
Union[str, int]

PARAMETERS:
missing_role (Union[str, int]) –

exception discord.ext.commands.BotMissingRole(missing_role)[source]
Exception raised when the bot’s member lacks a role to run a command.

This inherits from CheckFailure

New in version 1.1.

missing_role
The required role that is missing. This is the parameter passed to has_role().

TYPE:
Union[str, int]

PARAMETERS:
missing_role (Union[str, int]) –

exception discord.ext.commands.MissingAnyRole(missing_roles)[source]
Exception raised when the command invoker lacks any of the roles specified to run a command.

This inherits from CheckFailure

New in version 1.1.

missing_roles
The roles that the invoker is missing. These are the parameters passed to has_any_role().

TYPE:
List[Union[str, int]]

PARAMETERS:
missing_roles (List[Union[str, int]]) –

exception discord.ext.commands.BotMissingAnyRole(missing_roles)[source]
Exception raised when the bot’s member lacks any of the roles specified to run a command.

This inherits from CheckFailure

New in version 1.1.

missing_roles
The roles that the bot’s member is missing. These are the parameters passed to has_any_role().

TYPE:
List[Union[str, int]]

PARAMETERS:
missing_roles (List[Union[str, int]]) –

exception discord.ext.commands.NSFWChannelRequired(channel)[source]
Exception raised when a channel does not have the required NSFW setting.

This inherits from CheckFailure.

New in version 1.1.

PARAMETERS:
channel (Union[abc.GuildChannel, Thread]) – The channel that does not have NSFW enabled.

exception discord.ext.commands.FlagError(message=None, *args)[source]
The base exception type for all flag parsing related errors.

This inherits from BadArgument.

New in version 2.0.

PARAMETERS:
message (str | None) –

args (Any) –

exception discord.ext.commands.BadFlagArgument(flag)[source]
An exception raised when a flag failed to convert a value.

This inherits from FlagError

New in version 2.0.

flag
The flag that failed to convert.

TYPE:
Flag

PARAMETERS:
flag (Flag) –

exception discord.ext.commands.MissingFlagArgument(flag)[source]
An exception raised when a flag did not get a value.

This inherits from FlagError

New in version 2.0.

flag
The flag that did not get a value.

TYPE:
Flag

PARAMETERS:
flag (Flag) –

exception discord.ext.commands.TooManyFlags(flag, values)[source]
An exception raised when a flag has received too many values.

This inherits from FlagError.

New in version 2.0.

flag
The flag that received too many values.

TYPE:
Flag

values
The values that were passed.

TYPE:
List[str]

exception discord.ext.commands.MissingRequiredFlag(flag)[source]
An exception raised when a required flag was not given.

This inherits from FlagError

New in version 2.0.

flag
The required flag that was not found.

TYPE:
Flag

PARAMETERS:
flag (Flag) –

exception discord.ext.commands.CommandRegistrationError(name, *, alias_conflict=False)[source]
An exception raised when the command can’t be added because the name is already taken by a different command.

This inherits from discord.ClientException

New in version 1.4.

name
The command name that had the error.

TYPE:
str

alias_conflict
Whether the name that conflicts is an alias of the command we try to add.

TYPE:
bool

PARAMETERS:
name (str) –

alias_conflict (bool) –

Exception Hierarchy
DiscordException
CommandError
ConversionError

UserInputError
MissingRequiredArgument

TooManyArguments

BadArgument
MessageNotFound

MemberNotFound

GuildNotFound

UserNotFound

ChannelNotFound

ChannelNotReadable

BadColourArgument

RoleNotFound

BadInviteArgument

EmojiNotFound

GuildStickerNotFound

PartialEmojiConversionFailure

BadBoolArgument

ThreadNotFound

FlagError
BadFlagArgument

MissingFlagArgument

TooManyFlags

MissingRequiredFlag

BadUnionArgument

BadLiteralArgument

ArgumentParsingError
UnexpectedQuoteError

InvalidEndOfQuotedStringError

ExpectedClosingQuoteError

CommandNotFound

CheckFailure
CheckAnyFailure

PrivateMessageOnly

NoPrivateMessage

NotOwner

MissingPermissions

BotMissingPermissions

MissingRole

BotMissingRole

MissingAnyRole

BotMissingAnyRole

NSFWChannelRequired

DisabledCommand

CommandInvokeError

CommandOnCooldown

MaxConcurrencyReached

ClientException
CommandRegistrationError



discord.ext.tasks
New in version 1.1.0.

One of the most common operations when making a bot is having a loop run in the background at a specified interval. This pattern is very common but has a lot of things you need to look out for:

How do I handle asyncio.CancelledError?

What do I do if the internet goes out?

What is the maximum number of seconds I can sleep anyway?

The goal of this Pycord extension is to abstract all these worries away from you.

Recipes
A simple background task in a Cog:

from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self):
        self.index = 0
        self.printer.start()

    def cog_unload(self):
        self.printer.cancel()

    @tasks.loop(seconds=5.0)
    async def printer(self):
        print(self.index)
        self.index += 1
Adding an exception to handle during reconnect:

import asyncpg
from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.data = []
        self.batch_update.add_exception_type(asyncpg.PostgresConnectionError)
        self.batch_update.start()

    def cog_unload(self):
        self.batch_update.cancel()

    @tasks.loop(minutes=5.0)
    async def batch_update(self):
        async with self.bot.pool.acquire() as con:
            # batch update here...
            pass
Looping a certain amount of times before exiting:

from discord.ext import tasks

@tasks.loop(seconds=5.0, count=5)
async def slow_count():
    print(slow_count.current_loop)

@slow_count.after_loop
async def after_slow_count():
    print('done!')

slow_count.start()
Waiting until the bot is ready before the loop starts:

from discord.ext import tasks, commands

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.index = 0
        self.bot = bot
        self.printer.start()

    def cog_unload(self):
        self.printer.cancel()

    @tasks.loop(seconds=5.0)
    async def printer(self):
        print(self.index)
        self.index += 1

    @printer.before_loop
    async def before_printer(self):
        print('waiting...')
        await self.bot.wait_until_ready()
Doing something during cancellation:

from discord.ext import tasks, commands
import asyncio

class MyCog(commands.Cog):
    def __init__(self, bot):
        self.bot= bot
        self._batch = []
        self.lock = asyncio.Lock()
        self.bulker.start()

    async def do_bulk(self):
        # bulk insert data here
        ...

    @tasks.loop(seconds=10.0)
    async def bulker(self):
        async with self.lock:
            await self.do_bulk()

    @bulker.after_loop
    async def on_bulker_cancel(self):
        if self.bulker.is_being_cancelled() and len(self._batch) != 0:
            # if we're cancelled and we have some data left...
            # let's insert it to our database
            await self.do_bulk()
API Reference
class discord.ext.tasks.Loop(coro, seconds, hours, minutes, time, count, reconnect, loop)[source]
Attributes
current_loop
hours
minutes
next_iteration
seconds
time
Methods
__call__
add_exception_type
after_loop
before_loop
cancel
change_interval
clear_exception_types
error
failed
get_task
is_being_cancelled
is_running
remove_exception_type
restart
start
stop
A background task helper that abstracts the loop and reconnection logic for you.

The main interface to create this is through loop().

@after_loop(coro)[source]
A decorator that register a coroutine to be called after the loop finished running.

The coroutine must take no arguments (except self in a class context).

Note

This coroutine is called even during cancellation. If it is desirable to tell apart whether something was cancelled or not, check to see whether is_being_cancelled() is True or not.

PARAMETERS:
coro (coroutine) – The coroutine to register after the loop finishes.

RAISES:
TypeError – The function was not a coroutine.

RETURN TYPE:
TypeVar(FT, bound= Callable[..., Awaitable[Any]])

@before_loop(coro)[source]
A decorator that registers a coroutine to be called before the loop starts running.

This is useful if you want to wait for some bot state before the loop starts, such as discord.Client.wait_until_ready().

The coroutine must take no arguments (except self in a class context).

PARAMETERS:
coro (coroutine) – The coroutine to register before the loop runs.

RAISES:
TypeError – The function was not a coroutine.

RETURN TYPE:
TypeVar(FT, bound= Callable[..., Awaitable[Any]])

@error(coro)[source]
A decorator that registers a coroutine to be called if the task encounters an unhandled exception.

The coroutine must take only one argument the exception raised (except self in a class context).

By default, this prints to sys.stderr however it could be overridden to have a different implementation.

New in version 1.4.

PARAMETERS:
coro (coroutine) – The coroutine to register in the event of an unhandled exception.

RAISES:
TypeError – The function was not a coroutine.

RETURN TYPE:
TypeVar(ET, bound= Callable[[Any, BaseException], Awaitable[Any]])

property seconds
Read-only value for the number of seconds between each iteration. None if an explicit time value was passed instead.

New in version 2.0.

RETURN TYPE:
float | None

property minutes
Read-only value for the number of minutes between each iteration. None if an explicit time value was passed instead.

New in version 2.0.

RETURN TYPE:
float | None

property hours
Read-only value for the number of hours between each iteration. None if an explicit time value was passed instead.

New in version 2.0.

RETURN TYPE:
float | None

property time
Read-only list for the exact times this loop runs at. None if relative times were passed instead.

New in version 2.0.

property current_loop
The current iteration of the loop.

RETURN TYPE:
int

property next_iteration
When the next iteration of the loop will occur.

New in version 1.3.

RETURN TYPE:
datetime.datetime | None

await __call__(*args, **kwargs)[source]
This function is a coroutine.

Calls the internal callback that the task holds.

New in version 1.6.

PARAMETERS:
*args (Any) – The arguments to use.

**kwargs (Any) – The keyword arguments to use.

RETURN TYPE:
Any

start(*args, **kwargs)[source]
Starts the internal task in the event loop.

PARAMETERS:
*args – The arguments to use.

**kwargs – The keyword arguments to use.

RAISES:
RuntimeError – A task has already been launched and is running.

RETURNS:
The task that has been created.

RETURN TYPE:
asyncio.Task

stop()[source]
Gracefully stops the task from running.

Unlike cancel(), this allows the task to finish its current iteration before gracefully exiting.

Note

If the internal function raises an error that can be handled before finishing then it will retry until it succeeds.

If this is undesirable, either remove the error handling before stopping via clear_exception_types() or use cancel() instead.

New in version 1.2.

RETURN TYPE:
None

cancel()[source]
Cancels the internal task, if it is running.

RETURN TYPE:
None

restart(*args, **kwargs)[source]
A convenience method to restart the internal task.

Note

Due to the way this function works, the task is not returned like start().

PARAMETERS:
*args (Any) – The arguments to use.

**kwargs (Any) – The keyword arguments to use.

RETURN TYPE:
None

add_exception_type(*exceptions)[source]
Adds exception types to be handled during the reconnect logic.

By default, the exception types handled are those handled by discord.Client.connect(), which includes a lot of internet disconnection errors.

This function is useful if you’re interacting with a 3rd party library that raises its own set of exceptions.

PARAMETERS:
*exceptions (Type[BaseException]) – An argument list of exception classes to handle.

RAISES:
TypeError – An exception passed is either not a class or not inherited from BaseException.

clear_exception_types()[source]
Removes all exception types that are handled.

Note

This operation obviously cannot be undone!

RETURN TYPE:
None

remove_exception_type(*exceptions)[source]
Removes exception types from being handled during the reconnect logic.

PARAMETERS:
*exceptions (Type[BaseException]) – An argument list of exception classes to handle.

RETURNS:
Whether all exceptions were successfully removed.

RETURN TYPE:
bool

get_task()[source]
Fetches the internal task or None if there isn’t one running.

is_being_cancelled()[source]
Whether the task is being cancelled.

RETURN TYPE:
bool

failed()[source]
Whether the internal task has failed.

New in version 1.2.

RETURN TYPE:
bool

is_running()[source]
Check if the task is currently running.

New in version 1.4.

RETURN TYPE:
bool

change_interval(*, seconds=0, minutes=0, hours=0, time=...)[source]
Changes the interval for the sleep time.

New in version 1.2.

PARAMETERS:
seconds (float) – The number of seconds between every iteration.

minutes (float) – The number of minutes between every iteration.

hours (float) – The number of hours between every iteration.

time (Union[datetime.time, Sequence[datetime.time]]) –

The exact times to run this loop at. Either a non-empty list or a single value of datetime.time should be passed. This cannot be used in conjunction with the relative time parameters.

New in version 2.0.

Note

Duplicate times will be ignored, and only run once.

RAISES:
ValueError – An invalid value was given.

TypeError – An invalid value for the time parameter was passed, or the time parameter was passed in conjunction with relative time parameters.

discord.ext.tasks.loop(*, seconds=..., minutes=..., hours=..., time=..., count=None, reconnect=True, loop=...)[source]
A decorator that schedules a task in the background for you with optional reconnect logic. The decorator returns a Loop.

PARAMETERS:
seconds (float) – The number of seconds between every iteration.

minutes (float) – The number of minutes between every iteration.

hours (float) – The number of hours between every iteration.

time (Union[datetime.time, Sequence[datetime.time]]) –

The exact times to run this loop at. Either a non-empty list or a single value of datetime.time should be passed. Timezones are supported. If no timezone is given for the times, it is assumed to represent UTC time.

This cannot be used in conjunction with the relative time parameters.

Note

Duplicate times will be ignored, and only run once.

New in version 2.0.

count (Optional[int]) – The number of loops to do, None if it should be an infinite loop.

reconnect (bool) – Whether to handle errors and restart the task using an exponential back-off algorithm similar to the one used in discord.Client.connect().

loop (asyncio.AbstractEventLoop) – The loop to use to register the task, if not given defaults to asyncio.get_event_loop().

RAISES:
ValueError – An invalid value was given.

TypeError – The function was not a coroutine, an invalid value for the time parameter was passed, or time parameter was passed in conjunction with relative time parameters.



discord.ext.pages
New in version 2.0.

This module provides an easy pagination system with buttons, page groups, and custom view support.

Example usage in a cog:

import asyncio

import discord
from discord.commands import SlashCommandGroup
from discord.ext import commands, pages


class PageTest(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.pages = [
            "Page 1",
            [
                discord.Embed(title="Page 2, Embed 1"),
                discord.Embed(title="Page 2, Embed 2"),
            ],
            "Page Three",
            discord.Embed(title="Page Four"),
            discord.Embed(title="Page Five"),
            [
                discord.Embed(title="Page Six, Embed 1"),
                discord.Embed(title="Page Seven, Embed 2"),
            ],
        ]
        self.pages[3].set_image(
            url="https://c.tenor.com/pPKOYQpTO8AAAAAM/monkey-developer.gif"
        )
        self.pages[4].add_field(
            name="Example Field", value="Example Value", inline=False
        )
        self.pages[4].add_field(
            name="Another Example Field", value="Another Example Value", inline=False
        )

        self.more_pages = [
            "Second Page One",
            discord.Embed(title="Second Page Two"),
            discord.Embed(title="Second Page Three"),
        ]

        self.even_more_pages = ["11111", "22222", "33333"]

    def get_pages(self):
        return self.pages

    pagetest = SlashCommandGroup("pagetest", "Commands for testing ext.pages")

    # These examples use a Slash Command Group in a cog for better organization - it's not required for using ext.pages.
    @pagetest.command(name="default")
    async def pagetest_default(self, ctx: discord.ApplicationContext):
        """Demonstrates using the paginator with the default options."""
        paginator = pages.Paginator(pages=self.get_pages())
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="hidden")
    async def pagetest_hidden(self, ctx: discord.ApplicationContext):
        """Demonstrates using the paginator with disabled buttons hidden."""
        paginator = pages.Paginator(pages=self.get_pages(), show_disabled=False)
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="loop")
    async def pagetest_loop(self, ctx: discord.ApplicationContext):
        """Demonstrates using the loop_pages option."""
        paginator = pages.Paginator(pages=self.get_pages(), loop_pages=True)
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="strings")
    async def pagetest_strings(self, ctx: discord.ApplicationContext):
        """Demonstrates passing a list of strings as pages."""
        paginator = pages.Paginator(
            pages=["Page 1", "Page 2", "Page 3"], loop_pages=True
        )
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="timeout")
    async def pagetest_timeout(self, ctx: discord.ApplicationContext):
        """Demonstrates having the buttons be disabled when the paginator view times out."""
        paginator = pages.Paginator(
            pages=self.get_pages(), disable_on_timeout=True, timeout=30
        )
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="remove_buttons")
    async def pagetest_remove(self, ctx: discord.ApplicationContext):
        """Demonstrates using the default buttons, but removing some of them."""
        paginator = pages.Paginator(pages=self.get_pages())
        paginator.remove_button("first")
        paginator.remove_button("last")
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="init")
    async def pagetest_init(self, ctx: discord.ApplicationContext):
        """Demonstrates how to pass a list of custom buttons when creating the Paginator instance."""
        pagelist = [
            pages.PaginatorButton(
                "first", label="<<-", style=discord.ButtonStyle.green
            ),
            pages.PaginatorButton("prev", label="<-", style=discord.ButtonStyle.green),
            pages.PaginatorButton(
                "page_indicator", style=discord.ButtonStyle.gray, disabled=True
            ),
            pages.PaginatorButton("next", label="->", style=discord.ButtonStyle.green),
            pages.PaginatorButton("last", label="->>", style=discord.ButtonStyle.green),
        ]
        paginator = pages.Paginator(
            pages=self.get_pages(),
            show_disabled=True,
            show_indicator=True,
            use_default_buttons=False,
            custom_buttons=pagelist,
            loop_pages=True,
        )
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="emoji_buttons")
    async def pagetest_emoji_buttons(self, ctx: discord.ApplicationContext):
        """Demonstrates using emojis for the paginator buttons instead of labels."""
        page_buttons = [
            pages.PaginatorButton(
                "first", emoji="⏪", style=discord.ButtonStyle.green
            ),
            pages.PaginatorButton("prev", emoji="⬅", style=discord.ButtonStyle.green),
            pages.PaginatorButton(
                "page_indicator", style=discord.ButtonStyle.gray, disabled=True
            ),
            pages.PaginatorButton("next", emoji="➡", style=discord.ButtonStyle.green),
            pages.PaginatorButton("last", emoji="⏩", style=discord.ButtonStyle.green),
        ]
        paginator = pages.Paginator(
            pages=self.get_pages(),
            show_disabled=True,
            show_indicator=True,
            use_default_buttons=False,
            custom_buttons=page_buttons,
            loop_pages=True,
        )
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="custom_buttons")
    async def pagetest_custom_buttons(self, ctx: discord.ApplicationContext):
        """Demonstrates adding buttons to the paginator when the default buttons are not used."""
        paginator = pages.Paginator(
            pages=self.get_pages(),
            use_default_buttons=False,
            loop_pages=False,
            show_disabled=False,
        )
        paginator.add_button(
            pages.PaginatorButton(
                "prev", label="<", style=discord.ButtonStyle.green, loop_label="lst"
            )
        )
        paginator.add_button(
            pages.PaginatorButton(
                "page_indicator", style=discord.ButtonStyle.gray, disabled=True
            )
        )
        paginator.add_button(
            pages.PaginatorButton(
                "next", style=discord.ButtonStyle.green, loop_label="fst"
            )
        )
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="custom_view")
    async def pagetest_custom_view(self, ctx: discord.ApplicationContext):
        """Demonstrates passing a custom view to the paginator."""
        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="Test Button, Does Nothing", row=1))
        view.add_item(
            discord.ui.Select(
                placeholder="Test Select Menu, Does Nothing",
                options=[
                    discord.SelectOption(
                        label="Example Option",
                        value="Example Value",
                        description="This menu does nothing!",
                    )
                ],
            )
        )
        paginator = pages.Paginator(pages=self.get_pages(), custom_view=view)
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="groups")
    async def pagetest_groups(self, ctx: discord.ApplicationContext):
        """Demonstrates using page groups to switch between different sets of pages."""
        page_buttons = [
            pages.PaginatorButton(
                "first", label="<<-", style=discord.ButtonStyle.green
            ),
            pages.PaginatorButton("prev", label="<-", style=discord.ButtonStyle.green),
            pages.PaginatorButton(
                "page_indicator", style=discord.ButtonStyle.gray, disabled=True
            ),
            pages.PaginatorButton("next", label="->", style=discord.ButtonStyle.green),
            pages.PaginatorButton("last", label="->>", style=discord.ButtonStyle.green),
        ]
        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="Test Button, Does Nothing", row=2))
        view.add_item(
            discord.ui.Select(
                placeholder="Test Select Menu, Does Nothing",
                options=[
                    discord.SelectOption(
                        label="Example Option",
                        value="Example Value",
                        description="This menu does nothing!",
                    )
                ],
            )
        )
        page_groups = [
            pages.PageGroup(
                pages=self.get_pages(),
                label="Main Page Group",
                description="Main Pages for Main Things",
            ),
            pages.PageGroup(
                pages=[
                    "Second Set of Pages, Page 1",
                    "Second Set of Pages, Page 2",
                    "Look, it's group 2, page 3!",
                ],
                label="Second Page Group",
                description="Secondary Pages for Secondary Things",
                custom_buttons=page_buttons,
                use_default_buttons=False,
                custom_view=view,
            ),
        ]
        paginator = pages.Paginator(pages=page_groups, show_menu=True)
        await paginator.respond(ctx.interaction, ephemeral=False)

    @pagetest.command(name="update")
    async def pagetest_update(self, ctx: discord.ApplicationContext):
        """Demonstrates updating an existing paginator instance with different options."""
        paginator = pages.Paginator(pages=self.get_pages(), show_disabled=False)
        await paginator.respond(ctx.interaction)
        await asyncio.sleep(3)
        await paginator.update(show_disabled=True, show_indicator=False)

    @pagetest.command(name="target")
    async def pagetest_target(self, ctx: discord.ApplicationContext):
        """Demonstrates sending the paginator to a different target than where it was invoked."""
        paginator = pages.Paginator(pages=self.get_pages())
        await paginator.respond(ctx.interaction, target=ctx.interaction.user)

    @commands.command()
    async def pagetest_prefix(self, ctx: commands.Context):
        """Demonstrates using the paginator with a prefix-based command."""
        paginator = pages.Paginator(pages=self.get_pages(), use_default_buttons=False)
        paginator.add_button(
            pages.PaginatorButton("prev", label="<", style=discord.ButtonStyle.green)
        )
        paginator.add_button(
            pages.PaginatorButton(
                "page_indicator", style=discord.ButtonStyle.gray, disabled=True
            )
        )
        paginator.add_button(
            pages.PaginatorButton("next", style=discord.ButtonStyle.green)
        )
        await paginator.send(ctx)

    @commands.command()
    async def pagetest_target(self, ctx: commands.Context):
        """Demonstrates sending the paginator to a different target than where it was invoked (prefix-command version)."""
        paginator = pages.Paginator(pages=self.get_pages())
        await paginator.send(ctx, target=ctx.author, target_message="Paginator sent!")


def setup(bot):
    bot.add_cog(PageTest(bot))
API Reference
Page
class discord.ext.pages.Page(content=None, embeds=None, custom_view=None, files=None, **kwargs)[source]
Attributes
content
custom_view
embeds
files
Methods
callback
update_files
Represents a page shown in the paginator.

Allows for directly referencing and modifying each page as a class instance.

PARAMETERS:
content (str) – The content of the page. Corresponds to the discord.Message.content attribute.

embeds (Optional[List[Union[List[discord.Embed], discord.Embed]]]) – The embeds of the page. Corresponds to the discord.Message.embeds attribute.

files (Optional[List[discord.File]]) – A list of local files to be shown with the page.

custom_view (Optional[discord.ui.View]) – The custom view shown when the page is visible. Overrides the custom_view attribute of the main paginator.

await callback(interaction=None)[source]
This function is a coroutine.

The coroutine associated to a specific page. If Paginator.page_action() is used, this coroutine is called.

PARAMETERS:
interaction (Optional[discord.Interaction]) – The interaction associated with the callback, if any.

update_files()[source]
Updates the files associated with the page by re-uploading them. Typically used when the page is changed.

RETURN TYPE:
Optional[List[File]]

property content
Gets the content for the page.

RETURN TYPE:
Optional[str]

property embeds
Gets the embeds for the page.

RETURN TYPE:
Optional[List[Union[List[Embed], Embed]]]

property custom_view
Gets the custom view assigned to the page.

RETURN TYPE:
Optional[View]

property files
Gets the files associated with the page.

RETURN TYPE:
Optional[List[File]]

Paginator
class discord.ext.pages.Paginator(pages, show_disabled=True, show_indicator=True, show_menu=False, menu_placeholder='Select Page Group', author_check=True, disable_on_timeout=True, use_default_buttons=True, default_button_row=0, loop_pages=False, custom_view=None, timeout=180.0, custom_buttons=None, trigger_on_display=None)[source]
Attributes
buttons
current_page
default_page_group
get_page_content
menu
message
page_count
page_groups
user
Methods
Paginator.from_message
add_button
add_default_buttons
add_item
add_menu
cancel
clear_items
disable
disable_all_items
edit
enable_all_items
get_item
get_page_group_content
goto_page
interaction_check
is_dispatching
is_finished
is_persistent
on_check_failure
on_error
on_timeout
page_action
remove_button
remove_item
respond
send
stop
update
update_buttons
update_custom_view
wait
Creates a paginator which can be sent as a message and uses buttons for navigation.

PARAMETERS:
pages (Union[List[PageGroup], List[Page], List[str], List[Union[List[discord.Embed], discord.Embed]]]) – The list of PageGroup objects, Page objects, strings, embeds, or list of embeds to paginate. If a list of PageGroup objects is provided and show_menu is False, only the first page group will be displayed.

show_disabled (bool) – Whether to show disabled buttons.

show_indicator (bool) – Whether to show the page indicator when using the default buttons.

show_menu (bool) – Whether to show a select menu that allows the user to switch between groups of pages.

menu_placeholder (str) – The placeholder text to show in the page group menu when no page group has been selected yet. Defaults to “Select Page Group” if not provided.

author_check (bool) – Whether only the original user of the command can change pages.

disable_on_timeout (bool) – Whether the buttons get disabled when the paginator view times out.

use_default_buttons (bool) – Whether to use the default buttons (i.e. first, prev, page_indicator, next, last)

default_button_row (int) – The row where the default paginator buttons are displayed. Has no effect if custom buttons are used.

loop_pages (bool) – Whether to loop the pages when clicking prev/next while at the first/last page in the list.

custom_view (Optional[discord.ui.View]) – A custom view whose items are appended below the pagination components. If the currently displayed page has a custom_view assigned, it will replace these view components when that page is displayed.

timeout (Optional[float]) – Timeout in seconds from last interaction with the paginator before no longer accepting input.

custom_buttons (Optional[List[PaginatorButton]]) – A list of PaginatorButtons to initialize the Paginator with. If use_default_buttons is True, this parameter is ignored.

trigger_on_display (bool) – Whether to automatically trigger the callback associated with a Page whenever it is displayed. Has no effect if no callback exists for a Page.

menu
The page group select menu associated with this paginator.

TYPE:
Optional[List[PaginatorMenu]]

page_groups
List of PageGroup objects the user can switch between.

TYPE:
Optional[List[PageGroup]]

default_page_group
The index of the default page group shown when the paginator is initially sent. Defined by setting default to True on a PageGroup.

TYPE:
Optional[int]

current_page
A zero-indexed value showing the current page number.

TYPE:
int

page_count
A zero-indexed value showing the total number of pages.

TYPE:
int

buttons
A dictionary containing the PaginatorButton objects included in this paginator.

TYPE:
Dict[str, Dict[str, Union[PaginatorButton, bool]]]

user
The user or member that invoked the paginator.

TYPE:
Optional[Union[User, Member]]

message
The message the paginator is attached to.

TYPE:
Union[Message, WebhookMessage]

await update(pages=None, show_disabled=None, show_indicator=None, show_menu=None, author_check=None, menu_placeholder=None, disable_on_timeout=None, use_default_buttons=None, default_button_row=None, loop_pages=None, custom_view=None, timeout=None, custom_buttons=None, trigger_on_display=None, interaction=None)[source]
Updates the existing Paginator instance with the provided options.

PARAMETERS:
pages (Optional[Union[List[PageGroup], List[Page], List[str], List[Union[List[discord.Embed], discord.Embed]]]]) – The list of PageGroup objects, Page objects, strings, embeds, or list of embeds to paginate.

show_disabled (bool) – Whether to show disabled buttons.

show_indicator (bool) – Whether to show the page indicator when using the default buttons.

show_menu (bool) – Whether to show a select menu that allows the user to switch between groups of pages.

author_check (bool) – Whether only the original user of the command can change pages.

menu_placeholder (str) – The placeholder text to show in the page group menu when no page group has been selected yet. Defaults to “Select Page Group” if not provided.

disable_on_timeout (bool) – Whether the buttons get disabled when the paginator view times out.

use_default_buttons (bool) – Whether to use the default buttons (i.e. first, prev, page_indicator, next, last)

default_button_row (Optional[int]) – The row where the default paginator buttons are displayed. Has no effect if custom buttons are used.

loop_pages (bool) – Whether to loop the pages when clicking prev/next while at the first/last page in the list.

custom_view (Optional[discord.ui.View]) – A custom view whose items are appended below the pagination components.

timeout (Optional[float]) – Timeout in seconds from last interaction with the paginator before no longer accepting input.

custom_buttons (Optional[List[PaginatorButton]]) – A list of PaginatorButtons to initialize the Paginator with. If use_default_buttons is True, this parameter is ignored.

trigger_on_display (bool) – Whether to automatically trigger the callback associated with a Page whenever it is displayed. Has no effect if no callback exists for a Page.

interaction (Optional[discord.Interaction]) – The interaction to use when updating the paginator. If not provided, the paginator will be updated by using its stored message attribute instead.

await on_timeout()[source]
Disables all buttons when the view times out.

RETURN TYPE:
None

await disable(include_custom=False, page=None)[source]
Stops the paginator, disabling all of its components.

PARAMETERS:
include_custom (bool) – Whether to disable components added via custom views.

page (Optional[Union[str, Union[List[discord.Embed], discord.Embed]]]) – The page content to show after disabling the paginator.

RETURN TYPE:
None

await cancel(include_custom=False, page=None)[source]
Cancels the paginator, removing all of its components from the message.

PARAMETERS:
include_custom (bool) – Whether to remove components added via custom views.

page (Optional[Union[str, Union[List[discord.Embed], discord.Embed]]]) – The page content to show after canceling the paginator.

RETURN TYPE:
None

await goto_page(page_number=0, *, interaction=None)[source]
Updates the paginator message to show the specified page number.

PARAMETERS:
page_number (int) –

The page to display.

Note

Page numbers are zero-indexed when referenced internally, but appear as one-indexed when shown to the user.

interaction (Optional[discord.Interaction]) – The interaction to use when editing the message. If not provided, the message will be edited using the paginator’s stored message attribute instead.

RETURNS:
The message associated with the paginator.

RETURN TYPE:
Message

await interaction_check(interaction)[source]
This function is a coroutine.

A callback that is called when an interaction happens within the view that checks whether the view should process item callbacks for the interaction.

This is useful to override if, for example, you want to ensure that the interaction author is a given user.

The default implementation of this returns True.

If this returns False, on_check_failure() is called.

Note

If an exception occurs within the body then the check is considered a failure and on_error() is called.

PARAMETERS:
interaction (Interaction) – The interaction that occurred.

RETURNS:
Whether the view children’s callbacks should be called.

RETURN TYPE:
bool

add_menu()[source]
Adds the default PaginatorMenu instance to the paginator.

add_default_buttons()[source]
Adds the full list of default buttons that can be used with the paginator. Includes first, prev, page_indicator, next, and last.

add_button(button)[source]
Adds a PaginatorButton to the paginator.

PARAMETERS:
button (PaginatorButton) –

remove_button(button_type)[source]
Removes a PaginatorButton from the paginator.

PARAMETERS:
button_type (str) –

update_buttons()[source]
Updates the display state of the buttons (disabled/hidden)

RETURNS:
The dictionary of buttons that were updated.

RETURN TYPE:
Dict[str, Dict[str, Union[PaginatorButton, bool]]]

update_custom_view(custom_view)[source]
Updates the custom view shown on the paginator.

PARAMETERS:
custom_view (View) –

get_page_group_content(page_group)[source]
Returns a converted list of Page objects for the given page group based on the content of its pages.

PARAMETERS:
page_group (PageGroup) –

RETURN TYPE:
List[Page]

staticmethod get_page_content(page)[source]
Converts a page into a Page object based on its content.

PARAMETERS:
page (Union[Page, str, Embed, List[Embed]]) –

RETURN TYPE:
Page

await page_action(interaction=None)[source]
Triggers the callback associated with the current page, if any.

PARAMETERS:
interaction (Optional[discord.Interaction]) – The interaction that was used to trigger the page action.

RETURN TYPE:
None

await send(ctx, target=None, target_message=None, reference=None, allowed_mentions=None, mention_author=None, delete_after=None)[source]
Sends a message with the paginated items.

PARAMETERS:
ctx (Union[Context]) – A command’s invocation context.

target (Optional[Messageable]) – A target where the paginated message should be sent, if different from the original Context

target_message (Optional[str]) – An optional message shown when the paginator message is sent elsewhere.

reference (Optional[Union[discord.Message, discord.MessageReference, discord.PartialMessage]]) – A reference to the Message to which you are replying with the paginator. This can be created using to_reference() or passed directly as a Message. You can control whether this mentions the author of the referenced message using the replied_user attribute of allowed_mentions or by setting mention_author.

allowed_mentions (Optional[AllowedMentions]) – Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

mention_author (Optional[bool]) – If set, overrides the replied_user attribute of allowed_mentions.

delete_after (Optional[float]) – If set, deletes the paginator after the specified time.

RETURNS:
The message that was sent with the paginator.

RETURN TYPE:
Message

add_item(item)
Adds an item to the view.

PARAMETERS:
item (Item) – The item to add to the view.

RAISES:
TypeError – An Item was not passed.

ValueError – Maximum number of children has been exceeded (25) or the row the item is trying to be added to is full.

RETURN TYPE:
None

clear_items()
Removes all items from the view.

RETURN TYPE:
None

disable_all_items(*, exclusions=None)
Disables all items in the view.

PARAMETERS:
exclusions (Optional[List[Item]]) – A list of items in self.children to not disable from the view.

await edit(message, suppress=None, allowed_mentions=None, delete_after=None)[source]
Edits an existing message to replace it with the paginator contents.

Note

If invoked from an interaction, you will still need to respond to the interaction.

PARAMETERS:
message (discord.Message) – The message to edit with the paginator.

suppress (bool) – Whether to suppress embeds for the message. This removes all the embeds if set to True. If set to False this brings the embeds back if they were suppressed. Using this parameter requires manage_messages.

allowed_mentions (Optional[AllowedMentions]) – Controls the mentions being processed in this message. If this is passed, then the object is merged with allowed_mentions. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in allowed_mentions. If no object is passed at all then the defaults given by allowed_mentions are used instead.

delete_after (Optional[float]) – If set, deletes the paginator after the specified time.

RETURNS:
The message that was edited. Returns None if the operation failed.

RETURN TYPE:
Optional[discord.Message]

enable_all_items(*, exclusions=None)
Enables all items in the view.

PARAMETERS:
exclusions (Optional[List[Item]]) – A list of items in self.children to not enable from the view.

classmethod from_message(message, /, *, timeout=180.0)
Converts a message’s components into a View.

The Message.components of a message are read-only and separate types from those in the discord.ui namespace. In order to modify and edit message components they must be converted into a View first.

PARAMETERS:
message (Message) – The message with components to convert into a view.

timeout (Optional[float]) – The timeout of the converted view.

RETURNS:
The converted view. This always returns a View and not one of its subclasses.

RETURN TYPE:
View

get_item(custom_id)
Get an item from the view with the given custom ID. Alias for utils.get(view.children, custom_id=custom_id).

PARAMETERS:
custom_id (str) – The custom_id of the item to get

RETURNS:
The item with the matching custom_id if it exists.

RETURN TYPE:
Optional[Item]

is_dispatching()
Whether the view has been added for dispatching purposes.

RETURN TYPE:
bool

is_finished()
Whether the view has finished interacting.

RETURN TYPE:
bool

is_persistent()
Whether the view is set up as persistent.

A persistent view has all their components with a set custom_id and a timeout set to None.

RETURN TYPE:
bool

await on_check_failure(interaction)
This function is a coroutine. A callback that is called when a View.interaction_check() returns False. This can be used to send a response when a check failure occurs.

PARAMETERS:
interaction (Interaction) – The interaction that occurred.

RETURN TYPE:
None

await on_error(error, item, interaction)
This function is a coroutine.

A callback that is called when an item’s callback or interaction_check() fails with an error.

The default implementation prints the traceback to stderr.

PARAMETERS:
error (Exception) – The exception that was raised.

item (Item) – The item that failed the dispatch.

interaction (Interaction) – The interaction that led to the failure.

RETURN TYPE:
None

remove_item(item)
Removes an item from the view.

PARAMETERS:
item (Item) – The item to remove from the view.

RETURN TYPE:
None

stop()
Stops listening to interaction events from this view.

This operation cannot be undone.

RETURN TYPE:
None

await wait()
Waits until the view has finished interacting.

A view is considered finished when stop() is called, or it times out.

RETURNS:
If True, then the view timed out. If False then the view finished normally.

RETURN TYPE:
bool

await respond(interaction, ephemeral=False, target=None, target_message='Paginator sent!')[source]
Sends an interaction response or followup with the paginated items.

PARAMETERS:
interaction (Union[discord.Interaction, BridgeContext]) – The interaction or BridgeContext which invoked the paginator. If passing a BridgeContext object, you cannot make this an ephemeral paginator.

ephemeral (bool) –

Whether the paginator message and its components are ephemeral. If target is specified, the ephemeral message content will be target_message instead.

Warning

If your paginator is ephemeral, it cannot have a timeout longer than 15 minutes (and cannot be persistent).

target (Optional[Messageable]) – A target where the paginated message should be sent, if different from the original discord.Interaction

target_message (str) – The content of the interaction response shown when the paginator message is sent elsewhere.

RETURNS:
The Message or WebhookMessage that was sent with the paginator.

RETURN TYPE:
Union[Message, WebhookMessage]

PaginatorButton
class discord.ext.pages.PaginatorButton(button_type, label=None, emoji=None, style=<ButtonStyle.success: 3>, disabled=False, custom_id=None, row=0, loop_label=None)[source]
Attributes
custom_id
disabled
emoji
label
paginator
style
url
view
Methods
callback
Creates a button used to navigate the paginator.

PARAMETERS:
button_type (str) – The type of button being created. Must be one of first, prev, next, last, or page_indicator.

label (str) – The label shown on the button. Defaults to a capitalized version of button_type (e.g. “Next”, “Prev”, etc.)

emoji (Union[str, discord.Emoji, discord.PartialEmoji]) – The emoji shown on the button in front of the label.

disabled (bool) – Whether to initially show the button as disabled.

loop_label (str) – The label shown on the button when loop_pages is set to True in the Paginator class.

paginator
The paginator class where this button is being used. Assigned to the button when Paginator.add_button is called.

TYPE:
Paginator

PARAMETERS:
style (ButtonStyle) –

custom_id (Optional[str]) –

row (int) –

property label
The label of the button, if available.

RETURN TYPE:
str | None

property emoji
The emoji of the button, if available.

RETURN TYPE:
PartialEmoji | None

property style
The style of the button.

RETURN TYPE:
ButtonStyle

property disabled
Whether the button is disabled or not.

RETURN TYPE:
bool

await callback(interaction)[source]
This function is a coroutine.

The coroutine that is called when the navigation button is clicked.

PARAMETERS:
interaction (discord.Interaction) – The interaction created by clicking the navigation button.

property custom_id
The ID of the button that gets received during an interaction.

If this button is for a URL, it does not have a custom ID.

RETURN TYPE:
str | None

property url
The URL this button sends you to.

RETURN TYPE:
str | None

property view
The underlying view for this item.

RETURN TYPE:
V | None

PaginatorMenu
class discord.ext.pages.PaginatorMenu(page_groups, placeholder=None, custom_id=None)[source]
Attributes
channel_types
custom_id
disabled
max_values
min_values
options
paginator
placeholder
values
view
Methods
add_option
append_option
callback
Creates a select menu used to switch between page groups, which can each have their own set of buttons.

PARAMETERS:
placeholder (str) – The placeholder text that is shown if nothing is selected.

paginator
The paginator class where this menu is being used. Assigned to the menu when Paginator.add_menu is called.

TYPE:
Paginator

PARAMETERS:
page_groups (List[PageGroup]) –

custom_id (Optional[str]) –

add_option(*, label, value=..., description=None, emoji=None, default=False)
Adds an option to the select menu.

To append a pre-existing discord.SelectOption use the append_option() method instead.

PARAMETERS:
label (str) – The label of the option. This is displayed to users. Can only be up to 100 characters.

value (str) – The value of the option. This is not displayed to users. If not given, defaults to the label. Can only be up to 100 characters.

description (Optional[str]) – An additional description of the option, if any. Can only be up to 100 characters.

emoji (Optional[Union[str, Emoji, PartialEmoji]]) – The emoji of the option, if available. This can either be a string representing the custom or unicode emoji or an instance of PartialEmoji or Emoji.

default (bool) – Whether this option is selected by default.

RAISES:
ValueError – The number of options exceeds 25.

append_option(option)
Appends an option to the select menu.

PARAMETERS:
option (discord.SelectOption) – The option to append to the select menu.

RAISES:
ValueError – The number of options exceeds 25.

property channel_types
A list of channel types that can be selected in this menu.

property custom_id
The ID of the select menu that gets received during an interaction.

RETURN TYPE:
str

property disabled
Whether the select is disabled or not.

RETURN TYPE:
bool

property max_values
The maximum number of items that must be chosen for this select menu.

RETURN TYPE:
int

property min_values
The minimum number of items that must be chosen for this select menu.

RETURN TYPE:
int

property options
A list of options that can be selected in this menu.

property placeholder
The placeholder text that is shown if nothing is selected, if any.

RETURN TYPE:
str | None

property values
Union[List[str], List[Union[discord.Member, discord.User]], List[discord.Role]], List[Union[discord.Member, discord.User, discord.Role]], List[discord.abc.GuildChannel]]: A list of values that have been selected by the user.

property view
The underlying view for this item.

RETURN TYPE:
V | None

await callback(interaction)[source]
This function is a coroutine.

The coroutine that is called when a menu option is selected.

PARAMETERS:
interaction (discord.Interaction) – The interaction created by selecting the menu option.

PageGroup
class discord.ext.pages.PageGroup(pages, label, description=None, emoji=None, default=None, show_disabled=None, show_indicator=None, author_check=None, disable_on_timeout=None, use_default_buttons=None, default_button_row=0, loop_pages=None, custom_view=None, timeout=None, custom_buttons=None, trigger_on_display=None)[source]
Creates a group of pages which the user can switch between.

Each group of pages can have its own options, custom buttons, custom views, etc.

Note

If multiple PageGroup objects have different options, they should all be set explicitly when creating each instance.

PARAMETERS:
pages (Union[List[str], List[Page], List[Union[List[discord.Embed], discord.Embed]]]) – The list of Page objects, strings, embeds, or list of embeds to include in the page group.

label (str) – The label shown on the corresponding PaginatorMenu dropdown option. Also used as the SelectOption value.

description (Optional[str]) – The description shown on the corresponding PaginatorMenu dropdown option.

emoji (Union[str, discord.Emoji, discord.PartialEmoji]) – The emoji shown on the corresponding PaginatorMenu dropdown option.

default (Optional[bool]) – Whether the page group should be the default page group initially shown when the paginator response is sent. Only one PageGroup can be the default page group.

show_disabled (bool) – Whether to show disabled buttons.

show_indicator (bool) – Whether to show the page indicator when using the default buttons.

author_check (bool) – Whether only the original user of the command can change pages.

disable_on_timeout (bool) – Whether the buttons get disabled when the paginator view times out.

use_default_buttons (bool) – Whether to use the default buttons (i.e. first, prev, page_indicator, next, last)

default_button_row (int) – The row where the default paginator buttons are displayed. Has no effect if custom buttons are used.

loop_pages (bool) – Whether to loop the pages when clicking prev/next while at the first/last page in the list.

custom_view (Optional[discord.ui.View]) – A custom view whose items are appended below the pagination buttons.

timeout (Optional[float]) – Timeout in seconds from last interaction with the paginator before no longer accepting input.

custom_buttons (Optional[List[PaginatorButton]]) – A list of PaginatorButtons to initialize the Paginator with. If use_default_buttons is True, this parameter is ignored.

trigger_on_display (bool) – Whether to automatically trigger the callback associated with a Page whenever it is displayed. Has no effect if no callback exists for a Page.




discord.ext.bridge
New in version 2.0.

This module allows using one command callback in order to make both a prefix command and a slash command. This page includes the API reference/documentation for the module, but only contains a short example. For a more detailed guide on how to use this, see our discord.ext.bridge guide.

Example usage:

import discord
from discord.ext import bridge

intents = discord.Intents.default()
intents.message_content = True

bot = bridge.Bot(command_prefix="!", intents=intents)

@bot.bridge_command()
async def hello(ctx):
    await ctx.respond("Hello!")

@bot.bridge_command()
async def bye(ctx):
    await ctx.respond("Bye!")

@bot.bridge_command()
async def sum(ctx, first: int, second: int):
    s = first + second
    await ctx.respond(f"{s}")

bot.run("TOKEN")
API Reference
Bots
Commands
Context




Changelog
All notable changes to this project will be documented in this file.

The format is based on Keep a Changelog, and this project adheres to Semantic Versioning when possible (see our Version Guarantees for more info).

Unreleased
These changes are available on the master branch, but have not yet been released.

No changes yet

2.3.2 - 2022-12-03
Fixed
Fixed another AttributeError relating to the new bridge_commands attribute on ext.bridge.Bot. (#1815)

Fixed an AttributeError in select relating to the select type. (#1814)

Fix Thread.applied_tags always returning an empty list. (#1817)

2.3.1 - 2022-11-27
Fixed
Fixed AttributeError relating to the new bridge_commands attribute on ext.bridge.Bot. (#1802)

2.3.0 - 2022-11-23
Added
New brief Attribute to BridgeSlashCommand. (#1676)

Python 3.11 support. (#1680)

New select types user, role, mentionable, and channel - Along with their respective types and shortcut decorators. (#1702)

Added support for age-restricted (NSFW) commands. (#1775)

New flags: PublicUserFlags.active_developer & ApplicationFlags.active. (#1776)

Support for new forum features including tags, default slowmode, and default sort order. (#1636)

Support for new thread attributes total_message_sent and is_pinned. (#1636)

Added bridge_commands attribute to ext.bridge.Bot for access to bridge command objects. (#1787)

Updated Guild.features to include new and previously missing features. (#1788)

Fixed
Fix bridge.has_permissions. (#1695)

Fix audit log overwrite type always resulting in None. (#1716)

Fixed error when using suppress kwarg in send(). (#1719 & #1723)

Changed
get_application_command() type kwarg now defaults to ApplicationCommand, so all command types can be retrieved by default. (#1678)

get_application_command() now supports retrieving subcommands and subcommand groups. (#1678)

Removed
Removed the guild feature PRIVATE_THREADS due to paywall limitation removal. (#1789)

2.2.2 - 2022-10-05
Fixed
Fixed parent attribute of second level subcommands being set to the base level command instead of the direct parent. (#1673)

2.2.1 - 2022-10-05
Added
New SlashCommand.qualified_id attribute. (#1672)

Fixed
Fixed a TypeError in ban() methods related to the new delete_message_seconds parameter. (#1666)

Fixed broken cog and parent attributes on commands in cogs. (#1662)

Fixed SlashCommand.mention for subcommands. (#1672)

2.2.0 - 2022-10-02
Added
New Guild Feature INVITES_DISABLED. (#1613)

suppress kwarg to Messageable.send(). (#1587)

proxy and proxy_auth params to many Webhook related methods. (#1655)

delete_message_seconds parameter in ban methods. (#1557)

New View.get_item() method. (#1659)

Permissions support for bridge commands. (#1642)

New BridgeCommand.invoke() method. (#1642)

New raw_mentions, raw_role_mentions and raw_channel_mentions functions in discord.utils. (#1658)

New methods original_response, edit_original_response & delete_original_response for Interaction objects. (#1609)

Deprecated
The delete_message_days parameter in ban methods is now deprecated. Please use delete_message_seconds instead. (#1557)

The original_message, edit_original_message & delete_original_message methods for Interaction are now deprecated. Please use the respective original_response, edit_original_response & delete_original_response methods instead. (#1609)

Fixed
Various fixes to ext.bridge groups. (#1633 & #1631)

Fix VOICE_SERVER_UPDATE error. (#1624)

Removed unnecessary instance check in autocomplete. (#1643)

Interaction responses are now passed the respective proxy and proxy_auth params as defined in Client. (#1655)

2.1.3 - 2022-09-06
Fixed
Fix TypeError in process_application_commands. (#1622)

2.1.2 - 2022-09-06
Fixed
Fix subcommands having MISSING cog attribute. (#1594 & #1605)

2.1.1 - 2022-08-25
Fixed
Bridge command detection in cogs. (#1592)

2.1.0 - 2022-08-25
Added
Support for add, sub, union, intersect, and inverse operations on classes inheriting from BaseFlags. (#1486)

A disable_on_timeout kwarg in the View constructor. (#1492)

New mention property for SlashCommand objects, allowing a shortcut for the new command markdown syntax. (#1523)

An app_commands_badge value on ApplicationFlags. (#1535 and #1553)

A new fetch_application method in the Client object. (#1536)

New on_check_failure event method for the View class. (#799)

A set_mfa_required method to Guild. (#1552)

Support for command groups with bridge commands. (#1496)

Support for Attachment type options for bridge commands. (#1496)

is_app property for BridgeContext to better differentiate context types. (#1496)

Support for localization on bridge commands. (#1496)

A filter_params helper function in discord.utils. (#1496)

Support for InteractionMessage via the message property of View. (#1492)

Changed
Use slash_variant and ext_variant attributes instead of get_application_command() and get_ext_command() methods on BridgeCommand. (#1496)

Set store kwarg default to False in load_extension(s) method. (#1520)

commands.has_permissions() check now returns True in DM channels. (#1577)

Fixed
Fix VoiceChannel/CategoryChannel data being invalidated on Option._invoke. (#1490)

Fix type issues in options.py (#1473)

Fix KeyError on AutoModActionExecution when the bot lacks the Message Content Intent. (#1521)

Large code/documentation cleanup & minor bug fixes. (#1476)

Fix Option with type str raising AttributeError when min_length or max_length kwargs are passed. (#1527)

Fix load_extensions parameters not being passed through correctly. (#1537)

Fix SlashCommandGroup descriptions to use the correct default string. (#1539 and #1586)

Fix Enum type options breaking due to from_datatype() method & Fix minor typing import. (#1541)

Adjust category and guild _channels attributes to work with NoneType positions. (#1530)

Make SelectOption.emoji a property. (#1550)

Improve sticker creation by checking for minimum and maximum length on name and description. (#1546)

Fix threads created with a base message being set to the wrong message_reference. (#1551)

Avoid unnecessary call to sync_commands during runtime. (#1563)

Fix bug in Modal.on_timeout() by using custom_id to create timeout task. (#1562)

Respect limit argument in Guild.bans(). (#1573)

Fix before argument in on_scheduled_event_update event always set to None by converting ID to int. (#1580)

Fix __eq__ method ApplicationCommand accidentally comparing to self. (#1585)

Apply cog_check method to ApplicationCommand invocations. (#1575)

Fix Interaction.edit_original_message() using ConnectionState instead of InteractionMessageState. (#1565)

Fix required parameters validation error. (#1589)

Security
Improved fix for application-based bots without the bot scope (#1584)

2.0.1 - 2022-08-16
Security
Fix for application-based bots without the bot scope (#1568)

2.0.0 - 2022-07-08
Added
New news property on TextChannel. (#1370)

New invisible kwarg to defer() method. (#1379)

Support for audit log event type 121 APPLICATION_COMMAND_PERMISSION_UPDATE. (#1424)

New ForumChannelConverter. (#1440)

A shortcut jump_url property to users. (#1444)

Ability for webhooks to create forum posts. (#1405)

New message property to View (#1446)

Support for error, before_invoke, and after_invoke handlers on BridgeCommand. (#1411)

New thread property to Message. (#1447)

A starting_message property to Thread. (#1447)

An app_permissions property to Interaction and ApplicationContext. (#1460)

Support for loading folders in load_extension, and a new helper function load_extensions. (#1423)

Support for AutoMod (#1316)

Support for min_length and max_length kwargs in Option. (#1463)

Native timeout support for Modal. (#1434)

Changed
Updated to new sticker limit for premium guilds. (#1420)

Replace deprecated endpoint in HTTPClient.change_my_nickname. (#1426)

Updated deprecated IDENTIFY packet connection properties. (#1430)

Removed
Guild.region attribute (Deprecated on API, VoiceChannel.rtc_region should be used instead). (#1429)

Fixed
Change guild_only to dm_permission in application command to_dict method. (#1368)

Fix repr(ScheduledEventLocation) raising TypeError. (#1369)

Fix repr(TextChannel) raising AttributeError. (#1370)

Fix application command validation. (#1372)

Fix scheduled event cover property raising AttributeError. (#1381)

Fix SlashCommandGroup treating optional arguments as required. (#1386)

Fix remove_application_command not always removing commands. (#1391)

Fix busy-loop in DecodeManager when decode queue is empty, causing 100% CPU consumption. (#1395)

Fix incorrect activities and permissions on Interaction and Option objects. (#1365)

Converted PartialMember deaf and mute from str annotation (incorrect) to bool annotation. (#1424)

Use PUT instead of POST in HTTPClient.join_thread. (#1426)

Fix enum options not setting input_type to a SlashCommandOptionType. (#1428)

Fixed TypeError when using thread options. (#1427)

Allow voice channels in PartialMessage. (#1441)

Fixed AuditLogAction.target_type for application command permission updates. (#1445)

Fix bridge commands to ignore the ephemeral kwarg. (#1453)

Update thread.members on thread.fetch_members. (#1464)

Fix error when discord doesn’t send the app_permissions data in Interaction. (#1467)

Fix AttributeError when voice client play() function isn’t completed yet. (#1360)

2.0.0-rc.1 - 2022-05-17
Added
A delete_after kwarg to Paginator.send. (#1245)

New reason kwarg to Thread.delete_messages. (#1253)

A new jump_url property to channel and thread objects. (#1254 & #1259)

New Paginator.edit() method. (#1258)

An EmbedField object. (#1181)

Option names and descriptions are now validated locally. (#1271)

Component field limits are now enforced at library-level (#1065 & #1289)

Support providing option channel types as list. (#1000)

New Guild.jump_url property. (#1282)

ext.pages now supports ext.bridge. (#1288)

Implement None check for check_guilds. (#1291)

A debug warning to catch deprecated perms v1 usage until v2 perms are implemented. (#1301)

A new files parameter to Page object. (#1300)

A disable_all_items and enable_all_items methods to View object. (#1199 & #1319)

New is_nsfw attribute to voice channels. (#1317)

Support for Permissions v2. (#1328)

Allow using Enum to specify option choices. (#1292)

The file and files parameters to InteractionResponse.edit_message(). (#1340)

A BridgeExtContext.delete() method. (#1348)

Forum channels support. (#1249)

Implemented Interaction.to_dict. (#1274)

Support event covers for audit logs. (#1355)

Changed
Removed implicit defer call in View. (#1260)

Option class and usage was rewritten. (#1251)

description argument of PageGroup is now optional. (#1330)

Allow Modal.children to be set on initialization. (#1311)

Renamed delete_exiting to delete_existing (typo). (#1336)

Fixed
Fix PartialMessage.edit() setting view as None when view kwarg is not passed. (#1256)

Fix channel parsing in slash command invocations. (#1257)

Make channel position attribute optional. (#1257)

Fix PaginatorMenu to use interaction routes for updates. (#1267)

Fix PartialMessage.edit() behavior when content is None. (#1268)

Fix Paginator.add_menu() and Paginator.add_default_buttons() passing custom_id to PaginatorMenu. (#1270)

Fix process_application_commands command not found fallback. (#1262)

Fix interaction response race condition. (#1039)

Remove voice client when bot disconnects. (#1273)

Fix conversion exception in ext.bridge. (#1250)

Context.me return ClientUser when guilds intent is absent. (#1286)

Updated Message.edit type hinting overload and removed resulting redundant overloads. (#1299)

Improved validation regex for command names & options. (#1309)

Correct Guild.fetch_members() type hints. (#1323)

Multiple fixes and enhancements for PageGroup handling. (#1350)

Make TextChannel._get_channel async. (#1358)

2.0.0-beta.7 - 2022-04-09
Fixed
Fix py3.10 UnionType checks issue. (#1240)

Older Versions
A changelog for versions prior to v2.0 can be found here.



Version Guarantees
The library follows the semantic versioning principle which means that the major version is updated every time there is an incompatible API change. However due to the lack of guarantees on the Discord side when it comes to breaking changes along with the fairly dynamic nature of Python it can be hard to discern what can be considered a breaking change and what isn’t.

The first thing to keep in mind is that breaking changes only apply to publicly documented functions and classes. If it’s not listed in the documentation here then it is not part of the public API and is thus bound to change. This includes attributes that start with an underscore or functions without an underscore that are not documented.

Note

The examples below are non-exhaustive.

Examples of Breaking Changes
Changing the default parameter value to something else.

Renaming a function without an alias to an old function.

Adding or removing parameters to an event.

Examples of Non-Breaking Changes
Adding or removing private underscored attributes.

Adding an element into the __slots__ of a data class.

Changing the behaviour of a function to fix a bug.

Changes in the documentation.

Modifying the internal HTTP handling.

Upgrading the dependencies to a new version, major or otherwise.







